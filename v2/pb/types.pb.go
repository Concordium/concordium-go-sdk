// Code generated by protoc-pb-go. DO NOT EDIT.
// versions:
// 	protoc-pb-go v1.28.1
// 	protoc        v3.17.3
// source: types.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Information about how open the pool is to new delegators.
type OpenStatus int32

const (
	OpenStatus_OPEN_STATUS_OPEN_FOR_ALL   OpenStatus = 0
	OpenStatus_OPEN_STATUS_CLOSED_FOR_NEW OpenStatus = 1
	OpenStatus_OPEN_STATUS_CLOSED_FOR_ALL OpenStatus = 2
)

// Enum value maps for OpenStatus.
var (
	OpenStatus_name = map[int32]string{
		0: "OPEN_STATUS_OPEN_FOR_ALL",
		1: "OPEN_STATUS_CLOSED_FOR_NEW",
		2: "OPEN_STATUS_CLOSED_FOR_ALL",
	}
	OpenStatus_value = map[string]int32{
		"OPEN_STATUS_OPEN_FOR_ALL":   0,
		"OPEN_STATUS_CLOSED_FOR_NEW": 1,
		"OPEN_STATUS_CLOSED_FOR_ALL": 2,
	}
)

func (x OpenStatus) Enum() *OpenStatus {
	p := new(OpenStatus)
	*p = x
	return p
}

func (x OpenStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (OpenStatus) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x OpenStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenStatus.Descriptor instead.
func (OpenStatus) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

// Version of smart contract.
type ContractVersion int32

const (
	ContractVersion_V0 ContractVersion = 0
	ContractVersion_V1 ContractVersion = 1
)

// Enum value maps for ContractVersion.
var (
	ContractVersion_name = map[int32]string{
		0: "V0",
		1: "V1",
	}
	ContractVersion_value = map[string]int32{
		"V0": 0,
		"V1": 1,
	}
)

func (x ContractVersion) Enum() *ContractVersion {
	p := new(ContractVersion)
	*p = x
	return p
}

func (x ContractVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (ContractVersion) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x ContractVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractVersion.Descriptor instead.
func (ContractVersion) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

// The type of a credential.
type CredentialType int32

const (
	// An initial credential created by the identity provider.
	CredentialType_CREDENTIAL_TYPE_INITIAL CredentialType = 0
	// A normal credential type created by the account.
	CredentialType_CREDENTIAL_TYPE_NORMAL CredentialType = 1
)

// Enum value maps for CredentialType.
var (
	CredentialType_name = map[int32]string{
		0: "CREDENTIAL_TYPE_INITIAL",
		1: "CREDENTIAL_TYPE_NORMAL",
	}
	CredentialType_value = map[string]int32{
		"CREDENTIAL_TYPE_INITIAL": 0,
		"CREDENTIAL_TYPE_NORMAL":  1,
	}
)

func (x CredentialType) Enum() *CredentialType {
	p := new(CredentialType)
	*p = x
	return p
}

func (x CredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[2].Descriptor()
}

func (CredentialType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[2]
}

func (x CredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialType.Descriptor instead.
func (CredentialType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

// The type of chain update.
type UpdateType int32

const (
	UpdateType_UPDATE_PROTOCOL                          UpdateType = 0
	UpdateType_UPDATE_ELECTION_DIFFICULTY               UpdateType = 1
	UpdateType_UPDATE_EURO_PER_ENERGY                   UpdateType = 2
	UpdateType_UPDATE_MICRO_CCD_PER_EURO                UpdateType = 3
	UpdateType_UPDATE_FOUNDATION_ACCOUNT                UpdateType = 4
	UpdateType_UPDATE_MINT_DISTRIBUTION                 UpdateType = 5
	UpdateType_UPDATE_TRANSACTION_FEE_DISTRIBUTION      UpdateType = 6
	UpdateType_UPDATE_GAS_REWARDS                       UpdateType = 7
	UpdateType_UPDATE_POOL_PARAMETERS                   UpdateType = 8
	UpdateType_ADD_ANONYMITY_REVOKER                    UpdateType = 9
	UpdateType_ADD_IDENTITY_PROVIDER                    UpdateType = 10
	UpdateType_UPDATE_ROOT_KEYS                         UpdateType = 11
	UpdateType_UPDATE_LEVEL1_KEYS                       UpdateType = 12
	UpdateType_UPDATE_LEVEL2_KEYS                       UpdateType = 13
	UpdateType_UPDATE_COOLDOWN_PARAMETERS               UpdateType = 14
	UpdateType_UPDATE_TIME_PARAMETERS                   UpdateType = 15
	UpdateType_UPDATE_TIMEOUT_PARAMETERS                UpdateType = 16
	UpdateType_UPDATE_MIN_BLOCK_TIME                    UpdateType = 17
	UpdateType_UPDATE_BLOCK_ENERGY_LIMIT                UpdateType = 18
	UpdateType_UPDATE_FINALIZATION_COMMITTEE_PARAMETERS UpdateType = 19
)

// Enum value maps for UpdateType.
var (
	UpdateType_name = map[int32]string{
		0:  "UPDATE_PROTOCOL",
		1:  "UPDATE_ELECTION_DIFFICULTY",
		2:  "UPDATE_EURO_PER_ENERGY",
		3:  "UPDATE_MICRO_CCD_PER_EURO",
		4:  "UPDATE_FOUNDATION_ACCOUNT",
		5:  "UPDATE_MINT_DISTRIBUTION",
		6:  "UPDATE_TRANSACTION_FEE_DISTRIBUTION",
		7:  "UPDATE_GAS_REWARDS",
		8:  "UPDATE_POOL_PARAMETERS",
		9:  "ADD_ANONYMITY_REVOKER",
		10: "ADD_IDENTITY_PROVIDER",
		11: "UPDATE_ROOT_KEYS",
		12: "UPDATE_LEVEL1_KEYS",
		13: "UPDATE_LEVEL2_KEYS",
		14: "UPDATE_COOLDOWN_PARAMETERS",
		15: "UPDATE_TIME_PARAMETERS",
		16: "UPDATE_TIMEOUT_PARAMETERS",
		17: "UPDATE_MIN_BLOCK_TIME",
		18: "UPDATE_BLOCK_ENERGY_LIMIT",
		19: "UPDATE_FINALIZATION_COMMITTEE_PARAMETERS",
	}
	UpdateType_value = map[string]int32{
		"UPDATE_PROTOCOL":                          0,
		"UPDATE_ELECTION_DIFFICULTY":               1,
		"UPDATE_EURO_PER_ENERGY":                   2,
		"UPDATE_MICRO_CCD_PER_EURO":                3,
		"UPDATE_FOUNDATION_ACCOUNT":                4,
		"UPDATE_MINT_DISTRIBUTION":                 5,
		"UPDATE_TRANSACTION_FEE_DISTRIBUTION":      6,
		"UPDATE_GAS_REWARDS":                       7,
		"UPDATE_POOL_PARAMETERS":                   8,
		"ADD_ANONYMITY_REVOKER":                    9,
		"ADD_IDENTITY_PROVIDER":                    10,
		"UPDATE_ROOT_KEYS":                         11,
		"UPDATE_LEVEL1_KEYS":                       12,
		"UPDATE_LEVEL2_KEYS":                       13,
		"UPDATE_COOLDOWN_PARAMETERS":               14,
		"UPDATE_TIME_PARAMETERS":                   15,
		"UPDATE_TIMEOUT_PARAMETERS":                16,
		"UPDATE_MIN_BLOCK_TIME":                    17,
		"UPDATE_BLOCK_ENERGY_LIMIT":                18,
		"UPDATE_FINALIZATION_COMMITTEE_PARAMETERS": 19,
	}
)

func (x UpdateType) Enum() *UpdateType {
	p := new(UpdateType)
	*p = x
	return p
}

func (x UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[3].Descriptor()
}

func (UpdateType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[3]
}

func (x UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateType.Descriptor instead.
func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

// The type of transaction.
type TransactionType int32

const (
	TransactionType_DEPLOY_MODULE                       TransactionType = 0
	TransactionType_INIT_CONTRACT                       TransactionType = 1
	TransactionType_UPDATE                              TransactionType = 2
	TransactionType_TRANSFER                            TransactionType = 3
	TransactionType_ADD_BAKER                           TransactionType = 4
	TransactionType_REMOVE_BAKER                        TransactionType = 5
	TransactionType_UPDATE_BAKER_STAKE                  TransactionType = 6
	TransactionType_UPDATE_BAKER_RESTAKE_EARNINGS       TransactionType = 7
	TransactionType_UPDATE_BAKER_KEYS                   TransactionType = 8
	TransactionType_UPDATE_CREDENTIAL_KEYS              TransactionType = 9
	TransactionType_ENCRYPTED_AMOUNT_TRANSFER           TransactionType = 10
	TransactionType_TRANSFER_TO_ENCRYPTED               TransactionType = 11
	TransactionType_TRANSFER_TO_PUBLIC                  TransactionType = 12
	TransactionType_TRANSFER_WITH_SCHEDULE              TransactionType = 13
	TransactionType_UPDATE_CREDENTIALS                  TransactionType = 14
	TransactionType_REGISTER_DATA                       TransactionType = 15
	TransactionType_TRANSFER_WITH_MEMO                  TransactionType = 16
	TransactionType_ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO TransactionType = 17
	TransactionType_TRANSFER_WITH_SCHEDULE_AND_MEMO     TransactionType = 18
	TransactionType_CONFIGURE_BAKER                     TransactionType = 19
	TransactionType_CONFIGURE_DELEGATION                TransactionType = 20
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0:  "DEPLOY_MODULE",
		1:  "INIT_CONTRACT",
		2:  "UPDATE",
		3:  "TRANSFER",
		4:  "ADD_BAKER",
		5:  "REMOVE_BAKER",
		6:  "UPDATE_BAKER_STAKE",
		7:  "UPDATE_BAKER_RESTAKE_EARNINGS",
		8:  "UPDATE_BAKER_KEYS",
		9:  "UPDATE_CREDENTIAL_KEYS",
		10: "ENCRYPTED_AMOUNT_TRANSFER",
		11: "TRANSFER_TO_ENCRYPTED",
		12: "TRANSFER_TO_PUBLIC",
		13: "TRANSFER_WITH_SCHEDULE",
		14: "UPDATE_CREDENTIALS",
		15: "REGISTER_DATA",
		16: "TRANSFER_WITH_MEMO",
		17: "ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO",
		18: "TRANSFER_WITH_SCHEDULE_AND_MEMO",
		19: "CONFIGURE_BAKER",
		20: "CONFIGURE_DELEGATION",
	}
	TransactionType_value = map[string]int32{
		"DEPLOY_MODULE":                       0,
		"INIT_CONTRACT":                       1,
		"UPDATE":                              2,
		"TRANSFER":                            3,
		"ADD_BAKER":                           4,
		"REMOVE_BAKER":                        5,
		"UPDATE_BAKER_STAKE":                  6,
		"UPDATE_BAKER_RESTAKE_EARNINGS":       7,
		"UPDATE_BAKER_KEYS":                   8,
		"UPDATE_CREDENTIAL_KEYS":              9,
		"ENCRYPTED_AMOUNT_TRANSFER":           10,
		"TRANSFER_TO_ENCRYPTED":               11,
		"TRANSFER_TO_PUBLIC":                  12,
		"TRANSFER_WITH_SCHEDULE":              13,
		"UPDATE_CREDENTIALS":                  14,
		"REGISTER_DATA":                       15,
		"TRANSFER_WITH_MEMO":                  16,
		"ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO": 17,
		"TRANSFER_WITH_SCHEDULE_AND_MEMO":     18,
		"CONFIGURE_BAKER":                     19,
		"CONFIGURE_DELEGATION":                20,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[4].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[4]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

// The different versions of the protocol.
type ProtocolVersion int32

const (
	ProtocolVersion_PROTOCOL_VERSION_1 ProtocolVersion = 0
	ProtocolVersion_PROTOCOL_VERSION_2 ProtocolVersion = 1
	ProtocolVersion_PROTOCOL_VERSION_3 ProtocolVersion = 2
	ProtocolVersion_PROTOCOL_VERSION_4 ProtocolVersion = 3
	ProtocolVersion_PROTOCOL_VERSION_5 ProtocolVersion = 4
	ProtocolVersion_PROTOCOL_VERSION_6 ProtocolVersion = 5
)

// Enum value maps for ProtocolVersion.
var (
	ProtocolVersion_name = map[int32]string{
		0: "PROTOCOL_VERSION_1",
		1: "PROTOCOL_VERSION_2",
		2: "PROTOCOL_VERSION_3",
		3: "PROTOCOL_VERSION_4",
		4: "PROTOCOL_VERSION_5",
		5: "PROTOCOL_VERSION_6",
	}
	ProtocolVersion_value = map[string]int32{
		"PROTOCOL_VERSION_1": 0,
		"PROTOCOL_VERSION_2": 1,
		"PROTOCOL_VERSION_3": 2,
		"PROTOCOL_VERSION_4": 3,
		"PROTOCOL_VERSION_5": 4,
		"PROTOCOL_VERSION_6": 5,
	}
)

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}

func (x ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[5].Descriptor()
}

func (ProtocolVersion) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[5]
}

func (x ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolVersion.Descriptor instead.
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

type PeersInfo_Peer_CatchupStatus int32

const (
	// The peer does not have any data unknown to us. If we receive a message from the
	// peer that refers to unknown data (e.g., an unknown block) the peer is marked as pending.
	PeersInfo_Peer_UPTODATE PeersInfo_Peer_CatchupStatus = 0
	// The peer might have some data unknown to us. A peer can be in this state either because
	// it sent a message that refers to data unknown to us, or before we have established a baseline with it.
	// The latter happens during node startup, as well as upon protocol updates until the initial catchup handshake
	// completes.
	PeersInfo_Peer_PENDING PeersInfo_Peer_CatchupStatus = 1
	// The node is currently catching up by requesting blocks from this peer.
	// There will be at most one peer with this status at a time.
	// Once the peer has responded to the request, its status will be changed to:
	// - 'UPTODATE' if the peer has no more data that is not known to us
	// - 'PENDING' if the node has more data that is unknown to us.
	PeersInfo_Peer_CATCHINGUP PeersInfo_Peer_CatchupStatus = 2
)

// Enum value maps for PeersInfo_Peer_CatchupStatus.
var (
	PeersInfo_Peer_CatchupStatus_name = map[int32]string{
		0: "UPTODATE",
		1: "PENDING",
		2: "CATCHINGUP",
	}
	PeersInfo_Peer_CatchupStatus_value = map[string]int32{
		"UPTODATE":   0,
		"PENDING":    1,
		"CATCHINGUP": 2,
	}
)

func (x PeersInfo_Peer_CatchupStatus) Enum() *PeersInfo_Peer_CatchupStatus {
	p := new(PeersInfo_Peer_CatchupStatus)
	*p = x
	return p
}

func (x PeersInfo_Peer_CatchupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeersInfo_Peer_CatchupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[6].Descriptor()
}

func (PeersInfo_Peer_CatchupStatus) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[6]
}

func (x PeersInfo_Peer_CatchupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeersInfo_Peer_CatchupStatus.Descriptor instead.
func (PeersInfo_Peer_CatchupStatus) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{163, 0, 0}
}

// The committee information of a node configured with
// baker keys but somehow the node is _not_ part of the
// current baking committee.
type NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo int32

const (
	// The node is started with baker keys however it is currently not in the baking committee.
	// The node is __not__ baking.
	NodeInfo_BakerConsensusInfo_NOT_IN_COMMITTEE NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo = 0
	// The account is registered as a baker but not in the current `Epoch`.
	// The node is __not__ baking.
	NodeInfo_BakerConsensusInfo_ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo = 1
	// The node has configured invalid baker keys i.e., the configured
	// baker keys do not match the current keys on the baker account.
	// The node is __not__ baking.
	NodeInfo_BakerConsensusInfo_ADDED_BUT_WRONG_KEYS NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo = 2
)

// Enum value maps for NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo.
var (
	NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo_name = map[int32]string{
		0: "NOT_IN_COMMITTEE",
		1: "ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE",
		2: "ADDED_BUT_WRONG_KEYS",
	}
	NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo_value = map[string]int32{
		"NOT_IN_COMMITTEE":                  0,
		"ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE": 1,
		"ADDED_BUT_WRONG_KEYS":              2,
	}
)

func (x NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo) Enum() *NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo {
	p := new(NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo)
	*p = x
	return p
}

func (x NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[7].Descriptor()
}

func (NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[7]
}

func (x NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo.Descriptor instead.
func (NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{164, 1, 0}
}

// A message that contains no information.
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

// Hash of a block. This is always 32 bytes long.
type BlockHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BlockHash) Reset() {
	*x = BlockHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHash) ProtoMessage() {}

func (x *BlockHash) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHash.ProtoReflect.Descriptor instead.
func (*BlockHash) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *BlockHash) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A SHA256 hash. This is always 32 bytes long.
type Sha256Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Sha256Hash) Reset() {
	*x = Sha256Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sha256Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sha256Hash) ProtoMessage() {}

func (x *Sha256Hash) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sha256Hash.ProtoReflect.Descriptor instead.
func (*Sha256Hash) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *Sha256Hash) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Hash of a transaction. This is always 32 bytes long.
type TransactionHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TransactionHash) Reset() {
	*x = TransactionHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHash) ProtoMessage() {}

func (x *TransactionHash) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHash.ProtoReflect.Descriptor instead.
func (*TransactionHash) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionHash) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Hash of the state after some block. This is always 32 bytes long.
type StateHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StateHash) Reset() {
	*x = StateHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateHash) ProtoMessage() {}

func (x *StateHash) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateHash.ProtoReflect.Descriptor instead.
func (*StateHash) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *StateHash) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// The absolute height of a block. This is the number of ancestors of a block
// since the genesis block. In particular, the chain genesis block has absolute
// height 0.
type AbsoluteBlockHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AbsoluteBlockHeight) Reset() {
	*x = AbsoluteBlockHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbsoluteBlockHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsoluteBlockHeight) ProtoMessage() {}

func (x *AbsoluteBlockHeight) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsoluteBlockHeight.ProtoReflect.Descriptor instead.
func (*AbsoluteBlockHeight) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *AbsoluteBlockHeight) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The height of a block relative to the last genesis. This differs from the
// absolute block height in that it counts height from the last protocol update.
type BlockHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BlockHeight) Reset() {
	*x = BlockHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeight) ProtoMessage() {}

func (x *BlockHeight) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeight.ProtoReflect.Descriptor instead.
func (*BlockHeight) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *BlockHeight) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The ID of a baker, which is the index of its account.
type BakerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BakerId) Reset() {
	*x = BakerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerId) ProtoMessage() {}

func (x *BakerId) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerId.ProtoReflect.Descriptor instead.
func (*BakerId) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *BakerId) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Index of the account in the account table. These are assigned sequentially
// in the order of creation of accounts. The first account has index 0.
type AccountIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AccountIndex) Reset() {
	*x = AccountIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountIndex) ProtoMessage() {}

func (x *AccountIndex) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountIndex.ProtoReflect.Descriptor instead.
func (*AccountIndex) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *AccountIndex) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A smart contract module reference. This is always 32 bytes long.
type ModuleRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ModuleRef) Reset() {
	*x = ModuleRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRef) ProtoMessage() {}

func (x *ModuleRef) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRef.ProtoReflect.Descriptor instead.
func (*ModuleRef) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *ModuleRef) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Source bytes of a versioned smart contract module.
type VersionedModuleSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Module:
	//	*VersionedModuleSource_V0
	//	*VersionedModuleSource_V1
	Module isVersionedModuleSource_Module `protobuf_oneof:"module"`
}

func (x *VersionedModuleSource) Reset() {
	*x = VersionedModuleSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedModuleSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedModuleSource) ProtoMessage() {}

func (x *VersionedModuleSource) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedModuleSource.ProtoReflect.Descriptor instead.
func (*VersionedModuleSource) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (m *VersionedModuleSource) GetModule() isVersionedModuleSource_Module {
	if m != nil {
		return m.Module
	}
	return nil
}

func (x *VersionedModuleSource) GetV0() *VersionedModuleSource_ModuleSourceV0 {
	if x, ok := x.GetModule().(*VersionedModuleSource_V0); ok {
		return x.V0
	}
	return nil
}

func (x *VersionedModuleSource) GetV1() *VersionedModuleSource_ModuleSourceV1 {
	if x, ok := x.GetModule().(*VersionedModuleSource_V1); ok {
		return x.V1
	}
	return nil
}

type isVersionedModuleSource_Module interface {
	isVersionedModuleSource_Module()
}

type VersionedModuleSource_V0 struct {
	V0 *VersionedModuleSource_ModuleSourceV0 `protobuf:"bytes,1,opt,name=v0,proto3,oneof"`
}

type VersionedModuleSource_V1 struct {
	V1 *VersionedModuleSource_ModuleSourceV1 `protobuf:"bytes,2,opt,name=v1,proto3,oneof"`
}

func (*VersionedModuleSource_V0) isVersionedModuleSource_Module() {}

func (*VersionedModuleSource_V1) isVersionedModuleSource_Module() {}

// Unix timestamp in milliseconds.
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *Timestamp) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// An individual release of a locked balance.
type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective time of the release in milliseconds since unix epoch.
	Timestamp *Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Amount to be released.
	Amount *Amount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// List of transaction hashes that contribute a balance to this release.
	Transactions []*TransactionHash `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *Release) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Release) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Release) GetTransactions() []*TransactionHash {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// A new individual release. Part of a single transfer with schedule transaction.
type NewRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective time of the release in milliseconds since unix epoch.
	Timestamp *Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Amount to be released.
	Amount *Amount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *NewRelease) Reset() {
	*x = NewRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRelease) ProtoMessage() {}

func (x *NewRelease) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRelease.ProtoReflect.Descriptor instead.
func (*NewRelease) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *NewRelease) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NewRelease) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// State of the account's release schedule. This is the balance of the account
// that is owned by the account, but cannot be used until the release point.
type ReleaseSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total amount locked in the release schedule.
	Total *Amount `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	// A list of releases, ordered by increasing timestamp.
	Schedules []*Release `protobuf:"bytes,2,rep,name=schedules,proto3" json:"schedules,omitempty"`
}

func (x *ReleaseSchedule) Reset() {
	*x = ReleaseSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSchedule) ProtoMessage() {}

func (x *ReleaseSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSchedule.ProtoReflect.Descriptor instead.
func (*ReleaseSchedule) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

func (x *ReleaseSchedule) GetTotal() *Amount {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *ReleaseSchedule) GetSchedules() []*Release {
	if x != nil {
		return x.Schedules
	}
	return nil
}

// An encrypted amount, in two chunks in "little endian limbs". That is, the
// first chunk represents the low 32 bits of an amount, and the second chunk
// represents the high 32 bits. The chunks are serialized in order and
// represented as a byte array.
// Always 192 bytes.
type EncryptedAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EncryptedAmount) Reset() {
	*x = EncryptedAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedAmount) ProtoMessage() {}

func (x *EncryptedAmount) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedAmount.ProtoReflect.Descriptor instead.
func (*EncryptedAmount) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

func (x *EncryptedAmount) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type EncryptedBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encrypted amount that is a result of this account's actions.
	// In particular this list includes the aggregate of
	//
	// - remaining amounts that result when transferring to public balance
	// - remaining amounts when transferring to another account
	// - encrypted amounts that are transferred from public balance
	//
	// When a transfer is made all of these must always be used.
	SelfAmount *EncryptedAmount `protobuf:"bytes,1,opt,name=self_amount,json=selfAmount,proto3" json:"self_amount,omitempty"`
	// Starting index for incoming encrypted amounts. If an aggregated amount
	// is present then this index is associated with such an amount and the
	// list of incoming encrypted amounts starts at the index `start_index
	// + 1`.
	StartIndex uint64 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// If present, the amount that has resulted from aggregating other amounts
	// If this field is present so is `num_aggregated`.
	AggregatedAmount *EncryptedAmount `protobuf:"bytes,3,opt,name=aggregated_amount,json=aggregatedAmount,proto3,oneof" json:"aggregated_amount,omitempty"`
	// The number of aggregated amounts (must be at least 2 if present). This
	// field is present if and only if `aggregated_amount` is present.
	NumAggregated *uint32 `protobuf:"varint,4,opt,name=num_aggregated,json=numAggregated,proto3,oneof" json:"num_aggregated,omitempty"`
	// Amounts starting at `start_index` (or at `start_index + 1` if there is
	// an aggregated amount present). They are assumed to be numbered
	// sequentially. The length of this list is bounded by the maximum number
	// of incoming amounts on the accounts, which is currently 32. After
	// that aggregation kicks in.
	IncomingAmounts []*EncryptedAmount `protobuf:"bytes,5,rep,name=incoming_amounts,json=incomingAmounts,proto3" json:"incoming_amounts,omitempty"`
}

func (x *EncryptedBalance) Reset() {
	*x = EncryptedBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedBalance) ProtoMessage() {}

func (x *EncryptedBalance) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedBalance.ProtoReflect.Descriptor instead.
func (*EncryptedBalance) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16}
}

func (x *EncryptedBalance) GetSelfAmount() *EncryptedAmount {
	if x != nil {
		return x.SelfAmount
	}
	return nil
}

func (x *EncryptedBalance) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *EncryptedBalance) GetAggregatedAmount() *EncryptedAmount {
	if x != nil {
		return x.AggregatedAmount
	}
	return nil
}

func (x *EncryptedBalance) GetNumAggregated() uint32 {
	if x != nil && x.NumAggregated != nil {
		return *x.NumAggregated
	}
	return 0
}

func (x *EncryptedBalance) GetIncomingAmounts() []*EncryptedAmount {
	if x != nil {
		return x.IncomingAmounts
	}
	return nil
}

// Entity to which the account delegates a portion of its stake.
type DelegationTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*DelegationTarget_Passive
	//	*DelegationTarget_Baker
	Target isDelegationTarget_Target `protobuf_oneof:"target"`
}

func (x *DelegationTarget) Reset() {
	*x = DelegationTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationTarget) ProtoMessage() {}

func (x *DelegationTarget) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationTarget.ProtoReflect.Descriptor instead.
func (*DelegationTarget) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17}
}

func (m *DelegationTarget) GetTarget() isDelegationTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *DelegationTarget) GetPassive() *Empty {
	if x, ok := x.GetTarget().(*DelegationTarget_Passive); ok {
		return x.Passive
	}
	return nil
}

func (x *DelegationTarget) GetBaker() *BakerId {
	if x, ok := x.GetTarget().(*DelegationTarget_Baker); ok {
		return x.Baker
	}
	return nil
}

type isDelegationTarget_Target interface {
	isDelegationTarget_Target()
}

type DelegationTarget_Passive struct {
	// Delegate passively, i.e., to no specific baker.
	Passive *Empty `protobuf:"bytes,1,opt,name=passive,proto3,oneof"`
}

type DelegationTarget_Baker struct {
	// Delegate to a specific baker.
	Baker *BakerId `protobuf:"bytes,2,opt,name=baker,proto3,oneof"`
}

func (*DelegationTarget_Passive) isDelegationTarget_Target() {}

func (*DelegationTarget_Baker) isDelegationTarget_Target() {}

// Baker's public key used to check whether they won the lottery or not.
type BakerElectionVerifyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BakerElectionVerifyKey) Reset() {
	*x = BakerElectionVerifyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerElectionVerifyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerElectionVerifyKey) ProtoMessage() {}

func (x *BakerElectionVerifyKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerElectionVerifyKey.ProtoReflect.Descriptor instead.
func (*BakerElectionVerifyKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{18}
}

func (x *BakerElectionVerifyKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Baker's public key used to check that they are indeed the ones who
// produced the block.
type BakerSignatureVerifyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BakerSignatureVerifyKey) Reset() {
	*x = BakerSignatureVerifyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerSignatureVerifyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerSignatureVerifyKey) ProtoMessage() {}

func (x *BakerSignatureVerifyKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerSignatureVerifyKey.ProtoReflect.Descriptor instead.
func (*BakerSignatureVerifyKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{19}
}

func (x *BakerSignatureVerifyKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Baker's public key used to check signatures on finalization records.
// This is only used if the baker has sufficient stake to participate in
// finalization.
type BakerAggregationVerifyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BakerAggregationVerifyKey) Reset() {
	*x = BakerAggregationVerifyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerAggregationVerifyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerAggregationVerifyKey) ProtoMessage() {}

func (x *BakerAggregationVerifyKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerAggregationVerifyKey.ProtoReflect.Descriptor instead.
func (*BakerAggregationVerifyKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{20}
}

func (x *BakerAggregationVerifyKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Information about a baker.
type BakerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identity of the baker. This is actually the account index of
	// the account controlling the baker.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// Baker's public key used to check whether they won the lottery or not.
	ElectionKey *BakerElectionVerifyKey `protobuf:"bytes,2,opt,name=election_key,json=electionKey,proto3" json:"election_key,omitempty"`
	// Baker's public key used to check that they are indeed the ones who
	// produced the block.
	SignatureKey *BakerSignatureVerifyKey `protobuf:"bytes,3,opt,name=signature_key,json=signatureKey,proto3" json:"signature_key,omitempty"`
	// Baker's public key used to check signatures on finalization records.
	// This is only used if the baker has sufficient stake to participate in
	// finalization.
	AggregationKey *BakerAggregationVerifyKey `protobuf:"bytes,4,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
}

func (x *BakerInfo) Reset() {
	*x = BakerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerInfo) ProtoMessage() {}

func (x *BakerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerInfo.ProtoReflect.Descriptor instead.
func (*BakerInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{21}
}

func (x *BakerInfo) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerInfo) GetElectionKey() *BakerElectionVerifyKey {
	if x != nil {
		return x.ElectionKey
	}
	return nil
}

func (x *BakerInfo) GetSignatureKey() *BakerSignatureVerifyKey {
	if x != nil {
		return x.SignatureKey
	}
	return nil
}

func (x *BakerInfo) GetAggregationKey() *BakerAggregationVerifyKey {
	if x != nil {
		return x.AggregationKey
	}
	return nil
}

// Pending change to the stake either of a baker or delegator.
type StakePendingChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Change:
	//	*StakePendingChange_Reduce_
	//	*StakePendingChange_Remove
	Change isStakePendingChange_Change `protobuf_oneof:"change"`
}

func (x *StakePendingChange) Reset() {
	*x = StakePendingChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakePendingChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakePendingChange) ProtoMessage() {}

func (x *StakePendingChange) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakePendingChange.ProtoReflect.Descriptor instead.
func (*StakePendingChange) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{22}
}

func (m *StakePendingChange) GetChange() isStakePendingChange_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (x *StakePendingChange) GetReduce() *StakePendingChange_Reduce {
	if x, ok := x.GetChange().(*StakePendingChange_Reduce_); ok {
		return x.Reduce
	}
	return nil
}

func (x *StakePendingChange) GetRemove() *Timestamp {
	if x, ok := x.GetChange().(*StakePendingChange_Remove); ok {
		return x.Remove
	}
	return nil
}

type isStakePendingChange_Change interface {
	isStakePendingChange_Change()
}

type StakePendingChange_Reduce_ struct {
	Reduce *StakePendingChange_Reduce `protobuf:"bytes,1,opt,name=reduce,proto3,oneof"`
}

type StakePendingChange_Remove struct {
	// Remove the stake. The value is a Unix timestamp of the effective time in
	// milliseconds.
	Remove *Timestamp `protobuf:"bytes,2,opt,name=remove,proto3,oneof"`
}

func (*StakePendingChange_Reduce_) isStakePendingChange_Change() {}

func (*StakePendingChange_Remove) isStakePendingChange_Change() {}

// A fraction of an amount with a precision of `1/100_000`.
type AmountFraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must not exceed 100000.
	PartsPerHundredThousand uint32 `protobuf:"varint,1,opt,name=parts_per_hundred_thousand,json=partsPerHundredThousand,proto3" json:"parts_per_hundred_thousand,omitempty"`
}

func (x *AmountFraction) Reset() {
	*x = AmountFraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountFraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountFraction) ProtoMessage() {}

func (x *AmountFraction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountFraction.ProtoReflect.Descriptor instead.
func (*AmountFraction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{23}
}

func (x *AmountFraction) GetPartsPerHundredThousand() uint32 {
	if x != nil {
		return x.PartsPerHundredThousand
	}
	return 0
}

// Distribution of the rewards for the particular pool.
type CommissionRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fraction of finalization rewards charged by the pool owner.
	Finalization *AmountFraction `protobuf:"bytes,1,opt,name=finalization,proto3" json:"finalization,omitempty"`
	// Fraction of baking rewards charged by the pool owner.
	Baking *AmountFraction `protobuf:"bytes,2,opt,name=baking,proto3" json:"baking,omitempty"`
	// Fraction of transaction rewards charged by the pool owner.
	Transaction *AmountFraction `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *CommissionRates) Reset() {
	*x = CommissionRates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommissionRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionRates) ProtoMessage() {}

func (x *CommissionRates) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommissionRates.ProtoReflect.Descriptor instead.
func (*CommissionRates) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{24}
}

func (x *CommissionRates) GetFinalization() *AmountFraction {
	if x != nil {
		return x.Finalization
	}
	return nil
}

func (x *CommissionRates) GetBaking() *AmountFraction {
	if x != nil {
		return x.Baking
	}
	return nil
}

func (x *CommissionRates) GetTransaction() *AmountFraction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// Additional information about a baking pool.
// This information is added with the introduction of delegation.
type BakerPoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the pool allows delegators.
	OpenStatus OpenStatus `protobuf:"varint,1,opt,name=open_status,json=openStatus,proto3,enum=concordium.v2.OpenStatus" json:"open_status,omitempty"`
	// The URL that links to the metadata about the pool.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// The commission rates charged by the pool owner.
	CommissionRates *CommissionRates `protobuf:"bytes,3,opt,name=commission_rates,json=commissionRates,proto3" json:"commission_rates,omitempty"`
}

func (x *BakerPoolInfo) Reset() {
	*x = BakerPoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerPoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerPoolInfo) ProtoMessage() {}

func (x *BakerPoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerPoolInfo.ProtoReflect.Descriptor instead.
func (*BakerPoolInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{25}
}

func (x *BakerPoolInfo) GetOpenStatus() OpenStatus {
	if x != nil {
		return x.OpenStatus
	}
	return OpenStatus_OPEN_STATUS_OPEN_FOR_ALL
}

func (x *BakerPoolInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BakerPoolInfo) GetCommissionRates() *CommissionRates {
	if x != nil {
		return x.CommissionRates
	}
	return nil
}

// Information about the account stake, if the account is either a baker or a
// delegator.
type AccountStakingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StakingInfo:
	//	*AccountStakingInfo_Baker_
	//	*AccountStakingInfo_Delegator_
	StakingInfo isAccountStakingInfo_StakingInfo `protobuf_oneof:"staking_info"`
}

func (x *AccountStakingInfo) Reset() {
	*x = AccountStakingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStakingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStakingInfo) ProtoMessage() {}

func (x *AccountStakingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStakingInfo.ProtoReflect.Descriptor instead.
func (*AccountStakingInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{26}
}

func (m *AccountStakingInfo) GetStakingInfo() isAccountStakingInfo_StakingInfo {
	if m != nil {
		return m.StakingInfo
	}
	return nil
}

func (x *AccountStakingInfo) GetBaker() *AccountStakingInfo_Baker {
	if x, ok := x.GetStakingInfo().(*AccountStakingInfo_Baker_); ok {
		return x.Baker
	}
	return nil
}

func (x *AccountStakingInfo) GetDelegator() *AccountStakingInfo_Delegator {
	if x, ok := x.GetStakingInfo().(*AccountStakingInfo_Delegator_); ok {
		return x.Delegator
	}
	return nil
}

type isAccountStakingInfo_StakingInfo interface {
	isAccountStakingInfo_StakingInfo()
}

type AccountStakingInfo_Baker_ struct {
	// The account is a baker.
	Baker *AccountStakingInfo_Baker `protobuf:"bytes,1,opt,name=baker,proto3,oneof"`
}

type AccountStakingInfo_Delegator_ struct {
	// The account is a delegator.
	Delegator *AccountStakingInfo_Delegator `protobuf:"bytes,2,opt,name=delegator,proto3,oneof"`
}

func (*AccountStakingInfo_Baker_) isAccountStakingInfo_StakingInfo() {}

func (*AccountStakingInfo_Delegator_) isAccountStakingInfo_StakingInfo() {}

// A sequence number that determines the ordering of transactions from the
// account. The minimum sequence number is 1.
type SequenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sequence number.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SequenceNumber) Reset() {
	*x = SequenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceNumber) ProtoMessage() {}

func (x *SequenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceNumber.ProtoReflect.Descriptor instead.
func (*SequenceNumber) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{27}
}

func (x *SequenceNumber) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A sequence number that determines the ordering of update transactions.
// Equivalent to `SequenceNumber` for account transactions.
// Update sequence numbers are per update type and the minimum value is 1.
type UpdateSequenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sequence number.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateSequenceNumber) Reset() {
	*x = UpdateSequenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSequenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSequenceNumber) ProtoMessage() {}

func (x *UpdateSequenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSequenceNumber.ProtoReflect.Descriptor instead.
func (*UpdateSequenceNumber) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateSequenceNumber) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// An amount of microCCD.
type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{29}
}

func (x *Amount) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Index of a credential on an account.
type CredentialIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CredentialIndex) Reset() {
	*x = CredentialIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialIndex) ProtoMessage() {}

func (x *CredentialIndex) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialIndex.ProtoReflect.Descriptor instead.
func (*CredentialIndex) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{30}
}

func (x *CredentialIndex) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The number of signatures required to sign.
type SignatureThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SignatureThreshold) Reset() {
	*x = SignatureThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureThreshold) ProtoMessage() {}

func (x *SignatureThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureThreshold.ProtoReflect.Descriptor instead.
func (*SignatureThreshold) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{31}
}

func (x *SignatureThreshold) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The number of credentials required to sign an account transaction.
type AccountThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AccountThreshold) Reset() {
	*x = AccountThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountThreshold) ProtoMessage() {}

func (x *AccountThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountThreshold.ProtoReflect.Descriptor instead.
func (*AccountThreshold) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{32}
}

func (x *AccountThreshold) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// An account encryption key. Always 96 bytes.
type EncryptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EncryptionKey) Reset() {
	*x = EncryptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKey) ProtoMessage() {}

func (x *EncryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKey.ProtoReflect.Descriptor instead.
func (*EncryptionKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{33}
}

func (x *EncryptionKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// An address of an account. Always 32 bytes.
type AccountAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AccountAddress) Reset() {
	*x = AccountAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAddress) ProtoMessage() {}

func (x *AccountAddress) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAddress.ProtoReflect.Descriptor instead.
func (*AccountAddress) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{34}
}

func (x *AccountAddress) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// An address of either a contract or an account.
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Address_Account
	//	*Address_Contract
	Type isAddress_Type `protobuf_oneof:"type"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{35}
}

func (m *Address) GetType() isAddress_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Address) GetAccount() *AccountAddress {
	if x, ok := x.GetType().(*Address_Account); ok {
		return x.Account
	}
	return nil
}

func (x *Address) GetContract() *ContractAddress {
	if x, ok := x.GetType().(*Address_Contract); ok {
		return x.Contract
	}
	return nil
}

type isAddress_Type interface {
	isAddress_Type()
}

type Address_Account struct {
	Account *AccountAddress `protobuf:"bytes,1,opt,name=account,proto3,oneof"`
}

type Address_Contract struct {
	Contract *ContractAddress `protobuf:"bytes,2,opt,name=contract,proto3,oneof"`
}

func (*Address_Account) isAddress_Type() {}

func (*Address_Contract) isAddress_Type() {}

// A public key used to verify transaction signatures from an account.
type AccountVerifyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//	*AccountVerifyKey_Ed25519Key
	Key isAccountVerifyKey_Key `protobuf_oneof:"key"`
}

func (x *AccountVerifyKey) Reset() {
	*x = AccountVerifyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountVerifyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountVerifyKey) ProtoMessage() {}

func (x *AccountVerifyKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountVerifyKey.ProtoReflect.Descriptor instead.
func (*AccountVerifyKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{36}
}

func (m *AccountVerifyKey) GetKey() isAccountVerifyKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *AccountVerifyKey) GetEd25519Key() []byte {
	if x, ok := x.GetKey().(*AccountVerifyKey_Ed25519Key); ok {
		return x.Ed25519Key
	}
	return nil
}

type isAccountVerifyKey_Key interface {
	isAccountVerifyKey_Key()
}

type AccountVerifyKey_Ed25519Key struct {
	Ed25519Key []byte `protobuf:"bytes,1,opt,name=ed25519_key,json=ed25519Key,proto3,oneof"`
}

func (*AccountVerifyKey_Ed25519Key) isAccountVerifyKey_Key() {}

// Public keys of a single credential.
type CredentialPublicKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys      map[uint32]*AccountVerifyKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Threshold *SignatureThreshold          `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *CredentialPublicKeys) Reset() {
	*x = CredentialPublicKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialPublicKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialPublicKeys) ProtoMessage() {}

func (x *CredentialPublicKeys) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialPublicKeys.ProtoReflect.Descriptor instead.
func (*CredentialPublicKeys) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{37}
}

func (x *CredentialPublicKeys) GetKeys() map[uint32]*AccountVerifyKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CredentialPublicKeys) GetThreshold() *SignatureThreshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

// A registration ID of a credential, derived from the secret PRF key and a
// nonce. This is always 48 bytes long.
type CredentialRegistrationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CredentialRegistrationId) Reset() {
	*x = CredentialRegistrationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialRegistrationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialRegistrationId) ProtoMessage() {}

func (x *CredentialRegistrationId) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialRegistrationId.ProtoReflect.Descriptor instead.
func (*CredentialRegistrationId) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{38}
}

func (x *CredentialRegistrationId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// An index of the identity provider that identifies them uniquely in the
// context of a specific chain.
type IdentityProviderIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IdentityProviderIdentity) Reset() {
	*x = IdentityProviderIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityProviderIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProviderIdentity) ProtoMessage() {}

func (x *IdentityProviderIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProviderIdentity.ProtoReflect.Descriptor instead.
func (*IdentityProviderIdentity) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{39}
}

func (x *IdentityProviderIdentity) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Representation of the pair of a year and month.
type YearMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  uint32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *YearMonth) Reset() {
	*x = YearMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YearMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YearMonth) ProtoMessage() {}

func (x *YearMonth) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YearMonth.ProtoReflect.Descriptor instead.
func (*YearMonth) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{40}
}

func (x *YearMonth) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *YearMonth) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

// Policy on a credential.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The year and month when the identity object from which the credential is
	// derived was created.
	CreatedAt *YearMonth `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The last year and month when the credential is still valid. After this
	// expires an account can no longer be created from the credential.
	ValidTo *YearMonth `protobuf:"bytes,2,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	// Mapping from attribute tags to attribute values. Attribute tags are always
	// representable in a single `u8`, attribute values are never more than 31
	// bytes in length.
	Attributes map[uint32][]byte `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{41}
}

func (x *Policy) GetCreatedAt() *YearMonth {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Policy) GetValidTo() *YearMonth {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *Policy) GetAttributes() map[uint32][]byte {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Values contained in an initial credential.
type InitialCredentialValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public keys of the credential.
	Keys *CredentialPublicKeys `protobuf:"bytes,1,opt,name=keys,proto3" json:"keys,omitempty"`
	// Its registration ID.
	CredId *CredentialRegistrationId `protobuf:"bytes,2,opt,name=cred_id,json=credId,proto3" json:"cred_id,omitempty"`
	// The identity provider who signed the identity object from which this
	// credential is derived.
	IpId *IdentityProviderIdentity `protobuf:"bytes,3,opt,name=ip_id,json=ipId,proto3" json:"ip_id,omitempty"`
	// Policy of this credential.
	Policy *Policy `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *InitialCredentialValues) Reset() {
	*x = InitialCredentialValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialCredentialValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialCredentialValues) ProtoMessage() {}

func (x *InitialCredentialValues) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialCredentialValues.ProtoReflect.Descriptor instead.
func (*InitialCredentialValues) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{42}
}

func (x *InitialCredentialValues) GetKeys() *CredentialPublicKeys {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *InitialCredentialValues) GetCredId() *CredentialRegistrationId {
	if x != nil {
		return x.CredId
	}
	return nil
}

func (x *InitialCredentialValues) GetIpId() *IdentityProviderIdentity {
	if x != nil {
		return x.IpId
	}
	return nil
}

func (x *InitialCredentialValues) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

// Data relating to a single anonymity revoker sent by the account holder to
// the chain.
type ChainArData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Share of the encryption of IdCredPub.
	EncIdCredPubShare []byte `protobuf:"bytes,1,opt,name=enc_id_cred_pub_share,json=encIdCredPubShare,proto3" json:"enc_id_cred_pub_share,omitempty"`
}

func (x *ChainArData) Reset() {
	*x = ChainArData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainArData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainArData) ProtoMessage() {}

func (x *ChainArData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainArData.ProtoReflect.Descriptor instead.
func (*ChainArData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{43}
}

func (x *ChainArData) GetEncIdCredPubShare() []byte {
	if x != nil {
		return x.EncIdCredPubShare
	}
	return nil
}

// The number of anonymity revokers needed to revoke anonymity of a credential
// holder.
type ArThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ArThreshold) Reset() {
	*x = ArThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArThreshold) ProtoMessage() {}

func (x *ArThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArThreshold.ProtoReflect.Descriptor instead.
func (*ArThreshold) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{44}
}

func (x *ArThreshold) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A single commitment in the G1 group of the BLS curve. This is always 48 bytes
// in length.
type Commitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Commitment) Reset() {
	*x = Commitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commitment) ProtoMessage() {}

func (x *Commitment) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commitment.ProtoReflect.Descriptor instead.
func (*Commitment) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{45}
}

func (x *Commitment) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Commitments that are part of a normal credential.
type CredentialCommitments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Commitment to the PRF key.
	Prf *Commitment `protobuf:"bytes,1,opt,name=prf,proto3" json:"prf,omitempty"`
	// Commitment to the counter used to generate the credential registration id.
	CredCounter *Commitment `protobuf:"bytes,2,opt,name=cred_counter,json=credCounter,proto3" json:"cred_counter,omitempty"`
	// Commitment to the `max_accounts` value, which determines the maximum number
	// of credentials that may be created from the identity object.
	MaxAccounts *Commitment `protobuf:"bytes,3,opt,name=max_accounts,json=maxAccounts,proto3" json:"max_accounts,omitempty"`
	// Commitments to the attributes which have not been revealed in the policy.
	Attributes map[uint32]*Commitment `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of commitments to the coefficients of the sharing polynomial. This
	// polynomial is used in a shared encryption of `id_cred_pub` among the
	// anonymity revokers.
	IdCredSecSharingCoeff []*Commitment `protobuf:"bytes,5,rep,name=id_cred_sec_sharing_coeff,json=idCredSecSharingCoeff,proto3" json:"id_cred_sec_sharing_coeff,omitempty"`
}

func (x *CredentialCommitments) Reset() {
	*x = CredentialCommitments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialCommitments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialCommitments) ProtoMessage() {}

func (x *CredentialCommitments) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialCommitments.ProtoReflect.Descriptor instead.
func (*CredentialCommitments) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{46}
}

func (x *CredentialCommitments) GetPrf() *Commitment {
	if x != nil {
		return x.Prf
	}
	return nil
}

func (x *CredentialCommitments) GetCredCounter() *Commitment {
	if x != nil {
		return x.CredCounter
	}
	return nil
}

func (x *CredentialCommitments) GetMaxAccounts() *Commitment {
	if x != nil {
		return x.MaxAccounts
	}
	return nil
}

func (x *CredentialCommitments) GetAttributes() map[uint32]*Commitment {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CredentialCommitments) GetIdCredSecSharingCoeff() []*Commitment {
	if x != nil {
		return x.IdCredSecSharingCoeff
	}
	return nil
}

// Values contained in a normal (non-initial) credential.
type NormalCredentialValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public keys of the credential.
	Keys *CredentialPublicKeys `protobuf:"bytes,1,opt,name=keys,proto3" json:"keys,omitempty"`
	// Its registration ID.
	CredId *CredentialRegistrationId `protobuf:"bytes,2,opt,name=cred_id,json=credId,proto3" json:"cred_id,omitempty"`
	// The identity provider who signed the identity object from which this
	// credential is derived.
	IpId *IdentityProviderIdentity `protobuf:"bytes,3,opt,name=ip_id,json=ipId,proto3" json:"ip_id,omitempty"`
	// Policy of this credential.
	Policy *Policy `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	// The number of anonymity revokers that must work together to revoke the
	// anonymity of the credential holder.
	ArThreshold *ArThreshold `protobuf:"bytes,5,opt,name=ar_threshold,json=arThreshold,proto3" json:"ar_threshold,omitempty"`
	// Mapping from anonymity revoker identities to revocation data for the given anonymity revoker.
	ArData map[uint32]*ChainArData `protobuf:"bytes,6,rep,name=ar_data,json=arData,proto3" json:"ar_data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Commitments to attributes which have not been revealed.
	Commitments *CredentialCommitments `protobuf:"bytes,7,opt,name=commitments,proto3" json:"commitments,omitempty"`
}

func (x *NormalCredentialValues) Reset() {
	*x = NormalCredentialValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalCredentialValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalCredentialValues) ProtoMessage() {}

func (x *NormalCredentialValues) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalCredentialValues.ProtoReflect.Descriptor instead.
func (*NormalCredentialValues) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{47}
}

func (x *NormalCredentialValues) GetKeys() *CredentialPublicKeys {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *NormalCredentialValues) GetCredId() *CredentialRegistrationId {
	if x != nil {
		return x.CredId
	}
	return nil
}

func (x *NormalCredentialValues) GetIpId() *IdentityProviderIdentity {
	if x != nil {
		return x.IpId
	}
	return nil
}

func (x *NormalCredentialValues) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *NormalCredentialValues) GetArThreshold() *ArThreshold {
	if x != nil {
		return x.ArThreshold
	}
	return nil
}

func (x *NormalCredentialValues) GetArData() map[uint32]*ChainArData {
	if x != nil {
		return x.ArData
	}
	return nil
}

func (x *NormalCredentialValues) GetCommitments() *CredentialCommitments {
	if x != nil {
		return x.Commitments
	}
	return nil
}

// Credential that is part of an account.
type AccountCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CredentialValues:
	//	*AccountCredential_Initial
	//	*AccountCredential_Normal
	CredentialValues isAccountCredential_CredentialValues `protobuf_oneof:"credential_values"`
}

func (x *AccountCredential) Reset() {
	*x = AccountCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCredential) ProtoMessage() {}

func (x *AccountCredential) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCredential.ProtoReflect.Descriptor instead.
func (*AccountCredential) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{48}
}

func (m *AccountCredential) GetCredentialValues() isAccountCredential_CredentialValues {
	if m != nil {
		return m.CredentialValues
	}
	return nil
}

func (x *AccountCredential) GetInitial() *InitialCredentialValues {
	if x, ok := x.GetCredentialValues().(*AccountCredential_Initial); ok {
		return x.Initial
	}
	return nil
}

func (x *AccountCredential) GetNormal() *NormalCredentialValues {
	if x, ok := x.GetCredentialValues().(*AccountCredential_Normal); ok {
		return x.Normal
	}
	return nil
}

type isAccountCredential_CredentialValues interface {
	isAccountCredential_CredentialValues()
}

type AccountCredential_Initial struct {
	Initial *InitialCredentialValues `protobuf:"bytes,1,opt,name=initial,proto3,oneof"`
}

type AccountCredential_Normal struct {
	Normal *NormalCredentialValues `protobuf:"bytes,2,opt,name=normal,proto3,oneof"`
}

func (*AccountCredential_Initial) isAccountCredential_CredentialValues() {}

func (*AccountCredential_Normal) isAccountCredential_CredentialValues() {}

// Information about the account at a particular point in time.
type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next sequence number to be used for transactions signed from this account.
	SequenceNumber *SequenceNumber `protobuf:"bytes,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Current (unencrypted) balance of the account.
	Amount *Amount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Release schedule for any locked up amount. This could be an empty
	// release schedule.
	Schedule *ReleaseSchedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Map of all currently active credentials on the account.
	// This includes public keys that can sign for the given credentials, as
	// well as any revealed attributes. This map always contains a credential
	// with index 0.
	Creds map[uint32]*AccountCredential `protobuf:"bytes,4,rep,name=creds,proto3" json:"creds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Lower bound on how many credentials must sign any given transaction from
	// this account.
	Threshold *AccountThreshold `protobuf:"bytes,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// The encrypted balance of the account.
	EncryptedBalance *EncryptedBalance `protobuf:"bytes,6,opt,name=encrypted_balance,json=encryptedBalance,proto3" json:"encrypted_balance,omitempty"`
	// The public key for sending encrypted balances to the account.
	EncryptionKey *EncryptionKey `protobuf:"bytes,7,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	// Internal index of the account. Accounts on the chain get sequential
	// indices. These should generally not be used outside of the chain,
	// the account address is meant to be used to refer to accounts,
	// however the account index serves the role of the baker id, if the
	// account is a baker. Hence it is exposed here as well.
	Index *AccountIndex `protobuf:"bytes,8,opt,name=index,proto3" json:"index,omitempty"`
	// Present if the account is a baker or delegator. In that case
	// it is the information about the baker or delegator.
	Stake *AccountStakingInfo `protobuf:"bytes,9,opt,name=stake,proto3,oneof" json:"stake,omitempty"`
	// Canonical address of the account. This is derived from the first credential
	// that created the account.
	Address *AccountAddress `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{49}
}

func (x *AccountInfo) GetSequenceNumber() *SequenceNumber {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

func (x *AccountInfo) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *AccountInfo) GetSchedule() *ReleaseSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *AccountInfo) GetCreds() map[uint32]*AccountCredential {
	if x != nil {
		return x.Creds
	}
	return nil
}

func (x *AccountInfo) GetThreshold() *AccountThreshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *AccountInfo) GetEncryptedBalance() *EncryptedBalance {
	if x != nil {
		return x.EncryptedBalance
	}
	return nil
}

func (x *AccountInfo) GetEncryptionKey() *EncryptionKey {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *AccountInfo) GetIndex() *AccountIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *AccountInfo) GetStake() *AccountStakingInfo {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *AccountInfo) GetAddress() *AccountAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

// Input to queries which take a block as a parameter.
type BlockHashInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BlockHashInput:
	//	*BlockHashInput_Best
	//	*BlockHashInput_LastFinal
	//	*BlockHashInput_Given
	//	*BlockHashInput_AbsoluteHeight
	//	*BlockHashInput_RelativeHeight_
	BlockHashInput isBlockHashInput_BlockHashInput `protobuf_oneof:"block_hash_input"`
}

func (x *BlockHashInput) Reset() {
	*x = BlockHashInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHashInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHashInput) ProtoMessage() {}

func (x *BlockHashInput) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHashInput.ProtoReflect.Descriptor instead.
func (*BlockHashInput) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{50}
}

func (m *BlockHashInput) GetBlockHashInput() isBlockHashInput_BlockHashInput {
	if m != nil {
		return m.BlockHashInput
	}
	return nil
}

func (x *BlockHashInput) GetBest() *Empty {
	if x, ok := x.GetBlockHashInput().(*BlockHashInput_Best); ok {
		return x.Best
	}
	return nil
}

func (x *BlockHashInput) GetLastFinal() *Empty {
	if x, ok := x.GetBlockHashInput().(*BlockHashInput_LastFinal); ok {
		return x.LastFinal
	}
	return nil
}

func (x *BlockHashInput) GetGiven() *BlockHash {
	if x, ok := x.GetBlockHashInput().(*BlockHashInput_Given); ok {
		return x.Given
	}
	return nil
}

func (x *BlockHashInput) GetAbsoluteHeight() *AbsoluteBlockHeight {
	if x, ok := x.GetBlockHashInput().(*BlockHashInput_AbsoluteHeight); ok {
		return x.AbsoluteHeight
	}
	return nil
}

func (x *BlockHashInput) GetRelativeHeight() *BlockHashInput_RelativeHeight {
	if x, ok := x.GetBlockHashInput().(*BlockHashInput_RelativeHeight_); ok {
		return x.RelativeHeight
	}
	return nil
}

type isBlockHashInput_BlockHashInput interface {
	isBlockHashInput_BlockHashInput()
}

type BlockHashInput_Best struct {
	// Query for the best block.
	Best *Empty `protobuf:"bytes,1,opt,name=best,proto3,oneof"`
}

type BlockHashInput_LastFinal struct {
	// Query for the last finalized block.
	LastFinal *Empty `protobuf:"bytes,2,opt,name=last_final,json=lastFinal,proto3,oneof"`
}

type BlockHashInput_Given struct {
	// Query for the block specified by the hash. This hash should always be 32 bytes.
	Given *BlockHash `protobuf:"bytes,3,opt,name=given,proto3,oneof"`
}

type BlockHashInput_AbsoluteHeight struct {
	// Query for a block at absolute height, if a unique block can be identified at that height.
	AbsoluteHeight *AbsoluteBlockHeight `protobuf:"bytes,4,opt,name=absolute_height,json=absoluteHeight,proto3,oneof"`
}

type BlockHashInput_RelativeHeight_ struct {
	// Query for a block at height relative to a genesis index.
	RelativeHeight *BlockHashInput_RelativeHeight `protobuf:"bytes,5,opt,name=relative_height,json=relativeHeight,proto3,oneof"`
}

func (*BlockHashInput_Best) isBlockHashInput_BlockHashInput() {}

func (*BlockHashInput_LastFinal) isBlockHashInput_BlockHashInput() {}

func (*BlockHashInput_Given) isBlockHashInput_BlockHashInput() {}

func (*BlockHashInput_AbsoluteHeight) isBlockHashInput_BlockHashInput() {}

func (*BlockHashInput_RelativeHeight_) isBlockHashInput_BlockHashInput() {}

// Input to queries which take an account as a parameter.
type AccountIdentifierInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AccountIdentifierInput:
	//	*AccountIdentifierInput_Address
	//	*AccountIdentifierInput_CredId
	//	*AccountIdentifierInput_AccountIndex
	AccountIdentifierInput isAccountIdentifierInput_AccountIdentifierInput `protobuf_oneof:"account_identifier_input"`
}

func (x *AccountIdentifierInput) Reset() {
	*x = AccountIdentifierInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountIdentifierInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountIdentifierInput) ProtoMessage() {}

func (x *AccountIdentifierInput) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountIdentifierInput.ProtoReflect.Descriptor instead.
func (*AccountIdentifierInput) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{51}
}

func (m *AccountIdentifierInput) GetAccountIdentifierInput() isAccountIdentifierInput_AccountIdentifierInput {
	if m != nil {
		return m.AccountIdentifierInput
	}
	return nil
}

func (x *AccountIdentifierInput) GetAddress() *AccountAddress {
	if x, ok := x.GetAccountIdentifierInput().(*AccountIdentifierInput_Address); ok {
		return x.Address
	}
	return nil
}

func (x *AccountIdentifierInput) GetCredId() *CredentialRegistrationId {
	if x, ok := x.GetAccountIdentifierInput().(*AccountIdentifierInput_CredId); ok {
		return x.CredId
	}
	return nil
}

func (x *AccountIdentifierInput) GetAccountIndex() *AccountIndex {
	if x, ok := x.GetAccountIdentifierInput().(*AccountIdentifierInput_AccountIndex); ok {
		return x.AccountIndex
	}
	return nil
}

type isAccountIdentifierInput_AccountIdentifierInput interface {
	isAccountIdentifierInput_AccountIdentifierInput()
}

type AccountIdentifierInput_Address struct {
	// Identify the account by the address of the account.
	Address *AccountAddress `protobuf:"bytes,1,opt,name=address,proto3,oneof"`
}

type AccountIdentifierInput_CredId struct {
	// Identify the account by the credential that belongs or has belonged to it.
	CredId *CredentialRegistrationId `protobuf:"bytes,2,opt,name=cred_id,json=credId,proto3,oneof"`
}

type AccountIdentifierInput_AccountIndex struct {
	// Identify the account via its index.
	AccountIndex *AccountIndex `protobuf:"bytes,3,opt,name=account_index,json=accountIndex,proto3,oneof"`
}

func (*AccountIdentifierInput_Address) isAccountIdentifierInput_AccountIdentifierInput() {}

func (*AccountIdentifierInput_CredId) isAccountIdentifierInput_AccountIdentifierInput() {}

func (*AccountIdentifierInput_AccountIndex) isAccountIdentifierInput_AccountIdentifierInput() {}

// Request for account information.
type AccountInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block in which to query the account information.
	BlockHash *BlockHashInput `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Specification of the account.
	AccountIdentifier *AccountIdentifierInput `protobuf:"bytes,2,opt,name=account_identifier,json=accountIdentifier,proto3" json:"account_identifier,omitempty"`
}

func (x *AccountInfoRequest) Reset() {
	*x = AccountInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfoRequest) ProtoMessage() {}

func (x *AccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfoRequest.ProtoReflect.Descriptor instead.
func (*AccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{52}
}

func (x *AccountInfoRequest) GetBlockHash() *BlockHashInput {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *AccountInfoRequest) GetAccountIdentifier() *AccountIdentifierInput {
	if x != nil {
		return x.AccountIdentifier
	}
	return nil
}

// Information about a finalized block that is part of the streaming response.
type FinalizedBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the block.
	Hash *BlockHash `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Absolute height of the block, height 0 is the genesis block.
	Height *AbsoluteBlockHeight `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *FinalizedBlockInfo) Reset() {
	*x = FinalizedBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizedBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizedBlockInfo) ProtoMessage() {}

func (x *FinalizedBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizedBlockInfo.ProtoReflect.Descriptor instead.
func (*FinalizedBlockInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{53}
}

func (x *FinalizedBlockInfo) GetHash() *BlockHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *FinalizedBlockInfo) GetHeight() *AbsoluteBlockHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

// Request the ancestors for the given block.
type AncestorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block to get ancestors of.
	BlockHash *BlockHashInput `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The maximum number of ancestors returned.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AncestorsRequest) Reset() {
	*x = AncestorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AncestorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AncestorsRequest) ProtoMessage() {}

func (x *AncestorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AncestorsRequest.ProtoReflect.Descriptor instead.
func (*AncestorsRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{54}
}

func (x *AncestorsRequest) GetBlockHash() *BlockHashInput {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *AncestorsRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Request for getting the source of a smart contract module.
type ModuleSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block to be used for the query.
	BlockHash *BlockHashInput `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The reference of the module.
	ModuleRef *ModuleRef `protobuf:"bytes,2,opt,name=module_ref,json=moduleRef,proto3" json:"module_ref,omitempty"`
}

func (x *ModuleSourceRequest) Reset() {
	*x = ModuleSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleSourceRequest) ProtoMessage() {}

func (x *ModuleSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleSourceRequest.ProtoReflect.Descriptor instead.
func (*ModuleSourceRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{55}
}

func (x *ModuleSourceRequest) GetBlockHash() *BlockHashInput {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ModuleSourceRequest) GetModuleRef() *ModuleRef {
	if x != nil {
		return x.ModuleRef
	}
	return nil
}

// Address of a smart contract instance.
type ContractAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the smart contract.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The subindex of the smart contract instance.
	// Currently not used, so it is always 0.
	Subindex uint64 `protobuf:"varint,2,opt,name=subindex,proto3" json:"subindex,omitempty"`
}

func (x *ContractAddress) Reset() {
	*x = ContractAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAddress) ProtoMessage() {}

func (x *ContractAddress) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAddress.ProtoReflect.Descriptor instead.
func (*ContractAddress) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{56}
}

func (x *ContractAddress) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ContractAddress) GetSubindex() uint64 {
	if x != nil {
		return x.Subindex
	}
	return 0
}

// Request for getting information about a smart contract instance.
type InstanceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block to be used for the query.
	BlockHash *BlockHashInput `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The address of the smart contract instance.
	Address *ContractAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *InstanceInfoRequest) Reset() {
	*x = InstanceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfoRequest) ProtoMessage() {}

func (x *InstanceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfoRequest.ProtoReflect.Descriptor instead.
func (*InstanceInfoRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{57}
}

func (x *InstanceInfoRequest) GetBlockHash() *BlockHashInput {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *InstanceInfoRequest) GetAddress() *ContractAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

// Information about a smart contract instance.
type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The information depends on the smart contract version used by the instance.
	//
	// Types that are assignable to Version:
	//	*InstanceInfo_V0_
	//	*InstanceInfo_V1_
	Version isInstanceInfo_Version `protobuf_oneof:"version"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{58}
}

func (m *InstanceInfo) GetVersion() isInstanceInfo_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (x *InstanceInfo) GetV0() *InstanceInfo_V0 {
	if x, ok := x.GetVersion().(*InstanceInfo_V0_); ok {
		return x.V0
	}
	return nil
}

func (x *InstanceInfo) GetV1() *InstanceInfo_V1 {
	if x, ok := x.GetVersion().(*InstanceInfo_V1_); ok {
		return x.V1
	}
	return nil
}

type isInstanceInfo_Version interface {
	isInstanceInfo_Version()
}

type InstanceInfo_V0_ struct {
	V0 *InstanceInfo_V0 `protobuf:"bytes,1,opt,name=v0,proto3,oneof"`
}

type InstanceInfo_V1_ struct {
	V1 *InstanceInfo_V1 `protobuf:"bytes,2,opt,name=v1,proto3,oneof"`
}

func (*InstanceInfo_V0_) isInstanceInfo_Version() {}

func (*InstanceInfo_V1_) isInstanceInfo_Version() {}

// A smart contract instance key-value pair.
type InstanceStateKVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InstanceStateKVPair) Reset() {
	*x = InstanceStateKVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStateKVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStateKVPair) ProtoMessage() {}

func (x *InstanceStateKVPair) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStateKVPair.ProtoReflect.Descriptor instead.
func (*InstanceStateKVPair) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{59}
}

func (x *InstanceStateKVPair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InstanceStateKVPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Request for a specific key of a smart contract instance state.
type InstanceStateLookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block to be used for the query.
	BlockHash *BlockHashInput `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The address of the smart contract instance.
	Address *ContractAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Key to look up. If the instance is a V0 instance then this will not be used.
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InstanceStateLookupRequest) Reset() {
	*x = InstanceStateLookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStateLookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStateLookupRequest) ProtoMessage() {}

func (x *InstanceStateLookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStateLookupRequest.ProtoReflect.Descriptor instead.
func (*InstanceStateLookupRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{60}
}

func (x *InstanceStateLookupRequest) GetBlockHash() *BlockHashInput {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *InstanceStateLookupRequest) GetAddress() *ContractAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *InstanceStateLookupRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// Value at the requested key of a smart contract instance state. For V0
// contracts this will always be the entire state of the contract.
type InstanceStateValueAtKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InstanceStateValueAtKey) Reset() {
	*x = InstanceStateValueAtKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStateValueAtKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStateValueAtKey) ProtoMessage() {}

func (x *InstanceStateValueAtKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStateValueAtKey.ProtoReflect.Descriptor instead.
func (*InstanceStateValueAtKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{61}
}

func (x *InstanceStateValueAtKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// The receive name of a smart contract function. Expected format:
// `<contract_name>.<func_name>`. It must only consist of atmost 100 ASCII
// alphanumeric or punctuation characters, and must contain a '.'.
type ReceiveName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReceiveName) Reset() {
	*x = ReceiveName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveName) ProtoMessage() {}

func (x *ReceiveName) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveName.ProtoReflect.Descriptor instead.
func (*ReceiveName) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{62}
}

func (x *ReceiveName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The init name of a smart contract function. Expected format:
// `init_<contract_name>`. It must only consist of atmost 100 ASCII alphanumeric
// or punctuation characters, must not contain a '.' and must start with
// 'init_'.
type InitName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InitName) Reset() {
	*x = InitName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitName) ProtoMessage() {}

func (x *InitName) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitName.ProtoReflect.Descriptor instead.
func (*InitName) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{63}
}

func (x *InitName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Parameter to a smart contract initialization or invocation.
type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{64}
}

func (x *Parameter) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A smart contract v0 state.
type ContractStateV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ContractStateV0) Reset() {
	*x = ContractStateV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStateV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStateV0) ProtoMessage() {}

func (x *ContractStateV0) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStateV0.ProtoReflect.Descriptor instead.
func (*ContractStateV0) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{65}
}

func (x *ContractStateV0) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Status of a block item known to the node.
type BlockItemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Status:
	//	*BlockItemStatus_Received
	//	*BlockItemStatus_Committed_
	//	*BlockItemStatus_Finalized_
	Status isBlockItemStatus_Status `protobuf_oneof:"status"`
}

func (x *BlockItemStatus) Reset() {
	*x = BlockItemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockItemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockItemStatus) ProtoMessage() {}

func (x *BlockItemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockItemStatus.ProtoReflect.Descriptor instead.
func (*BlockItemStatus) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{66}
}

func (m *BlockItemStatus) GetStatus() isBlockItemStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *BlockItemStatus) GetReceived() *Empty {
	if x, ok := x.GetStatus().(*BlockItemStatus_Received); ok {
		return x.Received
	}
	return nil
}

func (x *BlockItemStatus) GetCommitted() *BlockItemStatus_Committed {
	if x, ok := x.GetStatus().(*BlockItemStatus_Committed_); ok {
		return x.Committed
	}
	return nil
}

func (x *BlockItemStatus) GetFinalized() *BlockItemStatus_Finalized {
	if x, ok := x.GetStatus().(*BlockItemStatus_Finalized_); ok {
		return x.Finalized
	}
	return nil
}

type isBlockItemStatus_Status interface {
	isBlockItemStatus_Status()
}

type BlockItemStatus_Received struct {
	// Block item is received, but not yet in any blocks.
	Received *Empty `protobuf:"bytes,1,opt,name=received,proto3,oneof"`
}

type BlockItemStatus_Committed_ struct {
	// Block item is committed to one or more blocks. The outcomes are listed
	// for each block. Note that in the vast majority of cases the outcome of a
	// transaction should not be dependent on the block it is in, but this
	// can in principle happen.
	Committed *BlockItemStatus_Committed `protobuf:"bytes,2,opt,name=committed,proto3,oneof"`
}

type BlockItemStatus_Finalized_ struct {
	// Block item is finalized in the given block, with the given summary.
	Finalized *BlockItemStatus_Finalized `protobuf:"bytes,3,opt,name=finalized,proto3,oneof"`
}

func (*BlockItemStatus_Received) isBlockItemStatus_Status() {}

func (*BlockItemStatus_Committed_) isBlockItemStatus_Status() {}

func (*BlockItemStatus_Finalized_) isBlockItemStatus_Status() {}

// A block item summary together with a block hash. Used in BlockItemStatus.
type BlockItemSummaryInBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block hash.
	BlockHash *BlockHash `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The block item summary.
	Outcome *BlockItemSummary `protobuf:"bytes,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *BlockItemSummaryInBlock) Reset() {
	*x = BlockItemSummaryInBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockItemSummaryInBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockItemSummaryInBlock) ProtoMessage() {}

func (x *BlockItemSummaryInBlock) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockItemSummaryInBlock.ProtoReflect.Descriptor instead.
func (*BlockItemSummaryInBlock) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{67}
}

func (x *BlockItemSummaryInBlock) GetBlockHash() *BlockHash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BlockItemSummaryInBlock) GetOutcome() *BlockItemSummary {
	if x != nil {
		return x.Outcome
	}
	return nil
}

// Energy is used to count exact execution cost.
// This cost is then converted to CCD amounts.
type Energy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Energy) Reset() {
	*x = Energy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Energy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Energy) ProtoMessage() {}

func (x *Energy) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Energy.ProtoReflect.Descriptor instead.
func (*Energy) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{68}
}

func (x *Energy) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A number representing a slot for baking a block.
type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{69}
}

func (x *Slot) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The response for getNextAccountSequenceNumber.
type NextAccountSequenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The best guess for the available account sequence number.
	SequenceNumber *SequenceNumber `protobuf:"bytes,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Whether the guess relies on any non-finalized transactions. If true all of the relevant transactions are finalized.
	AllFinal bool `protobuf:"varint,2,opt,name=all_final,json=allFinal,proto3" json:"all_final,omitempty"`
}

func (x *NextAccountSequenceNumber) Reset() {
	*x = NextAccountSequenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextAccountSequenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextAccountSequenceNumber) ProtoMessage() {}

func (x *NextAccountSequenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextAccountSequenceNumber.ProtoReflect.Descriptor instead.
func (*NextAccountSequenceNumber) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{70}
}

func (x *NextAccountSequenceNumber) GetSequenceNumber() *SequenceNumber {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

func (x *NextAccountSequenceNumber) GetAllFinal() bool {
	if x != nil {
		return x.AllFinal
	}
	return false
}

// A duration of milliseconds.
type Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Duration) Reset() {
	*x = Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{71}
}

func (x *Duration) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A reason for why a transaction was rejected. Rejected means included in a
// block, but the desired action was not achieved. The only effect of a
// rejected transaction is payment.
type RejectReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*RejectReason_ModuleNotWf
	//	*RejectReason_ModuleHashAlreadyExists
	//	*RejectReason_InvalidAccountReference
	//	*RejectReason_InvalidInitMethod_
	//	*RejectReason_InvalidReceiveMethod_
	//	*RejectReason_InvalidModuleReference
	//	*RejectReason_InvalidContractAddress
	//	*RejectReason_RuntimeFailure
	//	*RejectReason_AmountTooLarge_
	//	*RejectReason_SerializationFailure
	//	*RejectReason_OutOfEnergy
	//	*RejectReason_RejectedInit_
	//	*RejectReason_RejectedReceive_
	//	*RejectReason_InvalidProof
	//	*RejectReason_AlreadyABaker
	//	*RejectReason_NotABaker
	//	*RejectReason_InsufficientBalanceForBakerStake
	//	*RejectReason_StakeUnderMinimumThresholdForBaking
	//	*RejectReason_BakerInCooldown
	//	*RejectReason_DuplicateAggregationKey
	//	*RejectReason_NonExistentCredentialId
	//	*RejectReason_KeyIndexAlreadyInUse
	//	*RejectReason_InvalidAccountThreshold
	//	*RejectReason_InvalidCredentialKeySignThreshold
	//	*RejectReason_InvalidEncryptedAmountTransferProof
	//	*RejectReason_InvalidTransferToPublicProof
	//	*RejectReason_EncryptedAmountSelfTransfer
	//	*RejectReason_InvalidIndexOnEncryptedTransfer
	//	*RejectReason_ZeroScheduledAmount
	//	*RejectReason_NonIncreasingSchedule
	//	*RejectReason_FirstScheduledReleaseExpired
	//	*RejectReason_ScheduledSelfTransfer
	//	*RejectReason_InvalidCredentials
	//	*RejectReason_DuplicateCredIds_
	//	*RejectReason_NonExistentCredIds_
	//	*RejectReason_RemoveFirstCredential
	//	*RejectReason_CredentialHolderDidNotSign
	//	*RejectReason_NotAllowedMultipleCredentials
	//	*RejectReason_NotAllowedToReceiveEncrypted
	//	*RejectReason_NotAllowedToHandleEncrypted
	//	*RejectReason_MissingBakerAddParameters
	//	*RejectReason_FinalizationRewardCommissionNotInRange
	//	*RejectReason_BakingRewardCommissionNotInRange
	//	*RejectReason_TransactionFeeCommissionNotInRange
	//	*RejectReason_AlreadyADelegator
	//	*RejectReason_InsufficientBalanceForDelegationStake
	//	*RejectReason_MissingDelegationAddParameters
	//	*RejectReason_InsufficientDelegationStake
	//	*RejectReason_DelegatorInCooldown
	//	*RejectReason_NotADelegator
	//	*RejectReason_DelegationTargetNotABaker
	//	*RejectReason_StakeOverMaximumThresholdForPool
	//	*RejectReason_PoolWouldBecomeOverDelegated
	//	*RejectReason_PoolClosed
	Reason isRejectReason_Reason `protobuf_oneof:"reason"`
}

func (x *RejectReason) Reset() {
	*x = RejectReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectReason) ProtoMessage() {}

func (x *RejectReason) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectReason.ProtoReflect.Descriptor instead.
func (*RejectReason) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72}
}

func (m *RejectReason) GetReason() isRejectReason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *RejectReason) GetModuleNotWf() *Empty {
	if x, ok := x.GetReason().(*RejectReason_ModuleNotWf); ok {
		return x.ModuleNotWf
	}
	return nil
}

func (x *RejectReason) GetModuleHashAlreadyExists() *ModuleRef {
	if x, ok := x.GetReason().(*RejectReason_ModuleHashAlreadyExists); ok {
		return x.ModuleHashAlreadyExists
	}
	return nil
}

func (x *RejectReason) GetInvalidAccountReference() *AccountAddress {
	if x, ok := x.GetReason().(*RejectReason_InvalidAccountReference); ok {
		return x.InvalidAccountReference
	}
	return nil
}

func (x *RejectReason) GetInvalidInitMethod() *RejectReason_InvalidInitMethod {
	if x, ok := x.GetReason().(*RejectReason_InvalidInitMethod_); ok {
		return x.InvalidInitMethod
	}
	return nil
}

func (x *RejectReason) GetInvalidReceiveMethod() *RejectReason_InvalidReceiveMethod {
	if x, ok := x.GetReason().(*RejectReason_InvalidReceiveMethod_); ok {
		return x.InvalidReceiveMethod
	}
	return nil
}

func (x *RejectReason) GetInvalidModuleReference() *ModuleRef {
	if x, ok := x.GetReason().(*RejectReason_InvalidModuleReference); ok {
		return x.InvalidModuleReference
	}
	return nil
}

func (x *RejectReason) GetInvalidContractAddress() *ContractAddress {
	if x, ok := x.GetReason().(*RejectReason_InvalidContractAddress); ok {
		return x.InvalidContractAddress
	}
	return nil
}

func (x *RejectReason) GetRuntimeFailure() *Empty {
	if x, ok := x.GetReason().(*RejectReason_RuntimeFailure); ok {
		return x.RuntimeFailure
	}
	return nil
}

func (x *RejectReason) GetAmountTooLarge() *RejectReason_AmountTooLarge {
	if x, ok := x.GetReason().(*RejectReason_AmountTooLarge_); ok {
		return x.AmountTooLarge
	}
	return nil
}

func (x *RejectReason) GetSerializationFailure() *Empty {
	if x, ok := x.GetReason().(*RejectReason_SerializationFailure); ok {
		return x.SerializationFailure
	}
	return nil
}

func (x *RejectReason) GetOutOfEnergy() *Empty {
	if x, ok := x.GetReason().(*RejectReason_OutOfEnergy); ok {
		return x.OutOfEnergy
	}
	return nil
}

func (x *RejectReason) GetRejectedInit() *RejectReason_RejectedInit {
	if x, ok := x.GetReason().(*RejectReason_RejectedInit_); ok {
		return x.RejectedInit
	}
	return nil
}

func (x *RejectReason) GetRejectedReceive() *RejectReason_RejectedReceive {
	if x, ok := x.GetReason().(*RejectReason_RejectedReceive_); ok {
		return x.RejectedReceive
	}
	return nil
}

func (x *RejectReason) GetInvalidProof() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InvalidProof); ok {
		return x.InvalidProof
	}
	return nil
}

func (x *RejectReason) GetAlreadyABaker() *BakerId {
	if x, ok := x.GetReason().(*RejectReason_AlreadyABaker); ok {
		return x.AlreadyABaker
	}
	return nil
}

func (x *RejectReason) GetNotABaker() *AccountAddress {
	if x, ok := x.GetReason().(*RejectReason_NotABaker); ok {
		return x.NotABaker
	}
	return nil
}

func (x *RejectReason) GetInsufficientBalanceForBakerStake() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InsufficientBalanceForBakerStake); ok {
		return x.InsufficientBalanceForBakerStake
	}
	return nil
}

func (x *RejectReason) GetStakeUnderMinimumThresholdForBaking() *Empty {
	if x, ok := x.GetReason().(*RejectReason_StakeUnderMinimumThresholdForBaking); ok {
		return x.StakeUnderMinimumThresholdForBaking
	}
	return nil
}

func (x *RejectReason) GetBakerInCooldown() *Empty {
	if x, ok := x.GetReason().(*RejectReason_BakerInCooldown); ok {
		return x.BakerInCooldown
	}
	return nil
}

func (x *RejectReason) GetDuplicateAggregationKey() *BakerAggregationVerifyKey {
	if x, ok := x.GetReason().(*RejectReason_DuplicateAggregationKey); ok {
		return x.DuplicateAggregationKey
	}
	return nil
}

func (x *RejectReason) GetNonExistentCredentialId() *Empty {
	if x, ok := x.GetReason().(*RejectReason_NonExistentCredentialId); ok {
		return x.NonExistentCredentialId
	}
	return nil
}

func (x *RejectReason) GetKeyIndexAlreadyInUse() *Empty {
	if x, ok := x.GetReason().(*RejectReason_KeyIndexAlreadyInUse); ok {
		return x.KeyIndexAlreadyInUse
	}
	return nil
}

func (x *RejectReason) GetInvalidAccountThreshold() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InvalidAccountThreshold); ok {
		return x.InvalidAccountThreshold
	}
	return nil
}

func (x *RejectReason) GetInvalidCredentialKeySignThreshold() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InvalidCredentialKeySignThreshold); ok {
		return x.InvalidCredentialKeySignThreshold
	}
	return nil
}

func (x *RejectReason) GetInvalidEncryptedAmountTransferProof() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InvalidEncryptedAmountTransferProof); ok {
		return x.InvalidEncryptedAmountTransferProof
	}
	return nil
}

func (x *RejectReason) GetInvalidTransferToPublicProof() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InvalidTransferToPublicProof); ok {
		return x.InvalidTransferToPublicProof
	}
	return nil
}

func (x *RejectReason) GetEncryptedAmountSelfTransfer() *AccountAddress {
	if x, ok := x.GetReason().(*RejectReason_EncryptedAmountSelfTransfer); ok {
		return x.EncryptedAmountSelfTransfer
	}
	return nil
}

func (x *RejectReason) GetInvalidIndexOnEncryptedTransfer() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InvalidIndexOnEncryptedTransfer); ok {
		return x.InvalidIndexOnEncryptedTransfer
	}
	return nil
}

func (x *RejectReason) GetZeroScheduledAmount() *Empty {
	if x, ok := x.GetReason().(*RejectReason_ZeroScheduledAmount); ok {
		return x.ZeroScheduledAmount
	}
	return nil
}

func (x *RejectReason) GetNonIncreasingSchedule() *Empty {
	if x, ok := x.GetReason().(*RejectReason_NonIncreasingSchedule); ok {
		return x.NonIncreasingSchedule
	}
	return nil
}

func (x *RejectReason) GetFirstScheduledReleaseExpired() *Empty {
	if x, ok := x.GetReason().(*RejectReason_FirstScheduledReleaseExpired); ok {
		return x.FirstScheduledReleaseExpired
	}
	return nil
}

func (x *RejectReason) GetScheduledSelfTransfer() *AccountAddress {
	if x, ok := x.GetReason().(*RejectReason_ScheduledSelfTransfer); ok {
		return x.ScheduledSelfTransfer
	}
	return nil
}

func (x *RejectReason) GetInvalidCredentials() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InvalidCredentials); ok {
		return x.InvalidCredentials
	}
	return nil
}

func (x *RejectReason) GetDuplicateCredIds() *RejectReason_DuplicateCredIds {
	if x, ok := x.GetReason().(*RejectReason_DuplicateCredIds_); ok {
		return x.DuplicateCredIds
	}
	return nil
}

func (x *RejectReason) GetNonExistentCredIds() *RejectReason_NonExistentCredIds {
	if x, ok := x.GetReason().(*RejectReason_NonExistentCredIds_); ok {
		return x.NonExistentCredIds
	}
	return nil
}

func (x *RejectReason) GetRemoveFirstCredential() *Empty {
	if x, ok := x.GetReason().(*RejectReason_RemoveFirstCredential); ok {
		return x.RemoveFirstCredential
	}
	return nil
}

func (x *RejectReason) GetCredentialHolderDidNotSign() *Empty {
	if x, ok := x.GetReason().(*RejectReason_CredentialHolderDidNotSign); ok {
		return x.CredentialHolderDidNotSign
	}
	return nil
}

func (x *RejectReason) GetNotAllowedMultipleCredentials() *Empty {
	if x, ok := x.GetReason().(*RejectReason_NotAllowedMultipleCredentials); ok {
		return x.NotAllowedMultipleCredentials
	}
	return nil
}

func (x *RejectReason) GetNotAllowedToReceiveEncrypted() *Empty {
	if x, ok := x.GetReason().(*RejectReason_NotAllowedToReceiveEncrypted); ok {
		return x.NotAllowedToReceiveEncrypted
	}
	return nil
}

func (x *RejectReason) GetNotAllowedToHandleEncrypted() *Empty {
	if x, ok := x.GetReason().(*RejectReason_NotAllowedToHandleEncrypted); ok {
		return x.NotAllowedToHandleEncrypted
	}
	return nil
}

func (x *RejectReason) GetMissingBakerAddParameters() *Empty {
	if x, ok := x.GetReason().(*RejectReason_MissingBakerAddParameters); ok {
		return x.MissingBakerAddParameters
	}
	return nil
}

func (x *RejectReason) GetFinalizationRewardCommissionNotInRange() *Empty {
	if x, ok := x.GetReason().(*RejectReason_FinalizationRewardCommissionNotInRange); ok {
		return x.FinalizationRewardCommissionNotInRange
	}
	return nil
}

func (x *RejectReason) GetBakingRewardCommissionNotInRange() *Empty {
	if x, ok := x.GetReason().(*RejectReason_BakingRewardCommissionNotInRange); ok {
		return x.BakingRewardCommissionNotInRange
	}
	return nil
}

func (x *RejectReason) GetTransactionFeeCommissionNotInRange() *Empty {
	if x, ok := x.GetReason().(*RejectReason_TransactionFeeCommissionNotInRange); ok {
		return x.TransactionFeeCommissionNotInRange
	}
	return nil
}

func (x *RejectReason) GetAlreadyADelegator() *Empty {
	if x, ok := x.GetReason().(*RejectReason_AlreadyADelegator); ok {
		return x.AlreadyADelegator
	}
	return nil
}

func (x *RejectReason) GetInsufficientBalanceForDelegationStake() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InsufficientBalanceForDelegationStake); ok {
		return x.InsufficientBalanceForDelegationStake
	}
	return nil
}

func (x *RejectReason) GetMissingDelegationAddParameters() *Empty {
	if x, ok := x.GetReason().(*RejectReason_MissingDelegationAddParameters); ok {
		return x.MissingDelegationAddParameters
	}
	return nil
}

func (x *RejectReason) GetInsufficientDelegationStake() *Empty {
	if x, ok := x.GetReason().(*RejectReason_InsufficientDelegationStake); ok {
		return x.InsufficientDelegationStake
	}
	return nil
}

func (x *RejectReason) GetDelegatorInCooldown() *Empty {
	if x, ok := x.GetReason().(*RejectReason_DelegatorInCooldown); ok {
		return x.DelegatorInCooldown
	}
	return nil
}

func (x *RejectReason) GetNotADelegator() *AccountAddress {
	if x, ok := x.GetReason().(*RejectReason_NotADelegator); ok {
		return x.NotADelegator
	}
	return nil
}

func (x *RejectReason) GetDelegationTargetNotABaker() *BakerId {
	if x, ok := x.GetReason().(*RejectReason_DelegationTargetNotABaker); ok {
		return x.DelegationTargetNotABaker
	}
	return nil
}

func (x *RejectReason) GetStakeOverMaximumThresholdForPool() *Empty {
	if x, ok := x.GetReason().(*RejectReason_StakeOverMaximumThresholdForPool); ok {
		return x.StakeOverMaximumThresholdForPool
	}
	return nil
}

func (x *RejectReason) GetPoolWouldBecomeOverDelegated() *Empty {
	if x, ok := x.GetReason().(*RejectReason_PoolWouldBecomeOverDelegated); ok {
		return x.PoolWouldBecomeOverDelegated
	}
	return nil
}

func (x *RejectReason) GetPoolClosed() *Empty {
	if x, ok := x.GetReason().(*RejectReason_PoolClosed); ok {
		return x.PoolClosed
	}
	return nil
}

type isRejectReason_Reason interface {
	isRejectReason_Reason()
}

type RejectReason_ModuleNotWf struct {
	// Raised while validating a Wasm module that is not well formed.
	ModuleNotWf *Empty `protobuf:"bytes,1,opt,name=module_not_wf,json=moduleNotWf,proto3,oneof"`
}

type RejectReason_ModuleHashAlreadyExists struct {
	// The smart contract module hash already exists.
	ModuleHashAlreadyExists *ModuleRef `protobuf:"bytes,2,opt,name=module_hash_already_exists,json=moduleHashAlreadyExists,proto3,oneof"`
}

type RejectReason_InvalidAccountReference struct {
	// Account does not exist.
	InvalidAccountReference *AccountAddress `protobuf:"bytes,3,opt,name=invalid_account_reference,json=invalidAccountReference,proto3,oneof"`
}

type RejectReason_InvalidInitMethod_ struct {
	// Reference to a non-existing contract init method.
	InvalidInitMethod *RejectReason_InvalidInitMethod `protobuf:"bytes,4,opt,name=invalid_init_method,json=invalidInitMethod,proto3,oneof"`
}

type RejectReason_InvalidReceiveMethod_ struct {
	// Reference to a non-existing contract receive method.
	InvalidReceiveMethod *RejectReason_InvalidReceiveMethod `protobuf:"bytes,5,opt,name=invalid_receive_method,json=invalidReceiveMethod,proto3,oneof"`
}

type RejectReason_InvalidModuleReference struct {
	// Reference to a non-existing smart contract module.
	InvalidModuleReference *ModuleRef `protobuf:"bytes,6,opt,name=invalid_module_reference,json=invalidModuleReference,proto3,oneof"`
}

type RejectReason_InvalidContractAddress struct {
	// Contract instance does not exist.
	InvalidContractAddress *ContractAddress `protobuf:"bytes,7,opt,name=invalid_contract_address,json=invalidContractAddress,proto3,oneof"`
}

type RejectReason_RuntimeFailure struct {
	// Runtime exception occurred when running either the init or receive
	// method.
	RuntimeFailure *Empty `protobuf:"bytes,8,opt,name=runtime_failure,json=runtimeFailure,proto3,oneof"`
}

type RejectReason_AmountTooLarge_ struct {
	// When one wishes to transfer an amount from A to B but there
	// are not enough funds on account/contract A to make this
	// possible. The data are the from address and the amount to transfer.
	AmountTooLarge *RejectReason_AmountTooLarge `protobuf:"bytes,9,opt,name=amount_too_large,json=amountTooLarge,proto3,oneof"`
}

type RejectReason_SerializationFailure struct {
	// Serialization of the body failed.
	SerializationFailure *Empty `protobuf:"bytes,10,opt,name=serialization_failure,json=serializationFailure,proto3,oneof"`
}

type RejectReason_OutOfEnergy struct {
	// We ran of out energy to process this transaction.
	OutOfEnergy *Empty `protobuf:"bytes,11,opt,name=out_of_energy,json=outOfEnergy,proto3,oneof"`
}

type RejectReason_RejectedInit_ struct {
	// Rejected due to contract logic in init function of a contract.
	RejectedInit *RejectReason_RejectedInit `protobuf:"bytes,12,opt,name=rejected_init,json=rejectedInit,proto3,oneof"`
}

type RejectReason_RejectedReceive_ struct {
	// Rejected due to contract logic in receive function of a contract.
	RejectedReceive *RejectReason_RejectedReceive `protobuf:"bytes,13,opt,name=rejected_receive,json=rejectedReceive,proto3,oneof"`
}

type RejectReason_InvalidProof struct {
	// Proof that the baker owns relevant private keys is not valid.
	InvalidProof *Empty `protobuf:"bytes,14,opt,name=invalid_proof,json=invalidProof,proto3,oneof"`
}

type RejectReason_AlreadyABaker struct {
	// Tried to add baker for an account that already has a baker.
	AlreadyABaker *BakerId `protobuf:"bytes,15,opt,name=already_a_baker,json=alreadyABaker,proto3,oneof"`
}

type RejectReason_NotABaker struct {
	// Tried to remove a baker for an account that has no baker.
	NotABaker *AccountAddress `protobuf:"bytes,16,opt,name=not_a_baker,json=notABaker,proto3,oneof"`
}

type RejectReason_InsufficientBalanceForBakerStake struct {
	// The amount on the account was insufficient to cover the proposed stake.
	InsufficientBalanceForBakerStake *Empty `protobuf:"bytes,17,opt,name=insufficient_balance_for_baker_stake,json=insufficientBalanceForBakerStake,proto3,oneof"`
}

type RejectReason_StakeUnderMinimumThresholdForBaking struct {
	// The amount provided is under the threshold required for becoming a baker.
	StakeUnderMinimumThresholdForBaking *Empty `protobuf:"bytes,18,opt,name=stake_under_minimum_threshold_for_baking,json=stakeUnderMinimumThresholdForBaking,proto3,oneof"`
}

type RejectReason_BakerInCooldown struct {
	// The change could not be made because the baker is in cooldown for
	// another change.
	BakerInCooldown *Empty `protobuf:"bytes,19,opt,name=baker_in_cooldown,json=bakerInCooldown,proto3,oneof"`
}

type RejectReason_DuplicateAggregationKey struct {
	// A baker with the given aggregation key already exists.
	DuplicateAggregationKey *BakerAggregationVerifyKey `protobuf:"bytes,20,opt,name=duplicate_aggregation_key,json=duplicateAggregationKey,proto3,oneof"`
}

type RejectReason_NonExistentCredentialId struct {
	// Encountered credential ID that does not exist.
	NonExistentCredentialId *Empty `protobuf:"bytes,21,opt,name=non_existent_credential_id,json=nonExistentCredentialId,proto3,oneof"`
}

type RejectReason_KeyIndexAlreadyInUse struct {
	// Attempted to add an account key to a key index already in use.
	KeyIndexAlreadyInUse *Empty `protobuf:"bytes,22,opt,name=key_index_already_in_use,json=keyIndexAlreadyInUse,proto3,oneof"`
}

type RejectReason_InvalidAccountThreshold struct {
	// When the account threshold is updated, it must not exceed the amount of
	// existing keys.
	InvalidAccountThreshold *Empty `protobuf:"bytes,23,opt,name=invalid_account_threshold,json=invalidAccountThreshold,proto3,oneof"`
}

type RejectReason_InvalidCredentialKeySignThreshold struct {
	// When the credential key threshold is updated, it must not exceed the
	// amount of existing keys.
	InvalidCredentialKeySignThreshold *Empty `protobuf:"bytes,24,opt,name=invalid_credential_key_sign_threshold,json=invalidCredentialKeySignThreshold,proto3,oneof"`
}

type RejectReason_InvalidEncryptedAmountTransferProof struct {
	// Proof for an encrypted amount transfer did not validate.
	InvalidEncryptedAmountTransferProof *Empty `protobuf:"bytes,25,opt,name=invalid_encrypted_amount_transfer_proof,json=invalidEncryptedAmountTransferProof,proto3,oneof"`
}

type RejectReason_InvalidTransferToPublicProof struct {
	// Proof for a secret to public transfer did not validate.
	InvalidTransferToPublicProof *Empty `protobuf:"bytes,26,opt,name=invalid_transfer_to_public_proof,json=invalidTransferToPublicProof,proto3,oneof"`
}

type RejectReason_EncryptedAmountSelfTransfer struct {
	// Account tried to transfer an encrypted amount to itself, that's not
	// allowed.
	EncryptedAmountSelfTransfer *AccountAddress `protobuf:"bytes,27,opt,name=encrypted_amount_self_transfer,json=encryptedAmountSelfTransfer,proto3,oneof"`
}

type RejectReason_InvalidIndexOnEncryptedTransfer struct {
	// The provided index is below the start index or above `startIndex +
	// length incomingAmounts`.
	InvalidIndexOnEncryptedTransfer *Empty `protobuf:"bytes,28,opt,name=invalid_index_on_encrypted_transfer,json=invalidIndexOnEncryptedTransfer,proto3,oneof"`
}

type RejectReason_ZeroScheduledAmount struct {
	// The transfer with schedule is going to send 0 tokens.
	ZeroScheduledAmount *Empty `protobuf:"bytes,29,opt,name=zero_scheduledAmount,json=zeroScheduledAmount,proto3,oneof"`
}

type RejectReason_NonIncreasingSchedule struct {
	// The transfer with schedule has a non strictly increasing schedule.
	NonIncreasingSchedule *Empty `protobuf:"bytes,30,opt,name=non_increasing_schedule,json=nonIncreasingSchedule,proto3,oneof"`
}

type RejectReason_FirstScheduledReleaseExpired struct {
	// The first scheduled release in a transfer with schedule has already
	// expired.
	FirstScheduledReleaseExpired *Empty `protobuf:"bytes,31,opt,name=first_scheduled_release_expired,json=firstScheduledReleaseExpired,proto3,oneof"`
}

type RejectReason_ScheduledSelfTransfer struct {
	// Account tried to transfer with schedule to itself, that's not allowed.
	ScheduledSelfTransfer *AccountAddress `protobuf:"bytes,32,opt,name=scheduled_self_transfer,json=scheduledSelfTransfer,proto3,oneof"`
}

type RejectReason_InvalidCredentials struct {
	// At least one of the credentials was either malformed or its proof was
	// incorrect.
	InvalidCredentials *Empty `protobuf:"bytes,33,opt,name=invalid_credentials,json=invalidCredentials,proto3,oneof"`
}

type RejectReason_DuplicateCredIds_ struct {
	// Some of the credential IDs already exist or are duplicated in the
	// transaction.
	DuplicateCredIds *RejectReason_DuplicateCredIds `protobuf:"bytes,34,opt,name=duplicate_cred_ids,json=duplicateCredIds,proto3,oneof"`
}

type RejectReason_NonExistentCredIds_ struct {
	// A credential id that was to be removed is not part of the account.
	NonExistentCredIds *RejectReason_NonExistentCredIds `protobuf:"bytes,35,opt,name=non_existent_cred_ids,json=nonExistentCredIds,proto3,oneof"`
}

type RejectReason_RemoveFirstCredential struct {
	// Attemp to remove the first credential.
	RemoveFirstCredential *Empty `protobuf:"bytes,36,opt,name=remove_first_credential,json=removeFirstCredential,proto3,oneof"`
}

type RejectReason_CredentialHolderDidNotSign struct {
	// The credential holder of the keys to be updated did not sign the
	// transaction.
	CredentialHolderDidNotSign *Empty `protobuf:"bytes,37,opt,name=credential_holder_did_not_sign,json=credentialHolderDidNotSign,proto3,oneof"`
}

type RejectReason_NotAllowedMultipleCredentials struct {
	// Account is not allowed to have multiple credentials because it contains
	// a non-zero encrypted transfer.
	NotAllowedMultipleCredentials *Empty `protobuf:"bytes,38,opt,name=not_allowed_multiple_credentials,json=notAllowedMultipleCredentials,proto3,oneof"`
}

type RejectReason_NotAllowedToReceiveEncrypted struct {
	// The account is not allowed to receive encrypted transfers because it has
	// multiple credentials.
	NotAllowedToReceiveEncrypted *Empty `protobuf:"bytes,39,opt,name=not_allowed_to_receive_encrypted,json=notAllowedToReceiveEncrypted,proto3,oneof"`
}

type RejectReason_NotAllowedToHandleEncrypted struct {
	// The account is not allowed to send encrypted transfers (or transfer
	// from/to public to/from encrypted).
	NotAllowedToHandleEncrypted *Empty `protobuf:"bytes,40,opt,name=not_allowed_to_handle_encrypted,json=notAllowedToHandleEncrypted,proto3,oneof"`
}

type RejectReason_MissingBakerAddParameters struct {
	// A configure baker transaction is missing one or more arguments in order
	// to add a baker.
	MissingBakerAddParameters *Empty `protobuf:"bytes,41,opt,name=missing_baker_add_parameters,json=missingBakerAddParameters,proto3,oneof"`
}

type RejectReason_FinalizationRewardCommissionNotInRange struct {
	// Finalization reward commission is not in the valid range for a baker.
	FinalizationRewardCommissionNotInRange *Empty `protobuf:"bytes,42,opt,name=finalization_reward_commission_not_in_range,json=finalizationRewardCommissionNotInRange,proto3,oneof"`
}

type RejectReason_BakingRewardCommissionNotInRange struct {
	// Baking reward commission is not in the valid range for a baker.
	BakingRewardCommissionNotInRange *Empty `protobuf:"bytes,43,opt,name=baking_reward_commission_not_in_range,json=bakingRewardCommissionNotInRange,proto3,oneof"`
}

type RejectReason_TransactionFeeCommissionNotInRange struct {
	// Transaction fee commission is not in the valid range for a baker.
	TransactionFeeCommissionNotInRange *Empty `protobuf:"bytes,44,opt,name=transaction_fee_commission_not_in_range,json=transactionFeeCommissionNotInRange,proto3,oneof"`
}

type RejectReason_AlreadyADelegator struct {
	// Tried to add baker for an account that already has a delegator.
	AlreadyADelegator *Empty `protobuf:"bytes,45,opt,name=already_a_delegator,json=alreadyADelegator,proto3,oneof"`
}

type RejectReason_InsufficientBalanceForDelegationStake struct {
	// The amount on the account was insufficient to cover the proposed stake.
	InsufficientBalanceForDelegationStake *Empty `protobuf:"bytes,46,opt,name=insufficient_balance_for_delegation_stake,json=insufficientBalanceForDelegationStake,proto3,oneof"`
}

type RejectReason_MissingDelegationAddParameters struct {
	// A configure delegation transaction is missing one or more arguments in
	// order to add a delegator.
	MissingDelegationAddParameters *Empty `protobuf:"bytes,47,opt,name=missing_delegation_add_parameters,json=missingDelegationAddParameters,proto3,oneof"`
}

type RejectReason_InsufficientDelegationStake struct {
	// Delegation stake when adding a delegator was 0.
	InsufficientDelegationStake *Empty `protobuf:"bytes,48,opt,name=insufficient_delegation_stake,json=insufficientDelegationStake,proto3,oneof"`
}

type RejectReason_DelegatorInCooldown struct {
	// Account is not a delegation account.
	DelegatorInCooldown *Empty `protobuf:"bytes,49,opt,name=delegator_in_cooldown,json=delegatorInCooldown,proto3,oneof"`
}

type RejectReason_NotADelegator struct {
	// Account is not a delegation account.
	NotADelegator *AccountAddress `protobuf:"bytes,50,opt,name=not_a_delegator,json=notADelegator,proto3,oneof"`
}

type RejectReason_DelegationTargetNotABaker struct {
	// Delegation target is not a baker
	DelegationTargetNotABaker *BakerId `protobuf:"bytes,51,opt,name=delegation_target_not_a_baker,json=delegationTargetNotABaker,proto3,oneof"`
}

type RejectReason_StakeOverMaximumThresholdForPool struct {
	// The amount would result in pool capital higher than the maximum
	// threshold.
	StakeOverMaximumThresholdForPool *Empty `protobuf:"bytes,52,opt,name=stake_over_maximum_threshold_for_pool,json=stakeOverMaximumThresholdForPool,proto3,oneof"`
}

type RejectReason_PoolWouldBecomeOverDelegated struct {
	// The amount would result in pool with a too high fraction of delegated
	// capital.
	PoolWouldBecomeOverDelegated *Empty `protobuf:"bytes,53,opt,name=pool_would_become_over_delegated,json=poolWouldBecomeOverDelegated,proto3,oneof"`
}

type RejectReason_PoolClosed struct {
	// The pool is not open to delegators.
	PoolClosed *Empty `protobuf:"bytes,54,opt,name=pool_closed,json=poolClosed,proto3,oneof"`
}

func (*RejectReason_ModuleNotWf) isRejectReason_Reason() {}

func (*RejectReason_ModuleHashAlreadyExists) isRejectReason_Reason() {}

func (*RejectReason_InvalidAccountReference) isRejectReason_Reason() {}

func (*RejectReason_InvalidInitMethod_) isRejectReason_Reason() {}

func (*RejectReason_InvalidReceiveMethod_) isRejectReason_Reason() {}

func (*RejectReason_InvalidModuleReference) isRejectReason_Reason() {}

func (*RejectReason_InvalidContractAddress) isRejectReason_Reason() {}

func (*RejectReason_RuntimeFailure) isRejectReason_Reason() {}

func (*RejectReason_AmountTooLarge_) isRejectReason_Reason() {}

func (*RejectReason_SerializationFailure) isRejectReason_Reason() {}

func (*RejectReason_OutOfEnergy) isRejectReason_Reason() {}

func (*RejectReason_RejectedInit_) isRejectReason_Reason() {}

func (*RejectReason_RejectedReceive_) isRejectReason_Reason() {}

func (*RejectReason_InvalidProof) isRejectReason_Reason() {}

func (*RejectReason_AlreadyABaker) isRejectReason_Reason() {}

func (*RejectReason_NotABaker) isRejectReason_Reason() {}

func (*RejectReason_InsufficientBalanceForBakerStake) isRejectReason_Reason() {}

func (*RejectReason_StakeUnderMinimumThresholdForBaking) isRejectReason_Reason() {}

func (*RejectReason_BakerInCooldown) isRejectReason_Reason() {}

func (*RejectReason_DuplicateAggregationKey) isRejectReason_Reason() {}

func (*RejectReason_NonExistentCredentialId) isRejectReason_Reason() {}

func (*RejectReason_KeyIndexAlreadyInUse) isRejectReason_Reason() {}

func (*RejectReason_InvalidAccountThreshold) isRejectReason_Reason() {}

func (*RejectReason_InvalidCredentialKeySignThreshold) isRejectReason_Reason() {}

func (*RejectReason_InvalidEncryptedAmountTransferProof) isRejectReason_Reason() {}

func (*RejectReason_InvalidTransferToPublicProof) isRejectReason_Reason() {}

func (*RejectReason_EncryptedAmountSelfTransfer) isRejectReason_Reason() {}

func (*RejectReason_InvalidIndexOnEncryptedTransfer) isRejectReason_Reason() {}

func (*RejectReason_ZeroScheduledAmount) isRejectReason_Reason() {}

func (*RejectReason_NonIncreasingSchedule) isRejectReason_Reason() {}

func (*RejectReason_FirstScheduledReleaseExpired) isRejectReason_Reason() {}

func (*RejectReason_ScheduledSelfTransfer) isRejectReason_Reason() {}

func (*RejectReason_InvalidCredentials) isRejectReason_Reason() {}

func (*RejectReason_DuplicateCredIds_) isRejectReason_Reason() {}

func (*RejectReason_NonExistentCredIds_) isRejectReason_Reason() {}

func (*RejectReason_RemoveFirstCredential) isRejectReason_Reason() {}

func (*RejectReason_CredentialHolderDidNotSign) isRejectReason_Reason() {}

func (*RejectReason_NotAllowedMultipleCredentials) isRejectReason_Reason() {}

func (*RejectReason_NotAllowedToReceiveEncrypted) isRejectReason_Reason() {}

func (*RejectReason_NotAllowedToHandleEncrypted) isRejectReason_Reason() {}

func (*RejectReason_MissingBakerAddParameters) isRejectReason_Reason() {}

func (*RejectReason_FinalizationRewardCommissionNotInRange) isRejectReason_Reason() {}

func (*RejectReason_BakingRewardCommissionNotInRange) isRejectReason_Reason() {}

func (*RejectReason_TransactionFeeCommissionNotInRange) isRejectReason_Reason() {}

func (*RejectReason_AlreadyADelegator) isRejectReason_Reason() {}

func (*RejectReason_InsufficientBalanceForDelegationStake) isRejectReason_Reason() {}

func (*RejectReason_MissingDelegationAddParameters) isRejectReason_Reason() {}

func (*RejectReason_InsufficientDelegationStake) isRejectReason_Reason() {}

func (*RejectReason_DelegatorInCooldown) isRejectReason_Reason() {}

func (*RejectReason_NotADelegator) isRejectReason_Reason() {}

func (*RejectReason_DelegationTargetNotABaker) isRejectReason_Reason() {}

func (*RejectReason_StakeOverMaximumThresholdForPool) isRejectReason_Reason() {}

func (*RejectReason_PoolWouldBecomeOverDelegated) isRejectReason_Reason() {}

func (*RejectReason_PoolClosed) isRejectReason_Reason() {}

// Data generated as part of initializing a single contract instance.
type ContractInitializedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contract version.
	ContractVersion ContractVersion `protobuf:"varint,1,opt,name=contract_version,json=contractVersion,proto3,enum=concordium.v2.ContractVersion" json:"contract_version,omitempty"`
	// Module with the source code of the contract.
	OriginRef *ModuleRef `protobuf:"bytes,2,opt,name=origin_ref,json=originRef,proto3" json:"origin_ref,omitempty"`
	// The newly assigned address of the contract.
	Address *ContractAddress `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The amount the instance was initialized with.
	Amount *Amount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The name of the contract.
	InitName *InitName `protobuf:"bytes,5,opt,name=init_name,json=initName,proto3" json:"init_name,omitempty"`
	// Any contract events that might have been genereated by the contract initialization.
	Events []*ContractEvent `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ContractInitializedEvent) Reset() {
	*x = ContractInitializedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInitializedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInitializedEvent) ProtoMessage() {}

func (x *ContractInitializedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInitializedEvent.ProtoReflect.Descriptor instead.
func (*ContractInitializedEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{73}
}

func (x *ContractInitializedEvent) GetContractVersion() ContractVersion {
	if x != nil {
		return x.ContractVersion
	}
	return ContractVersion_V0
}

func (x *ContractInitializedEvent) GetOriginRef() *ModuleRef {
	if x != nil {
		return x.OriginRef
	}
	return nil
}

func (x *ContractInitializedEvent) GetAddress() *ContractAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ContractInitializedEvent) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ContractInitializedEvent) GetInitName() *InitName {
	if x != nil {
		return x.InitName
	}
	return nil
}

func (x *ContractInitializedEvent) GetEvents() []*ContractEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// An event generated by a smart contract.
type ContractEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ContractEvent) Reset() {
	*x = ContractEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractEvent) ProtoMessage() {}

func (x *ContractEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractEvent.ProtoReflect.Descriptor instead.
func (*ContractEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{74}
}

func (x *ContractEvent) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Data generated as part of updating a single contract instance.
// In general a single Update transaction will
// generate one or more of these events, together with possibly some transfers.
type InstanceUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contract version.
	ContractVersion ContractVersion `protobuf:"varint,1,opt,name=contract_version,json=contractVersion,proto3,enum=concordium.v2.ContractVersion" json:"contract_version,omitempty"`
	// Address of the affected instance.
	Address *ContractAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The origin of the message to the smart contract. This can be
	// either an account or a smart contract.
	Instigator *Address `protobuf:"bytes,3,opt,name=instigator,proto3" json:"instigator,omitempty"`
	// The amount the method was invoked with.
	Amount *Amount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The parameter passed to the method.
	Parameter *Parameter `protobuf:"bytes,5,opt,name=parameter,proto3" json:"parameter,omitempty"`
	// The name of the method that was executed.
	ReceiveName *ReceiveName `protobuf:"bytes,6,opt,name=receive_name,json=receiveName,proto3" json:"receive_name,omitempty"`
	// Any contract events that might have been generated by the contract execution.
	Events []*ContractEvent `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *InstanceUpdatedEvent) Reset() {
	*x = InstanceUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceUpdatedEvent) ProtoMessage() {}

func (x *InstanceUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceUpdatedEvent.ProtoReflect.Descriptor instead.
func (*InstanceUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{75}
}

func (x *InstanceUpdatedEvent) GetContractVersion() ContractVersion {
	if x != nil {
		return x.ContractVersion
	}
	return ContractVersion_V0
}

func (x *InstanceUpdatedEvent) GetAddress() *ContractAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *InstanceUpdatedEvent) GetInstigator() *Address {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *InstanceUpdatedEvent) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InstanceUpdatedEvent) GetParameter() *Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *InstanceUpdatedEvent) GetReceiveName() *ReceiveName {
	if x != nil {
		return x.ReceiveName
	}
	return nil
}

func (x *InstanceUpdatedEvent) GetEvents() []*ContractEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// Effects produced by successful smart contract invocations.
// A single invocation will produce a sequence of these effects.
type ContractTraceElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Element:
	//	*ContractTraceElement_Updated
	//	*ContractTraceElement_Transferred_
	//	*ContractTraceElement_Interrupted_
	//	*ContractTraceElement_Resumed_
	//	*ContractTraceElement_Upgraded_
	Element isContractTraceElement_Element `protobuf_oneof:"element"`
}

func (x *ContractTraceElement) Reset() {
	*x = ContractTraceElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractTraceElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractTraceElement) ProtoMessage() {}

func (x *ContractTraceElement) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractTraceElement.ProtoReflect.Descriptor instead.
func (*ContractTraceElement) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{76}
}

func (m *ContractTraceElement) GetElement() isContractTraceElement_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (x *ContractTraceElement) GetUpdated() *InstanceUpdatedEvent {
	if x, ok := x.GetElement().(*ContractTraceElement_Updated); ok {
		return x.Updated
	}
	return nil
}

func (x *ContractTraceElement) GetTransferred() *ContractTraceElement_Transferred {
	if x, ok := x.GetElement().(*ContractTraceElement_Transferred_); ok {
		return x.Transferred
	}
	return nil
}

func (x *ContractTraceElement) GetInterrupted() *ContractTraceElement_Interrupted {
	if x, ok := x.GetElement().(*ContractTraceElement_Interrupted_); ok {
		return x.Interrupted
	}
	return nil
}

func (x *ContractTraceElement) GetResumed() *ContractTraceElement_Resumed {
	if x, ok := x.GetElement().(*ContractTraceElement_Resumed_); ok {
		return x.Resumed
	}
	return nil
}

func (x *ContractTraceElement) GetUpgraded() *ContractTraceElement_Upgraded {
	if x, ok := x.GetElement().(*ContractTraceElement_Upgraded_); ok {
		return x.Upgraded
	}
	return nil
}

type isContractTraceElement_Element interface {
	isContractTraceElement_Element()
}

type ContractTraceElement_Updated struct {
	// A contract instance was updated.
	Updated *InstanceUpdatedEvent `protobuf:"bytes,1,opt,name=updated,proto3,oneof"`
}

type ContractTraceElement_Transferred_ struct {
	// A contract transferred an amount to an account.
	Transferred *ContractTraceElement_Transferred `protobuf:"bytes,2,opt,name=transferred,proto3,oneof"`
}

type ContractTraceElement_Interrupted_ struct {
	// A contract was interrupted.
	// This occurs when a contract invokes another contract or makes a transfer to an account.
	Interrupted *ContractTraceElement_Interrupted `protobuf:"bytes,3,opt,name=interrupted,proto3,oneof"`
}

type ContractTraceElement_Resumed_ struct {
	// A previously interrupted contract was resumed.
	Resumed *ContractTraceElement_Resumed `protobuf:"bytes,4,opt,name=resumed,proto3,oneof"`
}

type ContractTraceElement_Upgraded_ struct {
	// A contract was upgraded.
	Upgraded *ContractTraceElement_Upgraded `protobuf:"bytes,5,opt,name=upgraded,proto3,oneof"`
}

func (*ContractTraceElement_Updated) isContractTraceElement_Element() {}

func (*ContractTraceElement_Transferred_) isContractTraceElement_Element() {}

func (*ContractTraceElement_Interrupted_) isContractTraceElement_Element() {}

func (*ContractTraceElement_Resumed_) isContractTraceElement_Element() {}

func (*ContractTraceElement_Upgraded_) isContractTraceElement_Element() {}

// Result of a successful change of baker keys.
type BakerKeysEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the baker whose keys were changed.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// Account address of the baker.
	Account *AccountAddress `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// The new public key for verifying block signatures.
	SignKey *BakerSignatureVerifyKey `protobuf:"bytes,3,opt,name=sign_key,json=signKey,proto3" json:"sign_key,omitempty"`
	// The new public key for verifying whether the baker won the block
	// lottery.
	ElectionKey *BakerElectionVerifyKey `protobuf:"bytes,4,opt,name=election_key,json=electionKey,proto3" json:"election_key,omitempty"`
	// The new public key for verifying finalization records.
	AggregationKey *BakerAggregationVerifyKey `protobuf:"bytes,5,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
}

func (x *BakerKeysEvent) Reset() {
	*x = BakerKeysEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerKeysEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerKeysEvent) ProtoMessage() {}

func (x *BakerKeysEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerKeysEvent.ProtoReflect.Descriptor instead.
func (*BakerKeysEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{77}
}

func (x *BakerKeysEvent) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerKeysEvent) GetAccount() *AccountAddress {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *BakerKeysEvent) GetSignKey() *BakerSignatureVerifyKey {
	if x != nil {
		return x.SignKey
	}
	return nil
}

func (x *BakerKeysEvent) GetElectionKey() *BakerElectionVerifyKey {
	if x != nil {
		return x.ElectionKey
	}
	return nil
}

func (x *BakerKeysEvent) GetAggregationKey() *BakerAggregationVerifyKey {
	if x != nil {
		return x.AggregationKey
	}
	return nil
}

// A memo which can be included as part of a transfer. Max size is 256 bytes.
type Memo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Memo) Reset() {
	*x = Memo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memo) ProtoMessage() {}

func (x *Memo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memo.ProtoReflect.Descriptor instead.
func (*Memo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{78}
}

func (x *Memo) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type BakerStakeUpdatedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Affected baker.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// New stake.
	NewStake *Amount `protobuf:"bytes,2,opt,name=new_stake,json=newStake,proto3" json:"new_stake,omitempty"`
	// A boolean which indicates whether it increased
	// (`true`) or decreased (`false`).
	Increased bool `protobuf:"varint,3,opt,name=increased,proto3" json:"increased,omitempty"`
}

func (x *BakerStakeUpdatedData) Reset() {
	*x = BakerStakeUpdatedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerStakeUpdatedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerStakeUpdatedData) ProtoMessage() {}

func (x *BakerStakeUpdatedData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerStakeUpdatedData.ProtoReflect.Descriptor instead.
func (*BakerStakeUpdatedData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{79}
}

func (x *BakerStakeUpdatedData) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerStakeUpdatedData) GetNewStake() *Amount {
	if x != nil {
		return x.NewStake
	}
	return nil
}

func (x *BakerStakeUpdatedData) GetIncreased() bool {
	if x != nil {
		return x.Increased
	}
	return false
}

// Event generated when one or more encrypted amounts are consumed from the account.
type EncryptedAmountRemovedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The affected account.
	Account *AccountAddress `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The new self encrypted amount on the affected account.
	NewAmount *EncryptedAmount `protobuf:"bytes,2,opt,name=new_amount,json=newAmount,proto3" json:"new_amount,omitempty"`
	// The input encrypted amount that was removed.
	InputAmount *EncryptedAmount `protobuf:"bytes,3,opt,name=input_amount,json=inputAmount,proto3" json:"input_amount,omitempty"`
	// The index indicating which amounts were used.
	UpToIndex uint64 `protobuf:"varint,4,opt,name=up_to_index,json=upToIndex,proto3" json:"up_to_index,omitempty"`
}

func (x *EncryptedAmountRemovedEvent) Reset() {
	*x = EncryptedAmountRemovedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedAmountRemovedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedAmountRemovedEvent) ProtoMessage() {}

func (x *EncryptedAmountRemovedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedAmountRemovedEvent.ProtoReflect.Descriptor instead.
func (*EncryptedAmountRemovedEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{80}
}

func (x *EncryptedAmountRemovedEvent) GetAccount() *AccountAddress {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *EncryptedAmountRemovedEvent) GetNewAmount() *EncryptedAmount {
	if x != nil {
		return x.NewAmount
	}
	return nil
}

func (x *EncryptedAmountRemovedEvent) GetInputAmount() *EncryptedAmount {
	if x != nil {
		return x.InputAmount
	}
	return nil
}

func (x *EncryptedAmountRemovedEvent) GetUpToIndex() uint64 {
	if x != nil {
		return x.UpToIndex
	}
	return 0
}

// Event generated when an account receives a new encrypted amount.
type NewEncryptedAmountEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account onto which the amount was added.
	Receiver *AccountAddress `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The index the amount was assigned.
	NewIndex uint64 `protobuf:"varint,2,opt,name=new_index,json=newIndex,proto3" json:"new_index,omitempty"`
	// The encrypted amount that was added.
	EncryptedAmount *EncryptedAmount `protobuf:"bytes,3,opt,name=encrypted_amount,json=encryptedAmount,proto3" json:"encrypted_amount,omitempty"`
}

func (x *NewEncryptedAmountEvent) Reset() {
	*x = NewEncryptedAmountEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEncryptedAmountEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEncryptedAmountEvent) ProtoMessage() {}

func (x *NewEncryptedAmountEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEncryptedAmountEvent.ProtoReflect.Descriptor instead.
func (*NewEncryptedAmountEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{81}
}

func (x *NewEncryptedAmountEvent) GetReceiver() *AccountAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *NewEncryptedAmountEvent) GetNewIndex() uint64 {
	if x != nil {
		return x.NewIndex
	}
	return 0
}

func (x *NewEncryptedAmountEvent) GetEncryptedAmount() *EncryptedAmount {
	if x != nil {
		return x.EncryptedAmount
	}
	return nil
}

type EncryptedSelfAmountAddedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The affected account.
	Account *AccountAddress `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The new self encrypted amount of the account.
	NewAmount *EncryptedAmount `protobuf:"bytes,2,opt,name=new_amount,json=newAmount,proto3" json:"new_amount,omitempty"`
	// The amount that was transferred from public to encrypted balance.
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EncryptedSelfAmountAddedEvent) Reset() {
	*x = EncryptedSelfAmountAddedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedSelfAmountAddedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedSelfAmountAddedEvent) ProtoMessage() {}

func (x *EncryptedSelfAmountAddedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedSelfAmountAddedEvent.ProtoReflect.Descriptor instead.
func (*EncryptedSelfAmountAddedEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{82}
}

func (x *EncryptedSelfAmountAddedEvent) GetAccount() *AccountAddress {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *EncryptedSelfAmountAddedEvent) GetNewAmount() *EncryptedAmount {
	if x != nil {
		return x.NewAmount
	}
	return nil
}

func (x *EncryptedSelfAmountAddedEvent) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Data registered on the chain with a register data transaction.
type RegisteredData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RegisteredData) Reset() {
	*x = RegisteredData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredData) ProtoMessage() {}

func (x *RegisteredData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredData.ProtoReflect.Descriptor instead.
func (*RegisteredData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{83}
}

func (x *RegisteredData) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Events that may result from the ConfigureBaker transaction.
type BakerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*BakerEvent_BakerAdded_
	//	*BakerEvent_BakerRemoved
	//	*BakerEvent_BakerStakeIncreased_
	//	*BakerEvent_BakerStakeDecreased_
	//	*BakerEvent_BakerRestakeEarningsUpdated_
	//	*BakerEvent_BakerKeysUpdated
	//	*BakerEvent_BakerSetOpenStatus_
	//	*BakerEvent_BakerSetMetadataUrl_
	//	*BakerEvent_BakerSetTransactionFeeCommission_
	//	*BakerEvent_BakerSetBakingRewardCommission_
	//	*BakerEvent_BakerSetFinalizationRewardCommission_
	Event isBakerEvent_Event `protobuf_oneof:"event"`
}

func (x *BakerEvent) Reset() {
	*x = BakerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent) ProtoMessage() {}

func (x *BakerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent.ProtoReflect.Descriptor instead.
func (*BakerEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84}
}

func (m *BakerEvent) GetEvent() isBakerEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *BakerEvent) GetBakerAdded() *BakerEvent_BakerAdded {
	if x, ok := x.GetEvent().(*BakerEvent_BakerAdded_); ok {
		return x.BakerAdded
	}
	return nil
}

func (x *BakerEvent) GetBakerRemoved() *BakerId {
	if x, ok := x.GetEvent().(*BakerEvent_BakerRemoved); ok {
		return x.BakerRemoved
	}
	return nil
}

func (x *BakerEvent) GetBakerStakeIncreased() *BakerEvent_BakerStakeIncreased {
	if x, ok := x.GetEvent().(*BakerEvent_BakerStakeIncreased_); ok {
		return x.BakerStakeIncreased
	}
	return nil
}

func (x *BakerEvent) GetBakerStakeDecreased() *BakerEvent_BakerStakeDecreased {
	if x, ok := x.GetEvent().(*BakerEvent_BakerStakeDecreased_); ok {
		return x.BakerStakeDecreased
	}
	return nil
}

func (x *BakerEvent) GetBakerRestakeEarningsUpdated() *BakerEvent_BakerRestakeEarningsUpdated {
	if x, ok := x.GetEvent().(*BakerEvent_BakerRestakeEarningsUpdated_); ok {
		return x.BakerRestakeEarningsUpdated
	}
	return nil
}

func (x *BakerEvent) GetBakerKeysUpdated() *BakerKeysEvent {
	if x, ok := x.GetEvent().(*BakerEvent_BakerKeysUpdated); ok {
		return x.BakerKeysUpdated
	}
	return nil
}

func (x *BakerEvent) GetBakerSetOpenStatus() *BakerEvent_BakerSetOpenStatus {
	if x, ok := x.GetEvent().(*BakerEvent_BakerSetOpenStatus_); ok {
		return x.BakerSetOpenStatus
	}
	return nil
}

func (x *BakerEvent) GetBakerSetMetadataUrl() *BakerEvent_BakerSetMetadataUrl {
	if x, ok := x.GetEvent().(*BakerEvent_BakerSetMetadataUrl_); ok {
		return x.BakerSetMetadataUrl
	}
	return nil
}

func (x *BakerEvent) GetBakerSetTransactionFeeCommission() *BakerEvent_BakerSetTransactionFeeCommission {
	if x, ok := x.GetEvent().(*BakerEvent_BakerSetTransactionFeeCommission_); ok {
		return x.BakerSetTransactionFeeCommission
	}
	return nil
}

func (x *BakerEvent) GetBakerSetBakingRewardCommission() *BakerEvent_BakerSetBakingRewardCommission {
	if x, ok := x.GetEvent().(*BakerEvent_BakerSetBakingRewardCommission_); ok {
		return x.BakerSetBakingRewardCommission
	}
	return nil
}

func (x *BakerEvent) GetBakerSetFinalizationRewardCommission() *BakerEvent_BakerSetFinalizationRewardCommission {
	if x, ok := x.GetEvent().(*BakerEvent_BakerSetFinalizationRewardCommission_); ok {
		return x.BakerSetFinalizationRewardCommission
	}
	return nil
}

type isBakerEvent_Event interface {
	isBakerEvent_Event()
}

type BakerEvent_BakerAdded_ struct {
	// A baker was added.
	BakerAdded *BakerEvent_BakerAdded `protobuf:"bytes,1,opt,name=baker_added,json=bakerAdded,proto3,oneof"`
}

type BakerEvent_BakerRemoved struct {
	// A baker was removed.
	BakerRemoved *BakerId `protobuf:"bytes,2,opt,name=baker_removed,json=bakerRemoved,proto3,oneof"`
}

type BakerEvent_BakerStakeIncreased_ struct {
	// The baker's stake was increased.
	BakerStakeIncreased *BakerEvent_BakerStakeIncreased `protobuf:"bytes,3,opt,name=baker_stake_increased,json=bakerStakeIncreased,proto3,oneof"`
}

type BakerEvent_BakerStakeDecreased_ struct {
	// The baker's stake was decreased.
	BakerStakeDecreased *BakerEvent_BakerStakeDecreased `protobuf:"bytes,4,opt,name=baker_stake_decreased,json=bakerStakeDecreased,proto3,oneof"`
}

type BakerEvent_BakerRestakeEarningsUpdated_ struct {
	// The baker's setting for restaking earnings was updated.
	BakerRestakeEarningsUpdated *BakerEvent_BakerRestakeEarningsUpdated `protobuf:"bytes,5,opt,name=baker_restake_earnings_updated,json=bakerRestakeEarningsUpdated,proto3,oneof"`
}

type BakerEvent_BakerKeysUpdated struct {
	// Baker keys were updated.
	BakerKeysUpdated *BakerKeysEvent `protobuf:"bytes,6,opt,name=baker_keys_updated,json=bakerKeysUpdated,proto3,oneof"`
}

type BakerEvent_BakerSetOpenStatus_ struct {
	// The baker's open status was updated.
	BakerSetOpenStatus *BakerEvent_BakerSetOpenStatus `protobuf:"bytes,7,opt,name=baker_set_open_status,json=bakerSetOpenStatus,proto3,oneof"`
}

type BakerEvent_BakerSetMetadataUrl_ struct {
	// The baker's metadata URL was updated.
	BakerSetMetadataUrl *BakerEvent_BakerSetMetadataUrl `protobuf:"bytes,8,opt,name=baker_set_metadata_url,json=bakerSetMetadataUrl,proto3,oneof"`
}

type BakerEvent_BakerSetTransactionFeeCommission_ struct {
	// The baker's transaction fee commission was updated.
	BakerSetTransactionFeeCommission *BakerEvent_BakerSetTransactionFeeCommission `protobuf:"bytes,9,opt,name=baker_set_transaction_fee_commission,json=bakerSetTransactionFeeCommission,proto3,oneof"`
}

type BakerEvent_BakerSetBakingRewardCommission_ struct {
	// The baker's baking reward commission was updated.
	BakerSetBakingRewardCommission *BakerEvent_BakerSetBakingRewardCommission `protobuf:"bytes,10,opt,name=baker_set_baking_reward_commission,json=bakerSetBakingRewardCommission,proto3,oneof"`
}

type BakerEvent_BakerSetFinalizationRewardCommission_ struct {
	// The baker's finalization reward commission was updated.
	BakerSetFinalizationRewardCommission *BakerEvent_BakerSetFinalizationRewardCommission `protobuf:"bytes,11,opt,name=baker_set_finalization_reward_commission,json=bakerSetFinalizationRewardCommission,proto3,oneof"`
}

func (*BakerEvent_BakerAdded_) isBakerEvent_Event() {}

func (*BakerEvent_BakerRemoved) isBakerEvent_Event() {}

func (*BakerEvent_BakerStakeIncreased_) isBakerEvent_Event() {}

func (*BakerEvent_BakerStakeDecreased_) isBakerEvent_Event() {}

func (*BakerEvent_BakerRestakeEarningsUpdated_) isBakerEvent_Event() {}

func (*BakerEvent_BakerKeysUpdated) isBakerEvent_Event() {}

func (*BakerEvent_BakerSetOpenStatus_) isBakerEvent_Event() {}

func (*BakerEvent_BakerSetMetadataUrl_) isBakerEvent_Event() {}

func (*BakerEvent_BakerSetTransactionFeeCommission_) isBakerEvent_Event() {}

func (*BakerEvent_BakerSetBakingRewardCommission_) isBakerEvent_Event() {}

func (*BakerEvent_BakerSetFinalizationRewardCommission_) isBakerEvent_Event() {}

// The identifier for a delegator.
type DelegatorId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *AccountIndex `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelegatorId) Reset() {
	*x = DelegatorId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorId) ProtoMessage() {}

func (x *DelegatorId) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorId.ProtoReflect.Descriptor instead.
func (*DelegatorId) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{85}
}

func (x *DelegatorId) GetId() *AccountIndex {
	if x != nil {
		return x.Id
	}
	return nil
}

type DelegationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*DelegationEvent_DelegationStakeIncreased_
	//	*DelegationEvent_DelegationStakeDecreased_
	//	*DelegationEvent_DelegationSetRestakeEarnings_
	//	*DelegationEvent_DelegationSetDelegationTarget_
	//	*DelegationEvent_DelegationAdded
	//	*DelegationEvent_DelegationRemoved
	Event isDelegationEvent_Event `protobuf_oneof:"event"`
}

func (x *DelegationEvent) Reset() {
	*x = DelegationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationEvent) ProtoMessage() {}

func (x *DelegationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationEvent.ProtoReflect.Descriptor instead.
func (*DelegationEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{86}
}

func (m *DelegationEvent) GetEvent() isDelegationEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *DelegationEvent) GetDelegationStakeIncreased() *DelegationEvent_DelegationStakeIncreased {
	if x, ok := x.GetEvent().(*DelegationEvent_DelegationStakeIncreased_); ok {
		return x.DelegationStakeIncreased
	}
	return nil
}

func (x *DelegationEvent) GetDelegationStakeDecreased() *DelegationEvent_DelegationStakeDecreased {
	if x, ok := x.GetEvent().(*DelegationEvent_DelegationStakeDecreased_); ok {
		return x.DelegationStakeDecreased
	}
	return nil
}

func (x *DelegationEvent) GetDelegationSetRestakeEarnings() *DelegationEvent_DelegationSetRestakeEarnings {
	if x, ok := x.GetEvent().(*DelegationEvent_DelegationSetRestakeEarnings_); ok {
		return x.DelegationSetRestakeEarnings
	}
	return nil
}

func (x *DelegationEvent) GetDelegationSetDelegationTarget() *DelegationEvent_DelegationSetDelegationTarget {
	if x, ok := x.GetEvent().(*DelegationEvent_DelegationSetDelegationTarget_); ok {
		return x.DelegationSetDelegationTarget
	}
	return nil
}

func (x *DelegationEvent) GetDelegationAdded() *DelegatorId {
	if x, ok := x.GetEvent().(*DelegationEvent_DelegationAdded); ok {
		return x.DelegationAdded
	}
	return nil
}

func (x *DelegationEvent) GetDelegationRemoved() *DelegatorId {
	if x, ok := x.GetEvent().(*DelegationEvent_DelegationRemoved); ok {
		return x.DelegationRemoved
	}
	return nil
}

type isDelegationEvent_Event interface {
	isDelegationEvent_Event()
}

type DelegationEvent_DelegationStakeIncreased_ struct {
	// The delegator's stake increased.
	DelegationStakeIncreased *DelegationEvent_DelegationStakeIncreased `protobuf:"bytes,1,opt,name=delegation_stake_increased,json=delegationStakeIncreased,proto3,oneof"`
}

type DelegationEvent_DelegationStakeDecreased_ struct {
	// The delegator's stake decreased.
	DelegationStakeDecreased *DelegationEvent_DelegationStakeDecreased `protobuf:"bytes,2,opt,name=delegation_stake_decreased,json=delegationStakeDecreased,proto3,oneof"`
}

type DelegationEvent_DelegationSetRestakeEarnings_ struct {
	// The delegator's restaking setting was updated.
	DelegationSetRestakeEarnings *DelegationEvent_DelegationSetRestakeEarnings `protobuf:"bytes,3,opt,name=delegation_set_restake_earnings,json=delegationSetRestakeEarnings,proto3,oneof"`
}

type DelegationEvent_DelegationSetDelegationTarget_ struct {
	// The delegator's delegation target was updated.
	DelegationSetDelegationTarget *DelegationEvent_DelegationSetDelegationTarget `protobuf:"bytes,4,opt,name=delegation_set_delegation_target,json=delegationSetDelegationTarget,proto3,oneof"`
}

type DelegationEvent_DelegationAdded struct {
	// A delegator was added.
	DelegationAdded *DelegatorId `protobuf:"bytes,5,opt,name=delegation_added,json=delegationAdded,proto3,oneof"`
}

type DelegationEvent_DelegationRemoved struct {
	// A delegator was removed.
	DelegationRemoved *DelegatorId `protobuf:"bytes,6,opt,name=delegation_removed,json=delegationRemoved,proto3,oneof"`
}

func (*DelegationEvent_DelegationStakeIncreased_) isDelegationEvent_Event() {}

func (*DelegationEvent_DelegationStakeDecreased_) isDelegationEvent_Event() {}

func (*DelegationEvent_DelegationSetRestakeEarnings_) isDelegationEvent_Event() {}

func (*DelegationEvent_DelegationSetDelegationTarget_) isDelegationEvent_Event() {}

func (*DelegationEvent_DelegationAdded) isDelegationEvent_Event() {}

func (*DelegationEvent_DelegationRemoved) isDelegationEvent_Event() {}

// Effects of an account transaction. All variants except `None`
// correspond to a unique transaction that was successful.
type AccountTransactionEffects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effect:
	//	*AccountTransactionEffects_None_
	//	*AccountTransactionEffects_ModuleDeployed
	//	*AccountTransactionEffects_ContractInitialized
	//	*AccountTransactionEffects_ContractUpdateIssued_
	//	*AccountTransactionEffects_AccountTransfer_
	//	*AccountTransactionEffects_BakerAdded
	//	*AccountTransactionEffects_BakerRemoved
	//	*AccountTransactionEffects_BakerStakeUpdated_
	//	*AccountTransactionEffects_BakerRestakeEarningsUpdated
	//	*AccountTransactionEffects_BakerKeysUpdated
	//	*AccountTransactionEffects_EncryptedAmountTransferred_
	//	*AccountTransactionEffects_TransferredToEncrypted
	//	*AccountTransactionEffects_TransferredToPublic_
	//	*AccountTransactionEffects_TransferredWithSchedule_
	//	*AccountTransactionEffects_CredentialKeysUpdated
	//	*AccountTransactionEffects_CredentialsUpdated_
	//	*AccountTransactionEffects_DataRegistered
	//	*AccountTransactionEffects_BakerConfigured_
	//	*AccountTransactionEffects_DelegationConfigured_
	Effect isAccountTransactionEffects_Effect `protobuf_oneof:"effect"`
}

func (x *AccountTransactionEffects) Reset() {
	*x = AccountTransactionEffects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects) ProtoMessage() {}

func (x *AccountTransactionEffects) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87}
}

func (m *AccountTransactionEffects) GetEffect() isAccountTransactionEffects_Effect {
	if m != nil {
		return m.Effect
	}
	return nil
}

func (x *AccountTransactionEffects) GetNone() *AccountTransactionEffects_None {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_None_); ok {
		return x.None
	}
	return nil
}

func (x *AccountTransactionEffects) GetModuleDeployed() *ModuleRef {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_ModuleDeployed); ok {
		return x.ModuleDeployed
	}
	return nil
}

func (x *AccountTransactionEffects) GetContractInitialized() *ContractInitializedEvent {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_ContractInitialized); ok {
		return x.ContractInitialized
	}
	return nil
}

func (x *AccountTransactionEffects) GetContractUpdateIssued() *AccountTransactionEffects_ContractUpdateIssued {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_ContractUpdateIssued_); ok {
		return x.ContractUpdateIssued
	}
	return nil
}

func (x *AccountTransactionEffects) GetAccountTransfer() *AccountTransactionEffects_AccountTransfer {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_AccountTransfer_); ok {
		return x.AccountTransfer
	}
	return nil
}

func (x *AccountTransactionEffects) GetBakerAdded() *BakerEvent_BakerAdded {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_BakerAdded); ok {
		return x.BakerAdded
	}
	return nil
}

func (x *AccountTransactionEffects) GetBakerRemoved() *BakerId {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_BakerRemoved); ok {
		return x.BakerRemoved
	}
	return nil
}

func (x *AccountTransactionEffects) GetBakerStakeUpdated() *AccountTransactionEffects_BakerStakeUpdated {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_BakerStakeUpdated_); ok {
		return x.BakerStakeUpdated
	}
	return nil
}

func (x *AccountTransactionEffects) GetBakerRestakeEarningsUpdated() *BakerEvent_BakerRestakeEarningsUpdated {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_BakerRestakeEarningsUpdated); ok {
		return x.BakerRestakeEarningsUpdated
	}
	return nil
}

func (x *AccountTransactionEffects) GetBakerKeysUpdated() *BakerKeysEvent {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_BakerKeysUpdated); ok {
		return x.BakerKeysUpdated
	}
	return nil
}

func (x *AccountTransactionEffects) GetEncryptedAmountTransferred() *AccountTransactionEffects_EncryptedAmountTransferred {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_EncryptedAmountTransferred_); ok {
		return x.EncryptedAmountTransferred
	}
	return nil
}

func (x *AccountTransactionEffects) GetTransferredToEncrypted() *EncryptedSelfAmountAddedEvent {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_TransferredToEncrypted); ok {
		return x.TransferredToEncrypted
	}
	return nil
}

func (x *AccountTransactionEffects) GetTransferredToPublic() *AccountTransactionEffects_TransferredToPublic {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_TransferredToPublic_); ok {
		return x.TransferredToPublic
	}
	return nil
}

func (x *AccountTransactionEffects) GetTransferredWithSchedule() *AccountTransactionEffects_TransferredWithSchedule {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_TransferredWithSchedule_); ok {
		return x.TransferredWithSchedule
	}
	return nil
}

func (x *AccountTransactionEffects) GetCredentialKeysUpdated() *CredentialRegistrationId {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_CredentialKeysUpdated); ok {
		return x.CredentialKeysUpdated
	}
	return nil
}

func (x *AccountTransactionEffects) GetCredentialsUpdated() *AccountTransactionEffects_CredentialsUpdated {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_CredentialsUpdated_); ok {
		return x.CredentialsUpdated
	}
	return nil
}

func (x *AccountTransactionEffects) GetDataRegistered() *RegisteredData {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_DataRegistered); ok {
		return x.DataRegistered
	}
	return nil
}

func (x *AccountTransactionEffects) GetBakerConfigured() *AccountTransactionEffects_BakerConfigured {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_BakerConfigured_); ok {
		return x.BakerConfigured
	}
	return nil
}

func (x *AccountTransactionEffects) GetDelegationConfigured() *AccountTransactionEffects_DelegationConfigured {
	if x, ok := x.GetEffect().(*AccountTransactionEffects_DelegationConfigured_); ok {
		return x.DelegationConfigured
	}
	return nil
}

type isAccountTransactionEffects_Effect interface {
	isAccountTransactionEffects_Effect()
}

type AccountTransactionEffects_None_ struct {
	// No effects other than payment from this transaction.
	// The rejection reason indicates why the transaction failed.
	None *AccountTransactionEffects_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type AccountTransactionEffects_ModuleDeployed struct {
	// A smart contract module with the attached reference was deployed.
	ModuleDeployed *ModuleRef `protobuf:"bytes,2,opt,name=module_deployed,json=moduleDeployed,proto3,oneof"`
}

type AccountTransactionEffects_ContractInitialized struct {
	// A smart contract was initialized.
	ContractInitialized *ContractInitializedEvent `protobuf:"bytes,3,opt,name=contract_initialized,json=contractInitialized,proto3,oneof"`
}

type AccountTransactionEffects_ContractUpdateIssued_ struct {
	// A smart contract instance updated was issued.
	ContractUpdateIssued *AccountTransactionEffects_ContractUpdateIssued `protobuf:"bytes,4,opt,name=contract_update_issued,json=contractUpdateIssued,proto3,oneof"`
}

type AccountTransactionEffects_AccountTransfer_ struct {
	// A simple account to account transfer occurred.
	AccountTransfer *AccountTransactionEffects_AccountTransfer `protobuf:"bytes,5,opt,name=account_transfer,json=accountTransfer,proto3,oneof"`
}

type AccountTransactionEffects_BakerAdded struct {
	// A baker was added.
	BakerAdded *BakerEvent_BakerAdded `protobuf:"bytes,6,opt,name=baker_added,json=bakerAdded,proto3,oneof"`
}

type AccountTransactionEffects_BakerRemoved struct {
	// A baker was removed.
	BakerRemoved *BakerId `protobuf:"bytes,7,opt,name=baker_removed,json=bakerRemoved,proto3,oneof"`
}

type AccountTransactionEffects_BakerStakeUpdated_ struct {
	// A baker's stake was updated.
	BakerStakeUpdated *AccountTransactionEffects_BakerStakeUpdated `protobuf:"bytes,8,opt,name=baker_stake_updated,json=bakerStakeUpdated,proto3,oneof"`
}

type AccountTransactionEffects_BakerRestakeEarningsUpdated struct {
	// A baker's restake earnings setting was updated.
	BakerRestakeEarningsUpdated *BakerEvent_BakerRestakeEarningsUpdated `protobuf:"bytes,9,opt,name=baker_restake_earnings_updated,json=bakerRestakeEarningsUpdated,proto3,oneof"`
}

type AccountTransactionEffects_BakerKeysUpdated struct {
	// A baker's keys were updated.
	BakerKeysUpdated *BakerKeysEvent `protobuf:"bytes,10,opt,name=baker_keys_updated,json=bakerKeysUpdated,proto3,oneof"`
}

type AccountTransactionEffects_EncryptedAmountTransferred_ struct {
	// An encrypted amount was transferred.
	EncryptedAmountTransferred *AccountTransactionEffects_EncryptedAmountTransferred `protobuf:"bytes,11,opt,name=encrypted_amount_transferred,json=encryptedAmountTransferred,proto3,oneof"`
}

type AccountTransactionEffects_TransferredToEncrypted struct {
	// An account transferred part of its public balance to its encrypted
	// balance.
	TransferredToEncrypted *EncryptedSelfAmountAddedEvent `protobuf:"bytes,12,opt,name=transferred_to_encrypted,json=transferredToEncrypted,proto3,oneof"`
}

type AccountTransactionEffects_TransferredToPublic_ struct {
	// An account transferred part of its encrypted balance to its public balance.
	TransferredToPublic *AccountTransactionEffects_TransferredToPublic `protobuf:"bytes,13,opt,name=transferred_to_public,json=transferredToPublic,proto3,oneof"`
}

type AccountTransactionEffects_TransferredWithSchedule_ struct {
	// A transfer with a release schedule was made.
	TransferredWithSchedule *AccountTransactionEffects_TransferredWithSchedule `protobuf:"bytes,14,opt,name=transferred_with_schedule,json=transferredWithSchedule,proto3,oneof"`
}

type AccountTransactionEffects_CredentialKeysUpdated struct {
	// Keys of a specific credential were updated.
	CredentialKeysUpdated *CredentialRegistrationId `protobuf:"bytes,15,opt,name=credential_keys_updated,json=credentialKeysUpdated,proto3,oneof"`
}

type AccountTransactionEffects_CredentialsUpdated_ struct {
	// Account credentials were updated.
	CredentialsUpdated *AccountTransactionEffects_CredentialsUpdated `protobuf:"bytes,16,opt,name=credentials_updated,json=credentialsUpdated,proto3,oneof"`
}

type AccountTransactionEffects_DataRegistered struct {
	// Some data was registered on the chain.
	DataRegistered *RegisteredData `protobuf:"bytes,17,opt,name=data_registered,json=dataRegistered,proto3,oneof"`
}

type AccountTransactionEffects_BakerConfigured_ struct {
	// A baker was configured. The details of what happened are contained in a list of BakerEvents.
	BakerConfigured *AccountTransactionEffects_BakerConfigured `protobuf:"bytes,18,opt,name=baker_configured,json=bakerConfigured,proto3,oneof"`
}

type AccountTransactionEffects_DelegationConfigured_ struct {
	// A delegator was configured. The details of what happened are contained in a list of DelegatorEvents.
	DelegationConfigured *AccountTransactionEffects_DelegationConfigured `protobuf:"bytes,19,opt,name=delegation_configured,json=delegationConfigured,proto3,oneof"`
}

func (*AccountTransactionEffects_None_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_ModuleDeployed) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_ContractInitialized) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_ContractUpdateIssued_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_AccountTransfer_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_BakerAdded) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_BakerRemoved) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_BakerStakeUpdated_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_BakerRestakeEarningsUpdated) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_BakerKeysUpdated) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_EncryptedAmountTransferred_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_TransferredToEncrypted) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_TransferredToPublic_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_TransferredWithSchedule_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_CredentialKeysUpdated) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_CredentialsUpdated_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_DataRegistered) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_BakerConfigured_) isAccountTransactionEffects_Effect() {}

func (*AccountTransactionEffects_DelegationConfigured_) isAccountTransactionEffects_Effect() {}

// Election difficulty parameter.
type ElectionDifficulty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AmountFraction `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElectionDifficulty) Reset() {
	*x = ElectionDifficulty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionDifficulty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionDifficulty) ProtoMessage() {}

func (x *ElectionDifficulty) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionDifficulty.ProtoReflect.Descriptor instead.
func (*ElectionDifficulty) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{88}
}

func (x *ElectionDifficulty) GetValue() *AmountFraction {
	if x != nil {
		return x.Value
	}
	return nil
}

// Parameters that determine timeouts in the consensus protocol used from protocol version 6.
type TimeoutParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base value for triggering a timeout
	TimeoutBase *Duration `protobuf:"bytes,1,opt,name=timeout_base,json=timeoutBase,proto3" json:"timeout_base,omitempty"`
	// Factor for increasing the timeout. Must be greater than 1.
	TimeoutIncrease *Ratio `protobuf:"bytes,2,opt,name=timeout_increase,json=timeoutIncrease,proto3" json:"timeout_increase,omitempty"`
	// Factor for decreasing the timeout. Must be between 0 and 1.
	TimeoutDecrease *Ratio `protobuf:"bytes,3,opt,name=timeout_decrease,json=timeoutDecrease,proto3" json:"timeout_decrease,omitempty"`
}

func (x *TimeoutParameters) Reset() {
	*x = TimeoutParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutParameters) ProtoMessage() {}

func (x *TimeoutParameters) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutParameters.ProtoReflect.Descriptor instead.
func (*TimeoutParameters) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{89}
}

func (x *TimeoutParameters) GetTimeoutBase() *Duration {
	if x != nil {
		return x.TimeoutBase
	}
	return nil
}

func (x *TimeoutParameters) GetTimeoutIncrease() *Ratio {
	if x != nil {
		return x.TimeoutIncrease
	}
	return nil
}

func (x *TimeoutParameters) GetTimeoutDecrease() *Ratio {
	if x != nil {
		return x.TimeoutDecrease
	}
	return nil
}

// Finalization committee parameters used from protocol version 6
type FinalizationCommitteeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum size of a finalization committee before `finalizer_relative_stake_threshold` takes effect.
	MinimumFinalizers uint32 `protobuf:"varint,1,opt,name=minimum_finalizers,json=minimumFinalizers,proto3" json:"minimum_finalizers,omitempty"`
	// The maximum size of a finalization committee.
	MaximumFinalizers uint32 `protobuf:"varint,2,opt,name=maximum_finalizers,json=maximumFinalizers,proto3" json:"maximum_finalizers,omitempty"`
	// The threshold for determining the stake required for being eligible the finalization committee.
	// The amount is given by `total stake in pools * finalizer_relative_stake_threshold`
	FinalizerRelativeStakeThreshold *AmountFraction `protobuf:"bytes,3,opt,name=finalizer_relative_stake_threshold,json=finalizerRelativeStakeThreshold,proto3" json:"finalizer_relative_stake_threshold,omitempty"`
}

func (x *FinalizationCommitteeParameters) Reset() {
	*x = FinalizationCommitteeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizationCommitteeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizationCommitteeParameters) ProtoMessage() {}

func (x *FinalizationCommitteeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizationCommitteeParameters.ProtoReflect.Descriptor instead.
func (*FinalizationCommitteeParameters) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{90}
}

func (x *FinalizationCommitteeParameters) GetMinimumFinalizers() uint32 {
	if x != nil {
		return x.MinimumFinalizers
	}
	return 0
}

func (x *FinalizationCommitteeParameters) GetMaximumFinalizers() uint32 {
	if x != nil {
		return x.MaximumFinalizers
	}
	return 0
}

func (x *FinalizationCommitteeParameters) GetFinalizerRelativeStakeThreshold() *AmountFraction {
	if x != nil {
		return x.FinalizerRelativeStakeThreshold
	}
	return nil
}

// Parameters for the consensus protocol used from protocol version 6.
type ConsensusParametersV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters controlling round timeouts.
	TimeoutParameters *TimeoutParameters `protobuf:"bytes,1,opt,name=timeout_parameters,json=timeoutParameters,proto3" json:"timeout_parameters,omitempty"`
	// Minimum time interval between blocks.
	MinBlockTime *Duration `protobuf:"bytes,2,opt,name=min_block_time,json=minBlockTime,proto3" json:"min_block_time,omitempty"`
	// Maximum energy allowed per block.
	BlockEnergyLimit *Energy `protobuf:"bytes,3,opt,name=block_energy_limit,json=blockEnergyLimit,proto3" json:"block_energy_limit,omitempty"`
}

func (x *ConsensusParametersV1) Reset() {
	*x = ConsensusParametersV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusParametersV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusParametersV1) ProtoMessage() {}

func (x *ConsensusParametersV1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusParametersV1.ProtoReflect.Descriptor instead.
func (*ConsensusParametersV1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{91}
}

func (x *ConsensusParametersV1) GetTimeoutParameters() *TimeoutParameters {
	if x != nil {
		return x.TimeoutParameters
	}
	return nil
}

func (x *ConsensusParametersV1) GetMinBlockTime() *Duration {
	if x != nil {
		return x.MinBlockTime
	}
	return nil
}

func (x *ConsensusParametersV1) GetBlockEnergyLimit() *Energy {
	if x != nil {
		return x.BlockEnergyLimit
	}
	return nil
}

// Represents an exchange rate.
type ExchangeRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Ratio `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExchangeRate) Reset() {
	*x = ExchangeRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRate) ProtoMessage() {}

func (x *ExchangeRate) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRate.ProtoReflect.Descriptor instead.
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{92}
}

func (x *ExchangeRate) GetValue() *Ratio {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a ratio, i.e., 'numerator / denominator'.
type Ratio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The numerator.
	Numerator uint64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// The denominator.
	Denominator uint64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *Ratio) Reset() {
	*x = Ratio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratio) ProtoMessage() {}

func (x *Ratio) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratio.ProtoReflect.Descriptor instead.
func (*Ratio) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{93}
}

func (x *Ratio) GetNumerator() uint64 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *Ratio) GetDenominator() uint64 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

// A public key used for chain updates.
type UpdatePublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdatePublicKey) Reset() {
	*x = UpdatePublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicKey) ProtoMessage() {}

func (x *UpdatePublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicKey.ProtoReflect.Descriptor instead.
func (*UpdatePublicKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{94}
}

func (x *UpdatePublicKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// The threshold for how many UpdatePublicKeys are need to make a certain chain update.
type UpdateKeysThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is ensured to be within between 1 and 2^16.
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateKeysThreshold) Reset() {
	*x = UpdateKeysThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKeysThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKeysThreshold) ProtoMessage() {}

func (x *UpdateKeysThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKeysThreshold.ProtoReflect.Descriptor instead.
func (*UpdateKeysThreshold) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{95}
}

func (x *UpdateKeysThreshold) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Index of a key in an authorizations update payload.
type UpdateKeysIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateKeysIndex) Reset() {
	*x = UpdateKeysIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKeysIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKeysIndex) ProtoMessage() {}

func (x *UpdateKeysIndex) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKeysIndex.ProtoReflect.Descriptor instead.
func (*UpdateKeysIndex) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{96}
}

func (x *UpdateKeysIndex) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Represents root or level 1 keys.
type HigherLevelKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The keys.
	Keys []*UpdatePublicKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// The number of keys needed to make a chain update.
	Threshold *UpdateKeysThreshold `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *HigherLevelKeys) Reset() {
	*x = HigherLevelKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HigherLevelKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HigherLevelKeys) ProtoMessage() {}

func (x *HigherLevelKeys) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HigherLevelKeys.ProtoReflect.Descriptor instead.
func (*HigherLevelKeys) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{97}
}

func (x *HigherLevelKeys) GetKeys() []*UpdatePublicKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *HigherLevelKeys) GetThreshold() *UpdateKeysThreshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

// An access structure which specifies which UpdatePublicKeys in a HigherLevelKeys that are allowed
// to make chain update of a specific type. The threshold defines the minimum number of allowed keys needed
// to make the actual update.
type AccessStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique indexes into the set of keys in AuthorizationV0.
	AccessPublicKeys []*UpdateKeysIndex `protobuf:"bytes,1,rep,name=access_public_keys,json=accessPublicKeys,proto3" json:"access_public_keys,omitempty"`
	// Number of keys requred to authorize an update.
	AccessThreshold *UpdateKeysThreshold `protobuf:"bytes,2,opt,name=access_threshold,json=accessThreshold,proto3" json:"access_threshold,omitempty"`
}

func (x *AccessStructure) Reset() {
	*x = AccessStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessStructure) ProtoMessage() {}

func (x *AccessStructure) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessStructure.ProtoReflect.Descriptor instead.
func (*AccessStructure) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{98}
}

func (x *AccessStructure) GetAccessPublicKeys() []*UpdateKeysIndex {
	if x != nil {
		return x.AccessPublicKeys
	}
	return nil
}

func (x *AccessStructure) GetAccessThreshold() *UpdateKeysThreshold {
	if x != nil {
		return x.AccessThreshold
	}
	return nil
}

// The set of keys authorized for chain updates, together with access structures
// determining which keys are authorized for which update types.
// This is the payload of an update to authorization.
type AuthorizationsV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of keys authorized for chain updates.
	Keys []*UpdatePublicKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// New emergency keys.
	Emergency *AccessStructure `protobuf:"bytes,2,opt,name=emergency,proto3" json:"emergency,omitempty"`
	// New protocol update keys.
	Protocol *AccessStructure `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Access structure for updating the consensus parameters.
	// Previously, this was the election difficulty.
	ParameterConsensus *AccessStructure `protobuf:"bytes,4,opt,name=parameter_consensus,json=parameterConsensus,proto3" json:"parameter_consensus,omitempty"`
	// Access structure for updating the euro per energy.
	ParameterEuroPerEnergy *AccessStructure `protobuf:"bytes,5,opt,name=parameter_euro_per_energy,json=parameterEuroPerEnergy,proto3" json:"parameter_euro_per_energy,omitempty"`
	// Access structure for updating the micro CCD per euro.
	ParameterMicro_CCDPerEuro *AccessStructure `protobuf:"bytes,6,opt,name=parameter_micro_CCD_per_euro,json=parameterMicroCCDPerEuro,proto3" json:"parameter_micro_CCD_per_euro,omitempty"`
	// Access structure for updating the foundation account.
	ParameterFoundationAccount *AccessStructure `protobuf:"bytes,7,opt,name=parameter_foundation_account,json=parameterFoundationAccount,proto3" json:"parameter_foundation_account,omitempty"`
	// Access structure for updating the mint distribution.
	ParameterMintDistribution *AccessStructure `protobuf:"bytes,8,opt,name=parameter_mint_distribution,json=parameterMintDistribution,proto3" json:"parameter_mint_distribution,omitempty"`
	// Access structure for updating the transaction fee distribution.
	ParameterTransactionFeeDistribution *AccessStructure `protobuf:"bytes,9,opt,name=parameter_transaction_fee_distribution,json=parameterTransactionFeeDistribution,proto3" json:"parameter_transaction_fee_distribution,omitempty"`
	// Access structure for updating the gas rewards.
	ParameterGasRewards *AccessStructure `protobuf:"bytes,10,opt,name=parameter_gas_rewards,json=parameterGasRewards,proto3" json:"parameter_gas_rewards,omitempty"`
	// Access structure for updating the pool parameters. For V0 this is only
	// the baker stake threshold, for V1 there are more.
	PoolParameters *AccessStructure `protobuf:"bytes,11,opt,name=pool_parameters,json=poolParameters,proto3" json:"pool_parameters,omitempty"`
	// Access structure for adding new anonymity revokers.
	AddAnonymityRevoker *AccessStructure `protobuf:"bytes,12,opt,name=add_anonymity_revoker,json=addAnonymityRevoker,proto3" json:"add_anonymity_revoker,omitempty"`
	// Access structure for adding new identity providers.
	AddIdentityProvider *AccessStructure `protobuf:"bytes,13,opt,name=add_identity_provider,json=addIdentityProvider,proto3" json:"add_identity_provider,omitempty"`
}

func (x *AuthorizationsV0) Reset() {
	*x = AuthorizationsV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationsV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationsV0) ProtoMessage() {}

func (x *AuthorizationsV0) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationsV0.ProtoReflect.Descriptor instead.
func (*AuthorizationsV0) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{99}
}

func (x *AuthorizationsV0) GetKeys() []*UpdatePublicKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AuthorizationsV0) GetEmergency() *AccessStructure {
	if x != nil {
		return x.Emergency
	}
	return nil
}

func (x *AuthorizationsV0) GetProtocol() *AccessStructure {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *AuthorizationsV0) GetParameterConsensus() *AccessStructure {
	if x != nil {
		return x.ParameterConsensus
	}
	return nil
}

func (x *AuthorizationsV0) GetParameterEuroPerEnergy() *AccessStructure {
	if x != nil {
		return x.ParameterEuroPerEnergy
	}
	return nil
}

func (x *AuthorizationsV0) GetParameterMicro_CCDPerEuro() *AccessStructure {
	if x != nil {
		return x.ParameterMicro_CCDPerEuro
	}
	return nil
}

func (x *AuthorizationsV0) GetParameterFoundationAccount() *AccessStructure {
	if x != nil {
		return x.ParameterFoundationAccount
	}
	return nil
}

func (x *AuthorizationsV0) GetParameterMintDistribution() *AccessStructure {
	if x != nil {
		return x.ParameterMintDistribution
	}
	return nil
}

func (x *AuthorizationsV0) GetParameterTransactionFeeDistribution() *AccessStructure {
	if x != nil {
		return x.ParameterTransactionFeeDistribution
	}
	return nil
}

func (x *AuthorizationsV0) GetParameterGasRewards() *AccessStructure {
	if x != nil {
		return x.ParameterGasRewards
	}
	return nil
}

func (x *AuthorizationsV0) GetPoolParameters() *AccessStructure {
	if x != nil {
		return x.PoolParameters
	}
	return nil
}

func (x *AuthorizationsV0) GetAddAnonymityRevoker() *AccessStructure {
	if x != nil {
		return x.AddAnonymityRevoker
	}
	return nil
}

func (x *AuthorizationsV0) GetAddIdentityProvider() *AccessStructure {
	if x != nil {
		return x.AddIdentityProvider
	}
	return nil
}

// The set of keys authorized for chain updates, together with access structures
// determining which keys are authorized for which update types.
// This is the payload of an update to authorization.
type AuthorizationsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V0 *AuthorizationsV0 `protobuf:"bytes,1,opt,name=v0,proto3" json:"v0,omitempty"`
	// Access structure for updating the cooldown periods related to baking and delegation.
	ParameterCooldown *AccessStructure `protobuf:"bytes,2,opt,name=parameter_cooldown,json=parameterCooldown,proto3" json:"parameter_cooldown,omitempty"`
	// Access structure for updating the length of the reward period.
	ParameterTime *AccessStructure `protobuf:"bytes,3,opt,name=parameter_time,json=parameterTime,proto3" json:"parameter_time,omitempty"`
}

func (x *AuthorizationsV1) Reset() {
	*x = AuthorizationsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationsV1) ProtoMessage() {}

func (x *AuthorizationsV1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationsV1.ProtoReflect.Descriptor instead.
func (*AuthorizationsV1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{100}
}

func (x *AuthorizationsV1) GetV0() *AuthorizationsV0 {
	if x != nil {
		return x.V0
	}
	return nil
}

func (x *AuthorizationsV1) GetParameterCooldown() *AccessStructure {
	if x != nil {
		return x.ParameterCooldown
	}
	return nil
}

func (x *AuthorizationsV1) GetParameterTime() *AccessStructure {
	if x != nil {
		return x.ParameterTime
	}
	return nil
}

// Description either of an anonymity revoker or identity provider.
// Metadata that should be visible on the chain.
type Description struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A link to more information about the anonymity revoker or identity provider.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// A free form description of the revoker or provider.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Description) Reset() {
	*x = Description{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Description) ProtoMessage() {}

func (x *Description) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Description.ProtoReflect.Descriptor instead.
func (*Description) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{101}
}

func (x *Description) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Description) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Description) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Information on a single anonymity revoker help by the identity provider.
// Typically an identity provider will hold more than one.
type ArInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the anonymity revoker.
	Identity *ArInfo_ArIdentity `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Description of the anonymity revoker.
	Description *Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Elgamal encryption key of the anonymity revoker.
	PublicKey *ArInfo_ArPublicKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *ArInfo) Reset() {
	*x = ArInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArInfo) ProtoMessage() {}

func (x *ArInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArInfo.ProtoReflect.Descriptor instead.
func (*ArInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{102}
}

func (x *ArInfo) GetIdentity() *ArInfo_ArIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ArInfo) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ArInfo) GetPublicKey() *ArInfo_ArPublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// A succinct identifier of an identity provider on the chain.
// In credential deployments, and other interactions with the chain this is
// used to identify which identity provider is meant.
type IpIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IpIdentity) Reset() {
	*x = IpIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIdentity) ProtoMessage() {}

func (x *IpIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIdentity.ProtoReflect.Descriptor instead.
func (*IpIdentity) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{103}
}

func (x *IpIdentity) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Public information about an identity provider.
type IpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the identity provider.
	Identity *IpIdentity `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Description of the identity provider.
	Description *Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Pointcheval-Sanders public key of the identity provider.
	VerifyKey *IpInfo_IpVerifyKey `protobuf:"bytes,3,opt,name=verify_key,json=verifyKey,proto3" json:"verify_key,omitempty"`
	// Ed25519 public key of the identity provider.
	CdiVerifyKey *IpInfo_IpCdiVerifyKey `protobuf:"bytes,4,opt,name=cdi_verify_key,json=cdiVerifyKey,proto3" json:"cdi_verify_key,omitempty"`
}

func (x *IpInfo) Reset() {
	*x = IpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpInfo) ProtoMessage() {}

func (x *IpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpInfo.ProtoReflect.Descriptor instead.
func (*IpInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{104}
}

func (x *IpInfo) GetIdentity() *IpIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *IpInfo) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *IpInfo) GetVerifyKey() *IpInfo_IpVerifyKey {
	if x != nil {
		return x.VerifyKey
	}
	return nil
}

func (x *IpInfo) GetCdiVerifyKey() *IpInfo_IpCdiVerifyKey {
	if x != nil {
		return x.CdiVerifyKey
	}
	return nil
}

// A duration in seconds.
type DurationSeconds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DurationSeconds) Reset() {
	*x = DurationSeconds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationSeconds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationSeconds) ProtoMessage() {}

func (x *DurationSeconds) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationSeconds.ProtoReflect.Descriptor instead.
func (*DurationSeconds) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{105}
}

func (x *DurationSeconds) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Inclusive range of amount fractions.
type InclusiveRangeAmountFraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min  *AmountFraction `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max_ *AmountFraction `protobuf:"bytes,2,opt,name=max_,json=max,proto3" json:"max_,omitempty"`
}

func (x *InclusiveRangeAmountFraction) Reset() {
	*x = InclusiveRangeAmountFraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InclusiveRangeAmountFraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InclusiveRangeAmountFraction) ProtoMessage() {}

func (x *InclusiveRangeAmountFraction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InclusiveRangeAmountFraction.ProtoReflect.Descriptor instead.
func (*InclusiveRangeAmountFraction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{106}
}

func (x *InclusiveRangeAmountFraction) GetMin() *AmountFraction {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *InclusiveRangeAmountFraction) GetMax_() *AmountFraction {
	if x != nil {
		return x.Max_
	}
	return nil
}

// Ranges of allowed commission values that pools may choose from.
type CommissionRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range of allowed finalization commissions.
	Finalization *InclusiveRangeAmountFraction `protobuf:"bytes,1,opt,name=finalization,proto3" json:"finalization,omitempty"`
	// The range of allowed baker commissions.
	Baking *InclusiveRangeAmountFraction `protobuf:"bytes,2,opt,name=baking,proto3" json:"baking,omitempty"`
	// The range of allowed transaction commissions.
	Transaction *InclusiveRangeAmountFraction `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *CommissionRanges) Reset() {
	*x = CommissionRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommissionRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionRanges) ProtoMessage() {}

func (x *CommissionRanges) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommissionRanges.ProtoReflect.Descriptor instead.
func (*CommissionRanges) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{107}
}

func (x *CommissionRanges) GetFinalization() *InclusiveRangeAmountFraction {
	if x != nil {
		return x.Finalization
	}
	return nil
}

func (x *CommissionRanges) GetBaking() *InclusiveRangeAmountFraction {
	if x != nil {
		return x.Baking
	}
	return nil
}

func (x *CommissionRanges) GetTransaction() *InclusiveRangeAmountFraction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// A bound on the relative share of the total staked capital that a baker can
// have as its stake. This is required to be greater than 0.
type CapitalBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AmountFraction `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CapitalBound) Reset() {
	*x = CapitalBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapitalBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapitalBound) ProtoMessage() {}

func (x *CapitalBound) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapitalBound.ProtoReflect.Descriptor instead.
func (*CapitalBound) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{108}
}

func (x *CapitalBound) GetValue() *AmountFraction {
	if x != nil {
		return x.Value
	}
	return nil
}

// A leverage factor.
type LeverageFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Ratio `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LeverageFactor) Reset() {
	*x = LeverageFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeverageFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeverageFactor) ProtoMessage() {}

func (x *LeverageFactor) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeverageFactor.ProtoReflect.Descriptor instead.
func (*LeverageFactor) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{109}
}

func (x *LeverageFactor) GetValue() *Ratio {
	if x != nil {
		return x.Value
	}
	return nil
}

// A chain epoch.
type Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{110}
}

func (x *Epoch) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Length of a reward period in epochs.
// Must always be a strictly positive number.
type RewardPeriodLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Epoch `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RewardPeriodLength) Reset() {
	*x = RewardPeriodLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardPeriodLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardPeriodLength) ProtoMessage() {}

func (x *RewardPeriodLength) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardPeriodLength.ProtoReflect.Descriptor instead.
func (*RewardPeriodLength) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{111}
}

func (x *RewardPeriodLength) GetValue() *Epoch {
	if x != nil {
		return x.Value
	}
	return nil
}

// A minting rate of CCD.
// The value is `mantissa * 10^(-exponent)`.
type MintRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mantissa uint32 `protobuf:"varint,1,opt,name=mantissa,proto3" json:"mantissa,omitempty"`
	// This will never exceed 255 and can thus be stored in a single byte.
	Exponent uint32 `protobuf:"varint,2,opt,name=exponent,proto3" json:"exponent,omitempty"`
}

func (x *MintRate) Reset() {
	*x = MintRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintRate) ProtoMessage() {}

func (x *MintRate) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintRate.ProtoReflect.Descriptor instead.
func (*MintRate) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{112}
}

func (x *MintRate) GetMantissa() uint32 {
	if x != nil {
		return x.Mantissa
	}
	return 0
}

func (x *MintRate) GetExponent() uint32 {
	if x != nil {
		return x.Exponent
	}
	return 0
}

type CooldownParametersCpv1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of seconds that pool owners must cooldown
	// when reducing their equity capital or closing the pool.
	PoolOwnerCooldown *DurationSeconds `protobuf:"bytes,1,opt,name=pool_owner_cooldown,json=poolOwnerCooldown,proto3" json:"pool_owner_cooldown,omitempty"`
	// Number of seconds that a delegator must cooldown
	// when reducing their delegated stake.
	DelegatorCooldown *DurationSeconds `protobuf:"bytes,2,opt,name=delegator_cooldown,json=delegatorCooldown,proto3" json:"delegator_cooldown,omitempty"`
}

func (x *CooldownParametersCpv1) Reset() {
	*x = CooldownParametersCpv1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CooldownParametersCpv1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CooldownParametersCpv1) ProtoMessage() {}

func (x *CooldownParametersCpv1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CooldownParametersCpv1.ProtoReflect.Descriptor instead.
func (*CooldownParametersCpv1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{113}
}

func (x *CooldownParametersCpv1) GetPoolOwnerCooldown() *DurationSeconds {
	if x != nil {
		return x.PoolOwnerCooldown
	}
	return nil
}

func (x *CooldownParametersCpv1) GetDelegatorCooldown() *DurationSeconds {
	if x != nil {
		return x.DelegatorCooldown
	}
	return nil
}

// Parameters related to staking pools.
type PoolParametersCpv1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fraction of finalization rewards charged by the passive delegation.
	PassiveFinalizationCommission *AmountFraction `protobuf:"bytes,1,opt,name=passive_finalization_commission,json=passiveFinalizationCommission,proto3" json:"passive_finalization_commission,omitempty"`
	// Fraction of baking rewards charged by the passive delegation.
	PassiveBakingCommission *AmountFraction `protobuf:"bytes,2,opt,name=passive_baking_commission,json=passiveBakingCommission,proto3" json:"passive_baking_commission,omitempty"`
	// Fraction of transaction rewards charged by the L-pool.
	PassiveTransactionCommission *AmountFraction `protobuf:"bytes,3,opt,name=passive_transaction_commission,json=passiveTransactionCommission,proto3" json:"passive_transaction_commission,omitempty"`
	// Bounds on the commission rates that may be charged by bakers.
	CommissionBounds *CommissionRanges `protobuf:"bytes,4,opt,name=commission_bounds,json=commissionBounds,proto3" json:"commission_bounds,omitempty"`
	// Minimum equity capital required for a new baker.
	MinimumEquityCapital *Amount `protobuf:"bytes,5,opt,name=minimum_equity_capital,json=minimumEquityCapital,proto3" json:"minimum_equity_capital,omitempty"`
	// Maximum fraction of the total staked capital of that a new baker can
	// have.
	CapitalBound *CapitalBound `protobuf:"bytes,6,opt,name=capital_bound,json=capitalBound,proto3" json:"capital_bound,omitempty"`
	// The maximum leverage that a baker can have as a ratio of total stake
	// to equity capital.
	LeverageBound *LeverageFactor `protobuf:"bytes,7,opt,name=leverage_bound,json=leverageBound,proto3" json:"leverage_bound,omitempty"`
}

func (x *PoolParametersCpv1) Reset() {
	*x = PoolParametersCpv1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolParametersCpv1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolParametersCpv1) ProtoMessage() {}

func (x *PoolParametersCpv1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolParametersCpv1.ProtoReflect.Descriptor instead.
func (*PoolParametersCpv1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{114}
}

func (x *PoolParametersCpv1) GetPassiveFinalizationCommission() *AmountFraction {
	if x != nil {
		return x.PassiveFinalizationCommission
	}
	return nil
}

func (x *PoolParametersCpv1) GetPassiveBakingCommission() *AmountFraction {
	if x != nil {
		return x.PassiveBakingCommission
	}
	return nil
}

func (x *PoolParametersCpv1) GetPassiveTransactionCommission() *AmountFraction {
	if x != nil {
		return x.PassiveTransactionCommission
	}
	return nil
}

func (x *PoolParametersCpv1) GetCommissionBounds() *CommissionRanges {
	if x != nil {
		return x.CommissionBounds
	}
	return nil
}

func (x *PoolParametersCpv1) GetMinimumEquityCapital() *Amount {
	if x != nil {
		return x.MinimumEquityCapital
	}
	return nil
}

func (x *PoolParametersCpv1) GetCapitalBound() *CapitalBound {
	if x != nil {
		return x.CapitalBound
	}
	return nil
}

func (x *PoolParametersCpv1) GetLeverageBound() *LeverageFactor {
	if x != nil {
		return x.LeverageBound
	}
	return nil
}

// The time parameters are introduced as of protocol version 4, and consist of
// the reward period length and the mint rate per payday. These are coupled as
// a change to either affects the overall rate of minting.
type TimeParametersCpv1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPeriodLength *RewardPeriodLength `protobuf:"bytes,1,opt,name=reward_period_length,json=rewardPeriodLength,proto3" json:"reward_period_length,omitempty"`
	MintPerPayday      *MintRate           `protobuf:"bytes,2,opt,name=mint_per_payday,json=mintPerPayday,proto3" json:"mint_per_payday,omitempty"`
}

func (x *TimeParametersCpv1) Reset() {
	*x = TimeParametersCpv1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeParametersCpv1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeParametersCpv1) ProtoMessage() {}

func (x *TimeParametersCpv1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeParametersCpv1.ProtoReflect.Descriptor instead.
func (*TimeParametersCpv1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{115}
}

func (x *TimeParametersCpv1) GetRewardPeriodLength() *RewardPeriodLength {
	if x != nil {
		return x.RewardPeriodLength
	}
	return nil
}

func (x *TimeParametersCpv1) GetMintPerPayday() *MintRate {
	if x != nil {
		return x.MintPerPayday
	}
	return nil
}

// Mint distribution payload as it looks in protocol version 4 and onward.
type MintDistributionCpv1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BakingReward       *AmountFraction `protobuf:"bytes,1,opt,name=baking_reward,json=bakingReward,proto3" json:"baking_reward,omitempty"`
	FinalizationReward *AmountFraction `protobuf:"bytes,2,opt,name=finalization_reward,json=finalizationReward,proto3" json:"finalization_reward,omitempty"`
}

func (x *MintDistributionCpv1) Reset() {
	*x = MintDistributionCpv1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintDistributionCpv1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintDistributionCpv1) ProtoMessage() {}

func (x *MintDistributionCpv1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintDistributionCpv1.ProtoReflect.Descriptor instead.
func (*MintDistributionCpv1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{116}
}

func (x *MintDistributionCpv1) GetBakingReward() *AmountFraction {
	if x != nil {
		return x.BakingReward
	}
	return nil
}

func (x *MintDistributionCpv1) GetFinalizationReward() *AmountFraction {
	if x != nil {
		return x.FinalizationReward
	}
	return nil
}

type ProtocolUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A brief message about the update.
	Message_ string `protobuf:"bytes,1,opt,name=message_,json=message,proto3" json:"message_,omitempty"`
	// A URL of a document describing the update.
	SpecificationUrl string `protobuf:"bytes,2,opt,name=specification_url,json=specificationUrl,proto3" json:"specification_url,omitempty"`
	// SHA256 hash of the specification document.
	SpecificationHash *Sha256Hash `protobuf:"bytes,3,opt,name=specificationHash,proto3" json:"specificationHash,omitempty"`
	// Auxiliary data whose interpretation is defined by the new specification.
	SpecificationAuxiliaryData []byte `protobuf:"bytes,4,opt,name=specification_auxiliary_data,json=specificationAuxiliaryData,proto3" json:"specification_auxiliary_data,omitempty"`
}

func (x *ProtocolUpdate) Reset() {
	*x = ProtocolUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolUpdate) ProtoMessage() {}

func (x *ProtocolUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolUpdate.ProtoReflect.Descriptor instead.
func (*ProtocolUpdate) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{117}
}

func (x *ProtocolUpdate) GetMessage_() string {
	if x != nil {
		return x.Message_
	}
	return ""
}

func (x *ProtocolUpdate) GetSpecificationUrl() string {
	if x != nil {
		return x.SpecificationUrl
	}
	return ""
}

func (x *ProtocolUpdate) GetSpecificationHash() *Sha256Hash {
	if x != nil {
		return x.SpecificationHash
	}
	return nil
}

func (x *ProtocolUpdate) GetSpecificationAuxiliaryData() []byte {
	if x != nil {
		return x.SpecificationAuxiliaryData
	}
	return nil
}

// The minting rate and the distribution of newly-minted CCD among bakers,
// finalizers, and the foundation account. It must be the case that
// baking_reward + finalization_reward <= 1. The remaining amount is the
// platform development charge.
type MintDistributionCpv0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mint rate per slot.
	MintPerSlot *MintRate `protobuf:"bytes,1,opt,name=mint_per_slot,json=mintPerSlot,proto3" json:"mint_per_slot,omitempty"`
	// The fraction of newly created CCD allocated to baker rewards.
	BakingReward *AmountFraction `protobuf:"bytes,2,opt,name=baking_reward,json=bakingReward,proto3" json:"baking_reward,omitempty"`
	// The fraction of newly created CCD allocated to finalization rewards.
	FinalizationReward *AmountFraction `protobuf:"bytes,3,opt,name=finalization_reward,json=finalizationReward,proto3" json:"finalization_reward,omitempty"`
}

func (x *MintDistributionCpv0) Reset() {
	*x = MintDistributionCpv0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintDistributionCpv0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintDistributionCpv0) ProtoMessage() {}

func (x *MintDistributionCpv0) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintDistributionCpv0.ProtoReflect.Descriptor instead.
func (*MintDistributionCpv0) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{118}
}

func (x *MintDistributionCpv0) GetMintPerSlot() *MintRate {
	if x != nil {
		return x.MintPerSlot
	}
	return nil
}

func (x *MintDistributionCpv0) GetBakingReward() *AmountFraction {
	if x != nil {
		return x.BakingReward
	}
	return nil
}

func (x *MintDistributionCpv0) GetFinalizationReward() *AmountFraction {
	if x != nil {
		return x.FinalizationReward
	}
	return nil
}

// Parameters determining the distribution of transaction fees.
type TransactionFeeDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fraction allocated to the baker.
	Baker *AmountFraction `protobuf:"bytes,1,opt,name=baker,proto3" json:"baker,omitempty"`
	// The fraction allocated to the GAS account.
	GasAccount *AmountFraction `protobuf:"bytes,2,opt,name=gas_account,json=gasAccount,proto3" json:"gas_account,omitempty"`
}

func (x *TransactionFeeDistribution) Reset() {
	*x = TransactionFeeDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionFeeDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFeeDistribution) ProtoMessage() {}

func (x *TransactionFeeDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFeeDistribution.ProtoReflect.Descriptor instead.
func (*TransactionFeeDistribution) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{119}
}

func (x *TransactionFeeDistribution) GetBaker() *AmountFraction {
	if x != nil {
		return x.Baker
	}
	return nil
}

func (x *TransactionFeeDistribution) GetGasAccount() *AmountFraction {
	if x != nil {
		return x.GasAccount
	}
	return nil
}

// Distribution of gas rewards for chain parameters version 0 and 1.
type GasRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fraction paid to the baker.
	Baker *AmountFraction `protobuf:"bytes,1,opt,name=baker,proto3" json:"baker,omitempty"`
	// Fraction paid for including a finalization proof in a block.
	FinalizationProof *AmountFraction `protobuf:"bytes,2,opt,name=finalization_proof,json=finalizationProof,proto3" json:"finalization_proof,omitempty"`
	// Fraction paid for including each account creation transaction in a block.
	AccountCreation *AmountFraction `protobuf:"bytes,3,opt,name=account_creation,json=accountCreation,proto3" json:"account_creation,omitempty"`
	// Fraction paid for including an update transaction in a block.
	ChainUpdate *AmountFraction `protobuf:"bytes,4,opt,name=chain_update,json=chainUpdate,proto3" json:"chain_update,omitempty"`
}

func (x *GasRewards) Reset() {
	*x = GasRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasRewards) ProtoMessage() {}

func (x *GasRewards) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasRewards.ProtoReflect.Descriptor instead.
func (*GasRewards) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{120}
}

func (x *GasRewards) GetBaker() *AmountFraction {
	if x != nil {
		return x.Baker
	}
	return nil
}

func (x *GasRewards) GetFinalizationProof() *AmountFraction {
	if x != nil {
		return x.FinalizationProof
	}
	return nil
}

func (x *GasRewards) GetAccountCreation() *AmountFraction {
	if x != nil {
		return x.AccountCreation
	}
	return nil
}

func (x *GasRewards) GetChainUpdate() *AmountFraction {
	if x != nil {
		return x.ChainUpdate
	}
	return nil
}

// Distribution of gas rewards for chain parameters version 2.
type GasRewardsCpv2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fraction paid to the baker.
	Baker *AmountFraction `protobuf:"bytes,1,opt,name=baker,proto3" json:"baker,omitempty"`
	// Fraction paid for including each account creation transaction in a block.
	AccountCreation *AmountFraction `protobuf:"bytes,3,opt,name=account_creation,json=accountCreation,proto3" json:"account_creation,omitempty"`
	// Fraction paid for including an update transaction in a block.
	ChainUpdate *AmountFraction `protobuf:"bytes,4,opt,name=chain_update,json=chainUpdate,proto3" json:"chain_update,omitempty"`
}

func (x *GasRewardsCpv2) Reset() {
	*x = GasRewardsCpv2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasRewardsCpv2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasRewardsCpv2) ProtoMessage() {}

func (x *GasRewardsCpv2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasRewardsCpv2.ProtoReflect.Descriptor instead.
func (*GasRewardsCpv2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{121}
}

func (x *GasRewardsCpv2) GetBaker() *AmountFraction {
	if x != nil {
		return x.Baker
	}
	return nil
}

func (x *GasRewardsCpv2) GetAccountCreation() *AmountFraction {
	if x != nil {
		return x.AccountCreation
	}
	return nil
}

func (x *GasRewardsCpv2) GetChainUpdate() *AmountFraction {
	if x != nil {
		return x.ChainUpdate
	}
	return nil
}

// Minimum stake needed to become a baker. This only applies to protocol version
// 1-3.
type BakerStakeThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum threshold required for registering as a baker.
	BakerStakeThreshold *Amount `protobuf:"bytes,1,opt,name=baker_stake_threshold,json=bakerStakeThreshold,proto3" json:"baker_stake_threshold,omitempty"`
}

func (x *BakerStakeThreshold) Reset() {
	*x = BakerStakeThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerStakeThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerStakeThreshold) ProtoMessage() {}

func (x *BakerStakeThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerStakeThreshold.ProtoReflect.Descriptor instead.
func (*BakerStakeThreshold) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{122}
}

func (x *BakerStakeThreshold) GetBakerStakeThreshold() *Amount {
	if x != nil {
		return x.BakerStakeThreshold
	}
	return nil
}

// Root updates are the highest kind of key updates. They can update every other set of keys,
// even themselves. They can only be performed by Root level keys.
type RootUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UpdateType:
	//	*RootUpdate_RootKeysUpdate
	//	*RootUpdate_Level_1KeysUpdate
	//	*RootUpdate_Level_2KeysUpdateV0
	//	*RootUpdate_Level_2KeysUpdateV1
	UpdateType isRootUpdate_UpdateType `protobuf_oneof:"update_type"`
}

func (x *RootUpdate) Reset() {
	*x = RootUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootUpdate) ProtoMessage() {}

func (x *RootUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootUpdate.ProtoReflect.Descriptor instead.
func (*RootUpdate) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{123}
}

func (m *RootUpdate) GetUpdateType() isRootUpdate_UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return nil
}

func (x *RootUpdate) GetRootKeysUpdate() *HigherLevelKeys {
	if x, ok := x.GetUpdateType().(*RootUpdate_RootKeysUpdate); ok {
		return x.RootKeysUpdate
	}
	return nil
}

func (x *RootUpdate) GetLevel_1KeysUpdate() *HigherLevelKeys {
	if x, ok := x.GetUpdateType().(*RootUpdate_Level_1KeysUpdate); ok {
		return x.Level_1KeysUpdate
	}
	return nil
}

func (x *RootUpdate) GetLevel_2KeysUpdateV0() *AuthorizationsV0 {
	if x, ok := x.GetUpdateType().(*RootUpdate_Level_2KeysUpdateV0); ok {
		return x.Level_2KeysUpdateV0
	}
	return nil
}

func (x *RootUpdate) GetLevel_2KeysUpdateV1() *AuthorizationsV1 {
	if x, ok := x.GetUpdateType().(*RootUpdate_Level_2KeysUpdateV1); ok {
		return x.Level_2KeysUpdateV1
	}
	return nil
}

type isRootUpdate_UpdateType interface {
	isRootUpdate_UpdateType()
}

type RootUpdate_RootKeysUpdate struct {
	// The root keys were updated.
	RootKeysUpdate *HigherLevelKeys `protobuf:"bytes,1,opt,name=root_keys_update,json=rootKeysUpdate,proto3,oneof"`
}

type RootUpdate_Level_1KeysUpdate struct {
	// The level 1 keys were updated.
	Level_1KeysUpdate *HigherLevelKeys `protobuf:"bytes,2,opt,name=level_1_keys_update,json=level1KeysUpdate,proto3,oneof"`
}

type RootUpdate_Level_2KeysUpdateV0 struct {
	// The level 2 keys were updated.
	Level_2KeysUpdateV0 *AuthorizationsV0 `protobuf:"bytes,3,opt,name=level_2_keys_update_v0,json=level2KeysUpdateV0,proto3,oneof"`
}

type RootUpdate_Level_2KeysUpdateV1 struct {
	// The level 2 keys were updated. This is similar to `level_2_keys_update_v0` except that a few more keys can be updated.
	Level_2KeysUpdateV1 *AuthorizationsV1 `protobuf:"bytes,4,opt,name=level_2_keys_update_v1,json=level2KeysUpdateV1,proto3,oneof"`
}

func (*RootUpdate_RootKeysUpdate) isRootUpdate_UpdateType() {}

func (*RootUpdate_Level_1KeysUpdate) isRootUpdate_UpdateType() {}

func (*RootUpdate_Level_2KeysUpdateV0) isRootUpdate_UpdateType() {}

func (*RootUpdate_Level_2KeysUpdateV1) isRootUpdate_UpdateType() {}

// Level 1 updates are the intermediate update kind.
// They can update themselves or level 2 keys. They can only be performed by level 1 keys.
type Level1Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UpdateType:
	//	*Level1Update_Level_1KeysUpdate
	//	*Level1Update_Level_2KeysUpdateV0
	//	*Level1Update_Level_2KeysUpdateV1
	UpdateType isLevel1Update_UpdateType `protobuf_oneof:"update_type"`
}

func (x *Level1Update) Reset() {
	*x = Level1Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Level1Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Level1Update) ProtoMessage() {}

func (x *Level1Update) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Level1Update.ProtoReflect.Descriptor instead.
func (*Level1Update) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{124}
}

func (m *Level1Update) GetUpdateType() isLevel1Update_UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return nil
}

func (x *Level1Update) GetLevel_1KeysUpdate() *HigherLevelKeys {
	if x, ok := x.GetUpdateType().(*Level1Update_Level_1KeysUpdate); ok {
		return x.Level_1KeysUpdate
	}
	return nil
}

func (x *Level1Update) GetLevel_2KeysUpdateV0() *AuthorizationsV0 {
	if x, ok := x.GetUpdateType().(*Level1Update_Level_2KeysUpdateV0); ok {
		return x.Level_2KeysUpdateV0
	}
	return nil
}

func (x *Level1Update) GetLevel_2KeysUpdateV1() *AuthorizationsV1 {
	if x, ok := x.GetUpdateType().(*Level1Update_Level_2KeysUpdateV1); ok {
		return x.Level_2KeysUpdateV1
	}
	return nil
}

type isLevel1Update_UpdateType interface {
	isLevel1Update_UpdateType()
}

type Level1Update_Level_1KeysUpdate struct {
	// The level 1 keys were updated.
	Level_1KeysUpdate *HigherLevelKeys `protobuf:"bytes,1,opt,name=level_1_keys_update,json=level1KeysUpdate,proto3,oneof"`
}

type Level1Update_Level_2KeysUpdateV0 struct {
	// The level 2 keys were updated.
	Level_2KeysUpdateV0 *AuthorizationsV0 `protobuf:"bytes,2,opt,name=level_2_keys_update_v0,json=level2KeysUpdateV0,proto3,oneof"`
}

type Level1Update_Level_2KeysUpdateV1 struct {
	// The level 2 keys were updated. This is similar to `level_2_keys_update_v0` except that a few more keys can be updated.
	Level_2KeysUpdateV1 *AuthorizationsV1 `protobuf:"bytes,3,opt,name=level_2_keys_update_v1,json=level2KeysUpdateV1,proto3,oneof"`
}

func (*Level1Update_Level_1KeysUpdate) isLevel1Update_UpdateType() {}

func (*Level1Update_Level_2KeysUpdateV0) isLevel1Update_UpdateType() {}

func (*Level1Update_Level_2KeysUpdateV1) isLevel1Update_UpdateType() {}

// The payload of a chain update.
type UpdatePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*UpdatePayload_ProtocolUpdate
	//	*UpdatePayload_ElectionDifficultyUpdate
	//	*UpdatePayload_EuroPerEnergyUpdate
	//	*UpdatePayload_MicroCcdPerEuroUpdate
	//	*UpdatePayload_FoundationAccountUpdate
	//	*UpdatePayload_MintDistributionUpdate
	//	*UpdatePayload_TransactionFeeDistributionUpdate
	//	*UpdatePayload_GasRewardsUpdate
	//	*UpdatePayload_BakerStakeThresholdUpdate
	//	*UpdatePayload_RootUpdate
	//	*UpdatePayload_Level_1Update
	//	*UpdatePayload_AddAnonymityRevokerUpdate
	//	*UpdatePayload_AddIdentityProviderUpdate
	//	*UpdatePayload_CooldownParametersCpv_1Update
	//	*UpdatePayload_PoolParametersCpv_1Update
	//	*UpdatePayload_TimeParametersCpv_1Update
	//	*UpdatePayload_MintDistributionCpv_1Update
	//	*UpdatePayload_GasRewardsCpv_2Update
	//	*UpdatePayload_TimeoutParametersUpdate
	//	*UpdatePayload_MinBlockTimeUpdate
	//	*UpdatePayload_BlockEnergyLimitUpdate
	//	*UpdatePayload_FinalizationCommitteeParametersUpdate
	Payload isUpdatePayload_Payload `protobuf_oneof:"payload"`
}

func (x *UpdatePayload) Reset() {
	*x = UpdatePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayload) ProtoMessage() {}

func (x *UpdatePayload) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayload.ProtoReflect.Descriptor instead.
func (*UpdatePayload) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{125}
}

func (m *UpdatePayload) GetPayload() isUpdatePayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *UpdatePayload) GetProtocolUpdate() *ProtocolUpdate {
	if x, ok := x.GetPayload().(*UpdatePayload_ProtocolUpdate); ok {
		return x.ProtocolUpdate
	}
	return nil
}

func (x *UpdatePayload) GetElectionDifficultyUpdate() *ElectionDifficulty {
	if x, ok := x.GetPayload().(*UpdatePayload_ElectionDifficultyUpdate); ok {
		return x.ElectionDifficultyUpdate
	}
	return nil
}

func (x *UpdatePayload) GetEuroPerEnergyUpdate() *ExchangeRate {
	if x, ok := x.GetPayload().(*UpdatePayload_EuroPerEnergyUpdate); ok {
		return x.EuroPerEnergyUpdate
	}
	return nil
}

func (x *UpdatePayload) GetMicroCcdPerEuroUpdate() *ExchangeRate {
	if x, ok := x.GetPayload().(*UpdatePayload_MicroCcdPerEuroUpdate); ok {
		return x.MicroCcdPerEuroUpdate
	}
	return nil
}

func (x *UpdatePayload) GetFoundationAccountUpdate() *AccountAddress {
	if x, ok := x.GetPayload().(*UpdatePayload_FoundationAccountUpdate); ok {
		return x.FoundationAccountUpdate
	}
	return nil
}

func (x *UpdatePayload) GetMintDistributionUpdate() *MintDistributionCpv0 {
	if x, ok := x.GetPayload().(*UpdatePayload_MintDistributionUpdate); ok {
		return x.MintDistributionUpdate
	}
	return nil
}

func (x *UpdatePayload) GetTransactionFeeDistributionUpdate() *TransactionFeeDistribution {
	if x, ok := x.GetPayload().(*UpdatePayload_TransactionFeeDistributionUpdate); ok {
		return x.TransactionFeeDistributionUpdate
	}
	return nil
}

func (x *UpdatePayload) GetGasRewardsUpdate() *GasRewards {
	if x, ok := x.GetPayload().(*UpdatePayload_GasRewardsUpdate); ok {
		return x.GasRewardsUpdate
	}
	return nil
}

func (x *UpdatePayload) GetBakerStakeThresholdUpdate() *BakerStakeThreshold {
	if x, ok := x.GetPayload().(*UpdatePayload_BakerStakeThresholdUpdate); ok {
		return x.BakerStakeThresholdUpdate
	}
	return nil
}

func (x *UpdatePayload) GetRootUpdate() *RootUpdate {
	if x, ok := x.GetPayload().(*UpdatePayload_RootUpdate); ok {
		return x.RootUpdate
	}
	return nil
}

func (x *UpdatePayload) GetLevel_1Update() *Level1Update {
	if x, ok := x.GetPayload().(*UpdatePayload_Level_1Update); ok {
		return x.Level_1Update
	}
	return nil
}

func (x *UpdatePayload) GetAddAnonymityRevokerUpdate() *ArInfo {
	if x, ok := x.GetPayload().(*UpdatePayload_AddAnonymityRevokerUpdate); ok {
		return x.AddAnonymityRevokerUpdate
	}
	return nil
}

func (x *UpdatePayload) GetAddIdentityProviderUpdate() *IpInfo {
	if x, ok := x.GetPayload().(*UpdatePayload_AddIdentityProviderUpdate); ok {
		return x.AddIdentityProviderUpdate
	}
	return nil
}

func (x *UpdatePayload) GetCooldownParametersCpv_1Update() *CooldownParametersCpv1 {
	if x, ok := x.GetPayload().(*UpdatePayload_CooldownParametersCpv_1Update); ok {
		return x.CooldownParametersCpv_1Update
	}
	return nil
}

func (x *UpdatePayload) GetPoolParametersCpv_1Update() *PoolParametersCpv1 {
	if x, ok := x.GetPayload().(*UpdatePayload_PoolParametersCpv_1Update); ok {
		return x.PoolParametersCpv_1Update
	}
	return nil
}

func (x *UpdatePayload) GetTimeParametersCpv_1Update() *TimeParametersCpv1 {
	if x, ok := x.GetPayload().(*UpdatePayload_TimeParametersCpv_1Update); ok {
		return x.TimeParametersCpv_1Update
	}
	return nil
}

func (x *UpdatePayload) GetMintDistributionCpv_1Update() *MintDistributionCpv1 {
	if x, ok := x.GetPayload().(*UpdatePayload_MintDistributionCpv_1Update); ok {
		return x.MintDistributionCpv_1Update
	}
	return nil
}

func (x *UpdatePayload) GetGasRewardsCpv_2Update() *GasRewardsCpv2 {
	if x, ok := x.GetPayload().(*UpdatePayload_GasRewardsCpv_2Update); ok {
		return x.GasRewardsCpv_2Update
	}
	return nil
}

func (x *UpdatePayload) GetTimeoutParametersUpdate() *TimeoutParameters {
	if x, ok := x.GetPayload().(*UpdatePayload_TimeoutParametersUpdate); ok {
		return x.TimeoutParametersUpdate
	}
	return nil
}

func (x *UpdatePayload) GetMinBlockTimeUpdate() *Duration {
	if x, ok := x.GetPayload().(*UpdatePayload_MinBlockTimeUpdate); ok {
		return x.MinBlockTimeUpdate
	}
	return nil
}

func (x *UpdatePayload) GetBlockEnergyLimitUpdate() *Energy {
	if x, ok := x.GetPayload().(*UpdatePayload_BlockEnergyLimitUpdate); ok {
		return x.BlockEnergyLimitUpdate
	}
	return nil
}

func (x *UpdatePayload) GetFinalizationCommitteeParametersUpdate() *FinalizationCommitteeParameters {
	if x, ok := x.GetPayload().(*UpdatePayload_FinalizationCommitteeParametersUpdate); ok {
		return x.FinalizationCommitteeParametersUpdate
	}
	return nil
}

type isUpdatePayload_Payload interface {
	isUpdatePayload_Payload()
}

type UpdatePayload_ProtocolUpdate struct {
	// The protocol version was updated.
	ProtocolUpdate *ProtocolUpdate `protobuf:"bytes,1,opt,name=protocol_update,json=protocolUpdate,proto3,oneof"`
}

type UpdatePayload_ElectionDifficultyUpdate struct {
	// The election difficulty was updated.
	ElectionDifficultyUpdate *ElectionDifficulty `protobuf:"bytes,2,opt,name=election_difficulty_update,json=electionDifficultyUpdate,proto3,oneof"`
}

type UpdatePayload_EuroPerEnergyUpdate struct {
	// The euro per energy exchange rate was updated.
	EuroPerEnergyUpdate *ExchangeRate `protobuf:"bytes,3,opt,name=euro_per_energy_update,json=euroPerEnergyUpdate,proto3,oneof"`
}

type UpdatePayload_MicroCcdPerEuroUpdate struct {
	// The microCCD per euro exchange rate was updated.
	MicroCcdPerEuroUpdate *ExchangeRate `protobuf:"bytes,4,opt,name=micro_ccd_per_euro_update,json=microCcdPerEuroUpdate,proto3,oneof"`
}

type UpdatePayload_FoundationAccountUpdate struct {
	// The foundation account address was updated.
	FoundationAccountUpdate *AccountAddress `protobuf:"bytes,5,opt,name=foundation_account_update,json=foundationAccountUpdate,proto3,oneof"`
}

type UpdatePayload_MintDistributionUpdate struct {
	// The mint distribution was updated.
	MintDistributionUpdate *MintDistributionCpv0 `protobuf:"bytes,6,opt,name=mint_distribution_update,json=mintDistributionUpdate,proto3,oneof"`
}

type UpdatePayload_TransactionFeeDistributionUpdate struct {
	// The transaction fee distribtuion was updated.
	TransactionFeeDistributionUpdate *TransactionFeeDistribution `protobuf:"bytes,7,opt,name=transaction_fee_distribution_update,json=transactionFeeDistributionUpdate,proto3,oneof"`
}

type UpdatePayload_GasRewardsUpdate struct {
	// The gas rewards were updated.
	GasRewardsUpdate *GasRewards `protobuf:"bytes,8,opt,name=gas_rewards_update,json=gasRewardsUpdate,proto3,oneof"`
}

type UpdatePayload_BakerStakeThresholdUpdate struct {
	// The minimum amount of CCD needed to be come a baker was updated.
	BakerStakeThresholdUpdate *BakerStakeThreshold `protobuf:"bytes,9,opt,name=baker_stake_threshold_update,json=bakerStakeThresholdUpdate,proto3,oneof"`
}

type UpdatePayload_RootUpdate struct {
	// The root keys were updated.
	RootUpdate *RootUpdate `protobuf:"bytes,10,opt,name=root_update,json=rootUpdate,proto3,oneof"`
}

type UpdatePayload_Level_1Update struct {
	// The level 1 keys were updated.
	Level_1Update *Level1Update `protobuf:"bytes,11,opt,name=level_1_update,json=level1Update,proto3,oneof"`
}

type UpdatePayload_AddAnonymityRevokerUpdate struct {
	// An anonymity revoker was added.
	AddAnonymityRevokerUpdate *ArInfo `protobuf:"bytes,12,opt,name=add_anonymity_revoker_update,json=addAnonymityRevokerUpdate,proto3,oneof"`
}

type UpdatePayload_AddIdentityProviderUpdate struct {
	// An identity provider was added.
	AddIdentityProviderUpdate *IpInfo `protobuf:"bytes,13,opt,name=add_identity_provider_update,json=addIdentityProviderUpdate,proto3,oneof"`
}

type UpdatePayload_CooldownParametersCpv_1Update struct {
	// The cooldown parameters were updated.
	CooldownParametersCpv_1Update *CooldownParametersCpv1 `protobuf:"bytes,14,opt,name=cooldown_parameters_cpv_1_update,json=cooldownParametersCpv1Update,proto3,oneof"`
}

type UpdatePayload_PoolParametersCpv_1Update struct {
	// The pool parameters were updated.
	PoolParametersCpv_1Update *PoolParametersCpv1 `protobuf:"bytes,15,opt,name=pool_parameters_cpv_1_update,json=poolParametersCpv1Update,proto3,oneof"`
}

type UpdatePayload_TimeParametersCpv_1Update struct {
	// The time parameters were updated.
	TimeParametersCpv_1Update *TimeParametersCpv1 `protobuf:"bytes,16,opt,name=time_parameters_cpv_1_update,json=timeParametersCpv1Update,proto3,oneof"`
}

type UpdatePayload_MintDistributionCpv_1Update struct {
	// The mint distribution was updated.
	MintDistributionCpv_1Update *MintDistributionCpv1 `protobuf:"bytes,17,opt,name=mint_distribution_cpv_1_update,json=mintDistributionCpv1Update,proto3,oneof"`
}

type UpdatePayload_GasRewardsCpv_2Update struct {
	// The gas rewards were updated (chain parameters version 2).
	GasRewardsCpv_2Update *GasRewardsCpv2 `protobuf:"bytes,18,opt,name=gas_rewards_cpv_2_update,json=gasRewardsCpv2Update,proto3,oneof"`
}

type UpdatePayload_TimeoutParametersUpdate struct {
	// The consensus timeouts were updated (chain parameters version 2).
	TimeoutParametersUpdate *TimeoutParameters `protobuf:"bytes,19,opt,name=timeout_parameters_update,json=timeoutParametersUpdate,proto3,oneof"`
}

type UpdatePayload_MinBlockTimeUpdate struct {
	// The minimum time between blocks was updated (chain parameters version 2).
	MinBlockTimeUpdate *Duration `protobuf:"bytes,20,opt,name=min_block_time_update,json=minBlockTimeUpdate,proto3,oneof"`
}

type UpdatePayload_BlockEnergyLimitUpdate struct {
	// The block energy limit was updated (chain parameters version 2).
	BlockEnergyLimitUpdate *Energy `protobuf:"bytes,21,opt,name=block_energy_limit_update,json=blockEnergyLimitUpdate,proto3,oneof"`
}

type UpdatePayload_FinalizationCommitteeParametersUpdate struct {
	// Finalization committee parameters (chain parameters version 2).
	FinalizationCommitteeParametersUpdate *FinalizationCommitteeParameters `protobuf:"bytes,22,opt,name=finalization_committee_parameters_update,json=finalizationCommitteeParametersUpdate,proto3,oneof"`
}

func (*UpdatePayload_ProtocolUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_ElectionDifficultyUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_EuroPerEnergyUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_MicroCcdPerEuroUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_FoundationAccountUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_MintDistributionUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_TransactionFeeDistributionUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_GasRewardsUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_BakerStakeThresholdUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_RootUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_Level_1Update) isUpdatePayload_Payload() {}

func (*UpdatePayload_AddAnonymityRevokerUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_AddIdentityProviderUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_CooldownParametersCpv_1Update) isUpdatePayload_Payload() {}

func (*UpdatePayload_PoolParametersCpv_1Update) isUpdatePayload_Payload() {}

func (*UpdatePayload_TimeParametersCpv_1Update) isUpdatePayload_Payload() {}

func (*UpdatePayload_MintDistributionCpv_1Update) isUpdatePayload_Payload() {}

func (*UpdatePayload_GasRewardsCpv_2Update) isUpdatePayload_Payload() {}

func (*UpdatePayload_TimeoutParametersUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_MinBlockTimeUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_BlockEnergyLimitUpdate) isUpdatePayload_Payload() {}

func (*UpdatePayload_FinalizationCommitteeParametersUpdate) isUpdatePayload_Payload() {}

// Details about an account transaction.
type AccountTransactionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cost of the transaction. Paid by the sender.
	Cost *Amount `protobuf:"bytes,1,opt,name=cost,proto3" json:"cost,omitempty"`
	// The sender of the transaction.
	Sender *AccountAddress `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// The effects of the transaction.
	Effects *AccountTransactionEffects `protobuf:"bytes,3,opt,name=effects,proto3" json:"effects,omitempty"`
}

func (x *AccountTransactionDetails) Reset() {
	*x = AccountTransactionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionDetails) ProtoMessage() {}

func (x *AccountTransactionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionDetails.ProtoReflect.Descriptor instead.
func (*AccountTransactionDetails) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{126}
}

func (x *AccountTransactionDetails) GetCost() *Amount {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *AccountTransactionDetails) GetSender() *AccountAddress {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *AccountTransactionDetails) GetEffects() *AccountTransactionEffects {
	if x != nil {
		return x.Effects
	}
	return nil
}

// Details of an account creation. These transactions are free, and we only
// ever get a response for them if the account is created, hence no failure
// cases.
type AccountCreationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this is an initial or normal account.
	CredentialType CredentialType `protobuf:"varint,1,opt,name=credential_type,json=credentialType,proto3,enum=concordium.v2.CredentialType" json:"credential_type,omitempty"`
	// Address of the newly created account.
	Address *AccountAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Credential registration ID of the first credential.
	RegId *CredentialRegistrationId `protobuf:"bytes,3,opt,name=reg_id,json=regId,proto3" json:"reg_id,omitempty"`
}

func (x *AccountCreationDetails) Reset() {
	*x = AccountCreationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCreationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCreationDetails) ProtoMessage() {}

func (x *AccountCreationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCreationDetails.ProtoReflect.Descriptor instead.
func (*AccountCreationDetails) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{127}
}

func (x *AccountCreationDetails) GetCredentialType() CredentialType {
	if x != nil {
		return x.CredentialType
	}
	return CredentialType_CREDENTIAL_TYPE_INITIAL
}

func (x *AccountCreationDetails) GetAddress() *AccountAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccountCreationDetails) GetRegId() *CredentialRegistrationId {
	if x != nil {
		return x.RegId
	}
	return nil
}

// Transaction time specified as seconds since unix epoch.
type TransactionTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TransactionTime) Reset() {
	*x = TransactionTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTime) ProtoMessage() {}

func (x *TransactionTime) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTime.ProtoReflect.Descriptor instead.
func (*TransactionTime) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{128}
}

func (x *TransactionTime) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Details of an update instruction. These are free, and we only ever get a
// response for them if the update is successfully enqueued, hence no failure
// cases.
type UpdateDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time at which the update will be effective.
	EffectiveTime *TransactionTime `protobuf:"bytes,1,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	// The paylaod for the update.
	Payload *UpdatePayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UpdateDetails) Reset() {
	*x = UpdateDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDetails) ProtoMessage() {}

func (x *UpdateDetails) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDetails.ProtoReflect.Descriptor instead.
func (*UpdateDetails) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{129}
}

func (x *UpdateDetails) GetEffectiveTime() *TransactionTime {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *UpdateDetails) GetPayload() *UpdatePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Summary of the outcome of a block item in structured form.
// The summary determines which transaction type it was.
type BlockItemSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the transaction in the block where it is included.
	Index *BlockItemSummary_TransactionIndex `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// The amount of NRG the transaction cost.
	EnergyCost *Energy `protobuf:"bytes,2,opt,name=energy_cost,json=energyCost,proto3" json:"energy_cost,omitempty"`
	// Hash of the transaction.
	Hash *TransactionHash `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Details that are specific to different transaction types.
	//
	// Types that are assignable to Details:
	//	*BlockItemSummary_AccountTransaction
	//	*BlockItemSummary_AccountCreation
	//	*BlockItemSummary_Update
	Details isBlockItemSummary_Details `protobuf_oneof:"details"`
}

func (x *BlockItemSummary) Reset() {
	*x = BlockItemSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockItemSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockItemSummary) ProtoMessage() {}

func (x *BlockItemSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockItemSummary.ProtoReflect.Descriptor instead.
func (*BlockItemSummary) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{130}
}

func (x *BlockItemSummary) GetIndex() *BlockItemSummary_TransactionIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *BlockItemSummary) GetEnergyCost() *Energy {
	if x != nil {
		return x.EnergyCost
	}
	return nil
}

func (x *BlockItemSummary) GetHash() *TransactionHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (m *BlockItemSummary) GetDetails() isBlockItemSummary_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *BlockItemSummary) GetAccountTransaction() *AccountTransactionDetails {
	if x, ok := x.GetDetails().(*BlockItemSummary_AccountTransaction); ok {
		return x.AccountTransaction
	}
	return nil
}

func (x *BlockItemSummary) GetAccountCreation() *AccountCreationDetails {
	if x, ok := x.GetDetails().(*BlockItemSummary_AccountCreation); ok {
		return x.AccountCreation
	}
	return nil
}

func (x *BlockItemSummary) GetUpdate() *UpdateDetails {
	if x, ok := x.GetDetails().(*BlockItemSummary_Update); ok {
		return x.Update
	}
	return nil
}

type isBlockItemSummary_Details interface {
	isBlockItemSummary_Details()
}

type BlockItemSummary_AccountTransaction struct {
	// Detailsa about an account transaction.
	AccountTransaction *AccountTransactionDetails `protobuf:"bytes,4,opt,name=account_transaction,json=accountTransaction,proto3,oneof"`
}

type BlockItemSummary_AccountCreation struct {
	// Details about an account creation.
	AccountCreation *AccountCreationDetails `protobuf:"bytes,5,opt,name=account_creation,json=accountCreation,proto3,oneof"`
}

type BlockItemSummary_Update struct {
	// Details about a chain update.
	Update *UpdateDetails `protobuf:"bytes,6,opt,name=update,proto3,oneof"`
}

func (*BlockItemSummary_AccountTransaction) isBlockItemSummary_Details() {}

func (*BlockItemSummary_AccountCreation) isBlockItemSummary_Details() {}

func (*BlockItemSummary_Update) isBlockItemSummary_Details() {}

// The number of chain restarts via a protocol update. An effected
// protocol update instruction might not change the protocol version
// specified in the previous field, but it always increments the genesis
// index.
type GenesisIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GenesisIndex) Reset() {
	*x = GenesisIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisIndex) ProtoMessage() {}

func (x *GenesisIndex) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisIndex.ProtoReflect.Descriptor instead.
func (*GenesisIndex) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{131}
}

func (x *GenesisIndex) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The response for GetConsensusInfo.
type ConsensusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the current best block.
	BestBlock *BlockHash `protobuf:"bytes,1,opt,name=best_block,json=bestBlock,proto3" json:"best_block,omitempty"`
	// Hash of the (original) genesis block.
	GenesisBlock *BlockHash `protobuf:"bytes,2,opt,name=genesis_block,json=genesisBlock,proto3" json:"genesis_block,omitempty"`
	// Time of the (original) genesis block.
	GenesisTime *Timestamp `protobuf:"bytes,3,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	// (Current) slot duration in milliseconds.
	SlotDuration *Duration `protobuf:"bytes,4,opt,name=slot_duration,json=slotDuration,proto3" json:"slot_duration,omitempty"`
	// (Current) epoch duration in milliseconds.
	EpochDuration *Duration `protobuf:"bytes,5,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
	// Hash of the last finalized block.
	LastFinalizedBlock *BlockHash `protobuf:"bytes,6,opt,name=last_finalized_block,json=lastFinalizedBlock,proto3" json:"last_finalized_block,omitempty"`
	// Absolute height of the best block.
	BestBlockHeight *AbsoluteBlockHeight `protobuf:"bytes,7,opt,name=best_block_height,json=bestBlockHeight,proto3" json:"best_block_height,omitempty"`
	// Absolute height of the last finalized block.
	LastFinalizedBlockHeight *AbsoluteBlockHeight `protobuf:"bytes,8,opt,name=last_finalized_block_height,json=lastFinalizedBlockHeight,proto3" json:"last_finalized_block_height,omitempty"`
	// Total number of blocks received.
	BlocksReceivedCount uint32 `protobuf:"varint,9,opt,name=blocks_received_count,json=blocksReceivedCount,proto3" json:"blocks_received_count,omitempty"`
	// The last time a block was received.
	BlockLastReceivedTime *Timestamp `protobuf:"bytes,10,opt,name=block_last_received_time,json=blockLastReceivedTime,proto3,oneof" json:"block_last_received_time,omitempty"`
	// Exponential moving average latency between a block's slot time and received time.
	BlockReceiveLatencyEma float64 `protobuf:"fixed64,11,opt,name=block_receive_latency_ema,json=blockReceiveLatencyEma,proto3" json:"block_receive_latency_ema,omitempty"`
	// Standard deviation of exponential moving average latency between a block's slot time and received time.
	BlockReceiveLatencyEmsd float64 `protobuf:"fixed64,12,opt,name=block_receive_latency_emsd,json=blockReceiveLatencyEmsd,proto3" json:"block_receive_latency_emsd,omitempty"`
	// Exponential moving average time between receiving blocks.
	BlockReceivePeriodEma *float64 `protobuf:"fixed64,13,opt,name=block_receive_period_ema,json=blockReceivePeriodEma,proto3,oneof" json:"block_receive_period_ema,omitempty"`
	// Standard deviation of exponential moving average time between receiving blocks.
	BlockReceivePeriodEmsd *float64 `protobuf:"fixed64,14,opt,name=block_receive_period_emsd,json=blockReceivePeriodEmsd,proto3,oneof" json:"block_receive_period_emsd,omitempty"`
	// Total number of blocks received and verified.
	BlocksVerifiedCount uint32 `protobuf:"varint,15,opt,name=blocks_verified_count,json=blocksVerifiedCount,proto3" json:"blocks_verified_count,omitempty"`
	// The last time a block was verified (added to the tree).
	BlockLastArrivedTime *Timestamp `protobuf:"bytes,16,opt,name=block_last_arrived_time,json=blockLastArrivedTime,proto3,oneof" json:"block_last_arrived_time,omitempty"`
	// Exponential moving average latency between a block's slot time and its arrival.
	BlockArriveLatencyEma float64 `protobuf:"fixed64,17,opt,name=block_arrive_latency_ema,json=blockArriveLatencyEma,proto3" json:"block_arrive_latency_ema,omitempty"`
	// Standard deviation of exponential moving average latency between a block's slot time and its arrival.
	BlockArriveLatencyEmsd float64 `protobuf:"fixed64,18,opt,name=block_arrive_latency_emsd,json=blockArriveLatencyEmsd,proto3" json:"block_arrive_latency_emsd,omitempty"`
	// Exponential moving average time between block arrivals.
	BlockArrivePeriodEma *float64 `protobuf:"fixed64,19,opt,name=block_arrive_period_ema,json=blockArrivePeriodEma,proto3,oneof" json:"block_arrive_period_ema,omitempty"`
	// Standard deviation of exponential moving average time between block arrivals.
	BlockArrivePeriodEmsd *float64 `protobuf:"fixed64,20,opt,name=block_arrive_period_emsd,json=blockArrivePeriodEmsd,proto3,oneof" json:"block_arrive_period_emsd,omitempty"`
	// Exponential moving average number of transactions per block.
	TransactionsPerBlockEma float64 `protobuf:"fixed64,21,opt,name=transactions_per_block_ema,json=transactionsPerBlockEma,proto3" json:"transactions_per_block_ema,omitempty"`
	// Standard deviation of exponential moving average number of transactions per block.
	TransactionsPerBlockEmsd float64 `protobuf:"fixed64,22,opt,name=transactions_per_block_emsd,json=transactionsPerBlockEmsd,proto3" json:"transactions_per_block_emsd,omitempty"`
	// Number of finalizations.
	FinalizationCount uint32 `protobuf:"varint,23,opt,name=finalization_count,json=finalizationCount,proto3" json:"finalization_count,omitempty"`
	// Time of last verified finalization.
	LastFinalizedTime *Timestamp `protobuf:"bytes,24,opt,name=last_finalized_time,json=lastFinalizedTime,proto3,oneof" json:"last_finalized_time,omitempty"`
	// Exponential moving average time between finalizations.
	FinalizationPeriodEma *float64 `protobuf:"fixed64,25,opt,name=finalization_period_ema,json=finalizationPeriodEma,proto3,oneof" json:"finalization_period_ema,omitempty"`
	// Standard deviation of exponential moving average time between finalizations.
	FinalizationPeriodEmsd *float64 `protobuf:"fixed64,26,opt,name=finalization_period_emsd,json=finalizationPeriodEmsd,proto3,oneof" json:"finalization_period_emsd,omitempty"`
	// Currently active protocol version.
	ProtocolVersion ProtocolVersion `protobuf:"varint,27,opt,name=protocol_version,json=protocolVersion,proto3,enum=concordium.v2.ProtocolVersion" json:"protocol_version,omitempty"`
	// The number of chain restarts via a protocol update. A completed
	// protocol update instruction might not change the protocol version
	// specified in the previous field, but it always increments the genesis
	// index.
	GenesisIndex *GenesisIndex `protobuf:"bytes,28,opt,name=genesis_index,json=genesisIndex,proto3" json:"genesis_index,omitempty"`
	// Block hash of the genesis block of current era, i.e., since the last protocol update.
	// Initially this is equal to 'genesis_block'.
	CurrentEraGenesisBlock *BlockHash `protobuf:"bytes,29,opt,name=current_era_genesis_block,json=currentEraGenesisBlock,proto3" json:"current_era_genesis_block,omitempty"`
	// Time when the current era started.
	CurrentEraGenesisTime *Timestamp `protobuf:"bytes,30,opt,name=current_era_genesis_time,json=currentEraGenesisTime,proto3" json:"current_era_genesis_time,omitempty"`
}

func (x *ConsensusInfo) Reset() {
	*x = ConsensusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusInfo) ProtoMessage() {}

func (x *ConsensusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusInfo.ProtoReflect.Descriptor instead.
func (*ConsensusInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{132}
}

func (x *ConsensusInfo) GetBestBlock() *BlockHash {
	if x != nil {
		return x.BestBlock
	}
	return nil
}

func (x *ConsensusInfo) GetGenesisBlock() *BlockHash {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

func (x *ConsensusInfo) GetGenesisTime() *Timestamp {
	if x != nil {
		return x.GenesisTime
	}
	return nil
}

func (x *ConsensusInfo) GetSlotDuration() *Duration {
	if x != nil {
		return x.SlotDuration
	}
	return nil
}

func (x *ConsensusInfo) GetEpochDuration() *Duration {
	if x != nil {
		return x.EpochDuration
	}
	return nil
}

func (x *ConsensusInfo) GetLastFinalizedBlock() *BlockHash {
	if x != nil {
		return x.LastFinalizedBlock
	}
	return nil
}

func (x *ConsensusInfo) GetBestBlockHeight() *AbsoluteBlockHeight {
	if x != nil {
		return x.BestBlockHeight
	}
	return nil
}

func (x *ConsensusInfo) GetLastFinalizedBlockHeight() *AbsoluteBlockHeight {
	if x != nil {
		return x.LastFinalizedBlockHeight
	}
	return nil
}

func (x *ConsensusInfo) GetBlocksReceivedCount() uint32 {
	if x != nil {
		return x.BlocksReceivedCount
	}
	return 0
}

func (x *ConsensusInfo) GetBlockLastReceivedTime() *Timestamp {
	if x != nil {
		return x.BlockLastReceivedTime
	}
	return nil
}

func (x *ConsensusInfo) GetBlockReceiveLatencyEma() float64 {
	if x != nil {
		return x.BlockReceiveLatencyEma
	}
	return 0
}

func (x *ConsensusInfo) GetBlockReceiveLatencyEmsd() float64 {
	if x != nil {
		return x.BlockReceiveLatencyEmsd
	}
	return 0
}

func (x *ConsensusInfo) GetBlockReceivePeriodEma() float64 {
	if x != nil && x.BlockReceivePeriodEma != nil {
		return *x.BlockReceivePeriodEma
	}
	return 0
}

func (x *ConsensusInfo) GetBlockReceivePeriodEmsd() float64 {
	if x != nil && x.BlockReceivePeriodEmsd != nil {
		return *x.BlockReceivePeriodEmsd
	}
	return 0
}

func (x *ConsensusInfo) GetBlocksVerifiedCount() uint32 {
	if x != nil {
		return x.BlocksVerifiedCount
	}
	return 0
}

func (x *ConsensusInfo) GetBlockLastArrivedTime() *Timestamp {
	if x != nil {
		return x.BlockLastArrivedTime
	}
	return nil
}

func (x *ConsensusInfo) GetBlockArriveLatencyEma() float64 {
	if x != nil {
		return x.BlockArriveLatencyEma
	}
	return 0
}

func (x *ConsensusInfo) GetBlockArriveLatencyEmsd() float64 {
	if x != nil {
		return x.BlockArriveLatencyEmsd
	}
	return 0
}

func (x *ConsensusInfo) GetBlockArrivePeriodEma() float64 {
	if x != nil && x.BlockArrivePeriodEma != nil {
		return *x.BlockArrivePeriodEma
	}
	return 0
}

func (x *ConsensusInfo) GetBlockArrivePeriodEmsd() float64 {
	if x != nil && x.BlockArrivePeriodEmsd != nil {
		return *x.BlockArrivePeriodEmsd
	}
	return 0
}

func (x *ConsensusInfo) GetTransactionsPerBlockEma() float64 {
	if x != nil {
		return x.TransactionsPerBlockEma
	}
	return 0
}

func (x *ConsensusInfo) GetTransactionsPerBlockEmsd() float64 {
	if x != nil {
		return x.TransactionsPerBlockEmsd
	}
	return 0
}

func (x *ConsensusInfo) GetFinalizationCount() uint32 {
	if x != nil {
		return x.FinalizationCount
	}
	return 0
}

func (x *ConsensusInfo) GetLastFinalizedTime() *Timestamp {
	if x != nil {
		return x.LastFinalizedTime
	}
	return nil
}

func (x *ConsensusInfo) GetFinalizationPeriodEma() float64 {
	if x != nil && x.FinalizationPeriodEma != nil {
		return *x.FinalizationPeriodEma
	}
	return 0
}

func (x *ConsensusInfo) GetFinalizationPeriodEmsd() float64 {
	if x != nil && x.FinalizationPeriodEmsd != nil {
		return *x.FinalizationPeriodEmsd
	}
	return 0
}

func (x *ConsensusInfo) GetProtocolVersion() ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return ProtocolVersion_PROTOCOL_VERSION_1
}

func (x *ConsensusInfo) GetGenesisIndex() *GenesisIndex {
	if x != nil {
		return x.GenesisIndex
	}
	return nil
}

func (x *ConsensusInfo) GetCurrentEraGenesisBlock() *BlockHash {
	if x != nil {
		return x.CurrentEraGenesisBlock
	}
	return nil
}

func (x *ConsensusInfo) GetCurrentEraGenesisTime() *Timestamp {
	if x != nil {
		return x.CurrentEraGenesisTime
	}
	return nil
}

// Information about an arrived block that is part of the streaming response.
type ArrivedBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the block.
	Hash *BlockHash `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Absolute height of the block, height 0 is the genesis block.
	Height *AbsoluteBlockHeight `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ArrivedBlockInfo) Reset() {
	*x = ArrivedBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrivedBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrivedBlockInfo) ProtoMessage() {}

func (x *ArrivedBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrivedBlockInfo.ProtoReflect.Descriptor instead.
func (*ArrivedBlockInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{133}
}

func (x *ArrivedBlockInfo) GetHash() *BlockHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ArrivedBlockInfo) GetHeight() *AbsoluteBlockHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

// The response for GetCryptographicParameters.
type CryptographicParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A free-form string used to distinguish between different chains even if they share other parameters.
	GenesisString string `protobuf:"bytes,1,opt,name=genesis_string,json=genesisString,proto3" json:"genesis_string,omitempty"`
	// Generators for the bulletproofs.
	// It is a serialized list of 256 group elements in the G1 group of the BLS12-381 curve.
	BulletproofGenerators []byte `protobuf:"bytes,2,opt,name=bulletproof_generators,json=bulletproofGenerators,proto3" json:"bulletproof_generators,omitempty"`
	// A shared commitment key known to the chain and the account holder (and therefore it is public).
	// The account holder uses this commitment key to generate commitments to values in the attribute list.
	// It is a serialized pair of group elements  in the G1 group of the BLS12-381 curve.
	OnChainCommitmentKey []byte `protobuf:"bytes,3,opt,name=on_chain_commitment_key,json=onChainCommitmentKey,proto3" json:"on_chain_commitment_key,omitempty"`
}

func (x *CryptographicParameters) Reset() {
	*x = CryptographicParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptographicParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptographicParameters) ProtoMessage() {}

func (x *CryptographicParameters) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptographicParameters.ProtoReflect.Descriptor instead.
func (*CryptographicParameters) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{134}
}

func (x *CryptographicParameters) GetGenesisString() string {
	if x != nil {
		return x.GenesisString
	}
	return ""
}

func (x *CryptographicParameters) GetBulletproofGenerators() []byte {
	if x != nil {
		return x.BulletproofGenerators
	}
	return nil
}

func (x *CryptographicParameters) GetOnChainCommitmentKey() []byte {
	if x != nil {
		return x.OnChainCommitmentKey
	}
	return nil
}

// The response for GetBlockInfo.
type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the block.
	Hash *BlockHash `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Absolute height of the block, height 0 is the genesis block.
	Height *AbsoluteBlockHeight `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	// The parent block hash. For a re-genesis block, this will be the terminal block of the
	// previous chain. For the initial genesis block, this will be the hash of the block itself.
	ParentBlock *BlockHash `protobuf:"bytes,3,opt,name=parent_block,json=parentBlock,proto3" json:"parent_block,omitempty"`
	// The last finalized block when this block was baked.
	LastFinalizedBlock *BlockHash `protobuf:"bytes,4,opt,name=last_finalized_block,json=lastFinalizedBlock,proto3" json:"last_finalized_block,omitempty"`
	// The genesis index for this block. This counts the number of protocol updates that have
	// preceded this block, and defines the era of the block.
	GenesisIndex *GenesisIndex `protobuf:"bytes,5,opt,name=genesis_index,json=genesisIndex,proto3" json:"genesis_index,omitempty"`
	// The height of this block relative to the (re)genesis block of its era.
	EraBlockHeight *BlockHeight `protobuf:"bytes,6,opt,name=era_block_height,json=eraBlockHeight,proto3" json:"era_block_height,omitempty"`
	// The time the block was received.
	ReceiveTime *Timestamp `protobuf:"bytes,7,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
	// The time the block was verified.
	ArriveTime *Timestamp `protobuf:"bytes,8,opt,name=arrive_time,json=arriveTime,proto3" json:"arrive_time,omitempty"`
	// The slot number in which the block was baked.
	SlotNumber *Slot `protobuf:"bytes,9,opt,name=slot_number,json=slotNumber,proto3" json:"slot_number,omitempty"`
	// The time of the slot in which the block was baked.
	SlotTime *Timestamp `protobuf:"bytes,10,opt,name=slot_time,json=slotTime,proto3" json:"slot_time,omitempty"`
	// The baker id of account baking this block. Not provided for a genesis block.
	Baker *BakerId `protobuf:"bytes,11,opt,name=baker,proto3,oneof" json:"baker,omitempty"`
	// Whether the block is finalized.
	Finalized bool `protobuf:"varint,12,opt,name=finalized,proto3" json:"finalized,omitempty"`
	// The number of transactions in the block.
	TransactionCount uint32 `protobuf:"varint,13,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	// The energy cost of the transactions in the block.
	TransactionsEnergyCost *Energy `protobuf:"bytes,14,opt,name=transactions_energy_cost,json=transactionsEnergyCost,proto3" json:"transactions_energy_cost,omitempty"`
	// The total byte size of all transactions in the block.
	TransactionsSize uint32 `protobuf:"varint,15,opt,name=transactions_size,json=transactionsSize,proto3" json:"transactions_size,omitempty"`
	// The hash of the block state after this block.
	StateHash *StateHash `protobuf:"bytes,16,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
	// Protocol version to which the block belongs.
	ProtocolVersion ProtocolVersion `protobuf:"varint,17,opt,name=protocol_version,json=protocolVersion,proto3,enum=concordium.v2.ProtocolVersion" json:"protocol_version,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{135}
}

func (x *BlockInfo) GetHash() *BlockHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockInfo) GetHeight() *AbsoluteBlockHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *BlockInfo) GetParentBlock() *BlockHash {
	if x != nil {
		return x.ParentBlock
	}
	return nil
}

func (x *BlockInfo) GetLastFinalizedBlock() *BlockHash {
	if x != nil {
		return x.LastFinalizedBlock
	}
	return nil
}

func (x *BlockInfo) GetGenesisIndex() *GenesisIndex {
	if x != nil {
		return x.GenesisIndex
	}
	return nil
}

func (x *BlockInfo) GetEraBlockHeight() *BlockHeight {
	if x != nil {
		return x.EraBlockHeight
	}
	return nil
}

func (x *BlockInfo) GetReceiveTime() *Timestamp {
	if x != nil {
		return x.ReceiveTime
	}
	return nil
}

func (x *BlockInfo) GetArriveTime() *Timestamp {
	if x != nil {
		return x.ArriveTime
	}
	return nil
}

func (x *BlockInfo) GetSlotNumber() *Slot {
	if x != nil {
		return x.SlotNumber
	}
	return nil
}

func (x *BlockInfo) GetSlotTime() *Timestamp {
	if x != nil {
		return x.SlotTime
	}
	return nil
}

func (x *BlockInfo) GetBaker() *BakerId {
	if x != nil {
		return x.Baker
	}
	return nil
}

func (x *BlockInfo) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

func (x *BlockInfo) GetTransactionCount() uint32 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *BlockInfo) GetTransactionsEnergyCost() *Energy {
	if x != nil {
		return x.TransactionsEnergyCost
	}
	return nil
}

func (x *BlockInfo) GetTransactionsSize() uint32 {
	if x != nil {
		return x.TransactionsSize
	}
	return 0
}

func (x *BlockInfo) GetStateHash() *StateHash {
	if x != nil {
		return x.StateHash
	}
	return nil
}

func (x *BlockInfo) GetProtocolVersion() ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return ProtocolVersion_PROTOCOL_VERSION_1
}

// Request for GetPoolInfo.
type PoolInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block in which to query the pool information.
	BlockHash *BlockHashInput `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The 'BakerId' of the pool owner.
	Baker *BakerId `protobuf:"bytes,2,opt,name=baker,proto3" json:"baker,omitempty"`
}

func (x *PoolInfoRequest) Reset() {
	*x = PoolInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolInfoRequest) ProtoMessage() {}

func (x *PoolInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolInfoRequest.ProtoReflect.Descriptor instead.
func (*PoolInfoRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{136}
}

func (x *PoolInfoRequest) GetBlockHash() *BlockHashInput {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *PoolInfoRequest) GetBaker() *BakerId {
	if x != nil {
		return x.Baker
	}
	return nil
}

// A pending change to a baker pool.
type PoolPendingChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Change:
	//	*PoolPendingChange_Reduce_
	//	*PoolPendingChange_Remove_
	Change isPoolPendingChange_Change `protobuf_oneof:"change"`
}

func (x *PoolPendingChange) Reset() {
	*x = PoolPendingChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolPendingChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolPendingChange) ProtoMessage() {}

func (x *PoolPendingChange) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolPendingChange.ProtoReflect.Descriptor instead.
func (*PoolPendingChange) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{137}
}

func (m *PoolPendingChange) GetChange() isPoolPendingChange_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (x *PoolPendingChange) GetReduce() *PoolPendingChange_Reduce {
	if x, ok := x.GetChange().(*PoolPendingChange_Reduce_); ok {
		return x.Reduce
	}
	return nil
}

func (x *PoolPendingChange) GetRemove() *PoolPendingChange_Remove {
	if x, ok := x.GetChange().(*PoolPendingChange_Remove_); ok {
		return x.Remove
	}
	return nil
}

type isPoolPendingChange_Change interface {
	isPoolPendingChange_Change()
}

type PoolPendingChange_Reduce_ struct {
	Reduce *PoolPendingChange_Reduce `protobuf:"bytes,1,opt,name=reduce,proto3,oneof"`
}

type PoolPendingChange_Remove_ struct {
	Remove *PoolPendingChange_Remove `protobuf:"bytes,2,opt,name=remove,proto3,oneof"`
}

func (*PoolPendingChange_Reduce_) isPoolPendingChange_Change() {}

func (*PoolPendingChange_Remove_) isPoolPendingChange_Change() {}

// Information about a baker pool in the current reward period.
type PoolCurrentPaydayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of blocks baked in the current reward period.
	BlocksBaked uint64 `protobuf:"varint,1,opt,name=blocks_baked,json=blocksBaked,proto3" json:"blocks_baked,omitempty"`
	// Whether the baker has contributed a finalization proof in the current reward period.
	FinalizationLive bool `protobuf:"varint,2,opt,name=finalization_live,json=finalizationLive,proto3" json:"finalization_live,omitempty"`
	// The transaction fees accruing to the pool in the current reward period.
	TransactionFeesEarned *Amount `protobuf:"bytes,3,opt,name=transaction_fees_earned,json=transactionFeesEarned,proto3" json:"transaction_fees_earned,omitempty"`
	// The effective stake of the baker in the current reward period.
	EffectiveStake *Amount `protobuf:"bytes,4,opt,name=effective_stake,json=effectiveStake,proto3" json:"effective_stake,omitempty"`
	// The lottery power of the baker in the current reward period.
	LotteryPower float64 `protobuf:"fixed64,5,opt,name=lottery_power,json=lotteryPower,proto3" json:"lottery_power,omitempty"`
	// The effective equity capital of the baker for the current reward period.
	BakerEquityCapital *Amount `protobuf:"bytes,6,opt,name=baker_equity_capital,json=bakerEquityCapital,proto3" json:"baker_equity_capital,omitempty"`
	// The effective delegated capital to the pool for the current reward period.
	DelegatedCapital *Amount `protobuf:"bytes,7,opt,name=delegated_capital,json=delegatedCapital,proto3" json:"delegated_capital,omitempty"`
}

func (x *PoolCurrentPaydayInfo) Reset() {
	*x = PoolCurrentPaydayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolCurrentPaydayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolCurrentPaydayInfo) ProtoMessage() {}

func (x *PoolCurrentPaydayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolCurrentPaydayInfo.ProtoReflect.Descriptor instead.
func (*PoolCurrentPaydayInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{138}
}

func (x *PoolCurrentPaydayInfo) GetBlocksBaked() uint64 {
	if x != nil {
		return x.BlocksBaked
	}
	return 0
}

func (x *PoolCurrentPaydayInfo) GetFinalizationLive() bool {
	if x != nil {
		return x.FinalizationLive
	}
	return false
}

func (x *PoolCurrentPaydayInfo) GetTransactionFeesEarned() *Amount {
	if x != nil {
		return x.TransactionFeesEarned
	}
	return nil
}

func (x *PoolCurrentPaydayInfo) GetEffectiveStake() *Amount {
	if x != nil {
		return x.EffectiveStake
	}
	return nil
}

func (x *PoolCurrentPaydayInfo) GetLotteryPower() float64 {
	if x != nil {
		return x.LotteryPower
	}
	return 0
}

func (x *PoolCurrentPaydayInfo) GetBakerEquityCapital() *Amount {
	if x != nil {
		return x.BakerEquityCapital
	}
	return nil
}

func (x *PoolCurrentPaydayInfo) GetDelegatedCapital() *Amount {
	if x != nil {
		return x.DelegatedCapital
	}
	return nil
}

// Type for the response of GetPoolInfo.
// Contains information about a given pool at the end of a given block.
type PoolInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The 'BakerId' of the pool owner.
	Baker *BakerId `protobuf:"bytes,1,opt,name=baker,proto3" json:"baker,omitempty"`
	// The account address of the pool owner.
	Address *AccountAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The equity capital provided by the pool owner.
	EquityCapital *Amount `protobuf:"bytes,3,opt,name=equity_capital,json=equityCapital,proto3" json:"equity_capital,omitempty"`
	// The capital delegated to the pool by other accounts.
	DelegatedCapital *Amount `protobuf:"bytes,4,opt,name=delegated_capital,json=delegatedCapital,proto3" json:"delegated_capital,omitempty"`
	// The maximum amount that may be delegated to the pool, accounting for leverage and stake limits.
	DelegatedCapitalCap *Amount `protobuf:"bytes,5,opt,name=delegated_capital_cap,json=delegatedCapitalCap,proto3" json:"delegated_capital_cap,omitempty"`
	// The pool info associated with the pool: open status, metadata URL and commission rates.
	PoolInfo *BakerPoolInfo `protobuf:"bytes,6,opt,name=pool_info,json=poolInfo,proto3" json:"pool_info,omitempty"`
	// Any pending change to the equity carpital.
	EquityPendingChange *PoolPendingChange `protobuf:"bytes,7,opt,name=equity_pending_change,json=equityPendingChange,proto3,oneof" json:"equity_pending_change,omitempty"`
	// Information of the pool in the current reward period.
	CurrentPaydayInfo *PoolCurrentPaydayInfo `protobuf:"bytes,8,opt,name=current_payday_info,json=currentPaydayInfo,proto3,oneof" json:"current_payday_info,omitempty"`
	// Total capital staked across all pools, including passive delegation.
	AllPoolTotalCapital *Amount `protobuf:"bytes,9,opt,name=all_pool_total_capital,json=allPoolTotalCapital,proto3" json:"all_pool_total_capital,omitempty"`
}

func (x *PoolInfoResponse) Reset() {
	*x = PoolInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolInfoResponse) ProtoMessage() {}

func (x *PoolInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolInfoResponse.ProtoReflect.Descriptor instead.
func (*PoolInfoResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{139}
}

func (x *PoolInfoResponse) GetBaker() *BakerId {
	if x != nil {
		return x.Baker
	}
	return nil
}

func (x *PoolInfoResponse) GetAddress() *AccountAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *PoolInfoResponse) GetEquityCapital() *Amount {
	if x != nil {
		return x.EquityCapital
	}
	return nil
}

func (x *PoolInfoResponse) GetDelegatedCapital() *Amount {
	if x != nil {
		return x.DelegatedCapital
	}
	return nil
}

func (x *PoolInfoResponse) GetDelegatedCapitalCap() *Amount {
	if x != nil {
		return x.DelegatedCapitalCap
	}
	return nil
}

func (x *PoolInfoResponse) GetPoolInfo() *BakerPoolInfo {
	if x != nil {
		return x.PoolInfo
	}
	return nil
}

func (x *PoolInfoResponse) GetEquityPendingChange() *PoolPendingChange {
	if x != nil {
		return x.EquityPendingChange
	}
	return nil
}

func (x *PoolInfoResponse) GetCurrentPaydayInfo() *PoolCurrentPaydayInfo {
	if x != nil {
		return x.CurrentPaydayInfo
	}
	return nil
}

func (x *PoolInfoResponse) GetAllPoolTotalCapital() *Amount {
	if x != nil {
		return x.AllPoolTotalCapital
	}
	return nil
}

// Type for the response of GetPassiveDelegationInfo.
// Contains information about passive delegators at the end of a given block.
type PassiveDelegationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total capital delegated passively.
	DelegatedCapital *Amount `protobuf:"bytes,1,opt,name=delegated_capital,json=delegatedCapital,proto3" json:"delegated_capital,omitempty"`
	// The passive delegation commission rates.
	CommissionRates *CommissionRates `protobuf:"bytes,2,opt,name=commission_rates,json=commissionRates,proto3" json:"commission_rates,omitempty"`
	// The transaction fees accruing to the passive delegators in the current reward period.
	CurrentPaydayTransactionFeesEarned *Amount `protobuf:"bytes,3,opt,name=current_payday_transaction_fees_earned,json=currentPaydayTransactionFeesEarned,proto3" json:"current_payday_transaction_fees_earned,omitempty"`
	// The effective delegated capital of passive delegators for the current reward period.
	CurrentPaydayDelegatedCapital *Amount `protobuf:"bytes,4,opt,name=current_payday_delegated_capital,json=currentPaydayDelegatedCapital,proto3" json:"current_payday_delegated_capital,omitempty"`
	// Total capital staked across all pools, including passive delegation.
	AllPoolTotalCapital *Amount `protobuf:"bytes,5,opt,name=all_pool_total_capital,json=allPoolTotalCapital,proto3" json:"all_pool_total_capital,omitempty"`
}

func (x *PassiveDelegationInfo) Reset() {
	*x = PassiveDelegationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveDelegationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveDelegationInfo) ProtoMessage() {}

func (x *PassiveDelegationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveDelegationInfo.ProtoReflect.Descriptor instead.
func (*PassiveDelegationInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{140}
}

func (x *PassiveDelegationInfo) GetDelegatedCapital() *Amount {
	if x != nil {
		return x.DelegatedCapital
	}
	return nil
}

func (x *PassiveDelegationInfo) GetCommissionRates() *CommissionRates {
	if x != nil {
		return x.CommissionRates
	}
	return nil
}

func (x *PassiveDelegationInfo) GetCurrentPaydayTransactionFeesEarned() *Amount {
	if x != nil {
		return x.CurrentPaydayTransactionFeesEarned
	}
	return nil
}

func (x *PassiveDelegationInfo) GetCurrentPaydayDelegatedCapital() *Amount {
	if x != nil {
		return x.CurrentPaydayDelegatedCapital
	}
	return nil
}

func (x *PassiveDelegationInfo) GetAllPoolTotalCapital() *Amount {
	if x != nil {
		return x.AllPoolTotalCapital
	}
	return nil
}

// Request for GetBlocksAtHeight.
type BlocksAtHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BlocksAtHeight:
	//	*BlocksAtHeightRequest_Absolute_
	//	*BlocksAtHeightRequest_Relative_
	BlocksAtHeight isBlocksAtHeightRequest_BlocksAtHeight `protobuf_oneof:"blocks_at_height"`
}

func (x *BlocksAtHeightRequest) Reset() {
	*x = BlocksAtHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksAtHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksAtHeightRequest) ProtoMessage() {}

func (x *BlocksAtHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksAtHeightRequest.ProtoReflect.Descriptor instead.
func (*BlocksAtHeightRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{141}
}

func (m *BlocksAtHeightRequest) GetBlocksAtHeight() isBlocksAtHeightRequest_BlocksAtHeight {
	if m != nil {
		return m.BlocksAtHeight
	}
	return nil
}

func (x *BlocksAtHeightRequest) GetAbsolute() *BlocksAtHeightRequest_Absolute {
	if x, ok := x.GetBlocksAtHeight().(*BlocksAtHeightRequest_Absolute_); ok {
		return x.Absolute
	}
	return nil
}

func (x *BlocksAtHeightRequest) GetRelative() *BlocksAtHeightRequest_Relative {
	if x, ok := x.GetBlocksAtHeight().(*BlocksAtHeightRequest_Relative_); ok {
		return x.Relative
	}
	return nil
}

type isBlocksAtHeightRequest_BlocksAtHeight interface {
	isBlocksAtHeightRequest_BlocksAtHeight()
}

type BlocksAtHeightRequest_Absolute_ struct {
	Absolute *BlocksAtHeightRequest_Absolute `protobuf:"bytes,1,opt,name=absolute,proto3,oneof"`
}

type BlocksAtHeightRequest_Relative_ struct {
	Relative *BlocksAtHeightRequest_Relative `protobuf:"bytes,2,opt,name=relative,proto3,oneof"`
}

func (*BlocksAtHeightRequest_Absolute_) isBlocksAtHeightRequest_BlocksAtHeight() {}

func (*BlocksAtHeightRequest_Relative_) isBlocksAtHeightRequest_BlocksAtHeight() {}

// Response for GetBlocksAtHeight.
type BlocksAtHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Live blocks at the given height.
	Blocks []*BlockHash `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *BlocksAtHeightResponse) Reset() {
	*x = BlocksAtHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksAtHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksAtHeightResponse) ProtoMessage() {}

func (x *BlocksAtHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksAtHeightResponse.ProtoReflect.Descriptor instead.
func (*BlocksAtHeightResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{142}
}

func (x *BlocksAtHeightResponse) GetBlocks() []*BlockHash {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// Type for the response of GetTokenomicsInfo.
// Contains information related to tokenomics at the end of a given block.
type TokenomicsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Tokenomics:
	//	*TokenomicsInfo_V0_
	//	*TokenomicsInfo_V1_
	Tokenomics isTokenomicsInfo_Tokenomics `protobuf_oneof:"tokenomics"`
}

func (x *TokenomicsInfo) Reset() {
	*x = TokenomicsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenomicsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenomicsInfo) ProtoMessage() {}

func (x *TokenomicsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenomicsInfo.ProtoReflect.Descriptor instead.
func (*TokenomicsInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{143}
}

func (m *TokenomicsInfo) GetTokenomics() isTokenomicsInfo_Tokenomics {
	if m != nil {
		return m.Tokenomics
	}
	return nil
}

func (x *TokenomicsInfo) GetV0() *TokenomicsInfo_V0 {
	if x, ok := x.GetTokenomics().(*TokenomicsInfo_V0_); ok {
		return x.V0
	}
	return nil
}

func (x *TokenomicsInfo) GetV1() *TokenomicsInfo_V1 {
	if x, ok := x.GetTokenomics().(*TokenomicsInfo_V1_); ok {
		return x.V1
	}
	return nil
}

type isTokenomicsInfo_Tokenomics interface {
	isTokenomicsInfo_Tokenomics()
}

type TokenomicsInfo_V0_ struct {
	V0 *TokenomicsInfo_V0 `protobuf:"bytes,1,opt,name=v0,proto3,oneof"`
}

type TokenomicsInfo_V1_ struct {
	V1 *TokenomicsInfo_V1 `protobuf:"bytes,2,opt,name=v1,proto3,oneof"`
}

func (*TokenomicsInfo_V0_) isTokenomicsInfo_Tokenomics() {}

func (*TokenomicsInfo_V1_) isTokenomicsInfo_Tokenomics() {}

// Request for InvokeInstance.
type InvokeInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block to invoke the contract. The invocation will be at the end of the given block.
	BlockHash *BlockHashInput `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Invoker of the contract. If this is not supplied then the contract will be
	// invoked by an account with address 0, no credentials and sufficient amount
	// of CCD to cover the transfer amount. If given, the relevant address (either
	// account or contract) must exist in the blockstate.
	Invoker *Address `protobuf:"bytes,2,opt,name=invoker,proto3,oneof" json:"invoker,omitempty"`
	// Address of the contract instance to invoke.
	Instance *ContractAddress `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// Amount to invoke the smart contract instance with.
	Amount *Amount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The entrypoint of the smart contract instance to invoke.
	Entrypoint *ReceiveName `protobuf:"bytes,5,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	// The parameter bytes to include in the invocation of the entrypoint.
	Parameter *Parameter `protobuf:"bytes,6,opt,name=parameter,proto3" json:"parameter,omitempty"`
	// And what amount of energy to allow for execution. This cannot exceed
	// `100_000_000_000`, but in practice it should be much less. The maximum
	// block energy is typically in the range of a few million.
	Energy *Energy `protobuf:"bytes,7,opt,name=energy,proto3" json:"energy,omitempty"`
}

func (x *InvokeInstanceRequest) Reset() {
	*x = InvokeInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeInstanceRequest) ProtoMessage() {}

func (x *InvokeInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeInstanceRequest.ProtoReflect.Descriptor instead.
func (*InvokeInstanceRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{144}
}

func (x *InvokeInstanceRequest) GetBlockHash() *BlockHashInput {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *InvokeInstanceRequest) GetInvoker() *Address {
	if x != nil {
		return x.Invoker
	}
	return nil
}

func (x *InvokeInstanceRequest) GetInstance() *ContractAddress {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InvokeInstanceRequest) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InvokeInstanceRequest) GetEntrypoint() *ReceiveName {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *InvokeInstanceRequest) GetParameter() *Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *InvokeInstanceRequest) GetEnergy() *Energy {
	if x != nil {
		return x.Energy
	}
	return nil
}

// Response type for InvokeInstance.
type InvokeInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*InvokeInstanceResponse_Success_
	//	*InvokeInstanceResponse_Failure_
	Result isInvokeInstanceResponse_Result `protobuf_oneof:"result"`
}

func (x *InvokeInstanceResponse) Reset() {
	*x = InvokeInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeInstanceResponse) ProtoMessage() {}

func (x *InvokeInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeInstanceResponse.ProtoReflect.Descriptor instead.
func (*InvokeInstanceResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{145}
}

func (m *InvokeInstanceResponse) GetResult() isInvokeInstanceResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *InvokeInstanceResponse) GetSuccess() *InvokeInstanceResponse_Success {
	if x, ok := x.GetResult().(*InvokeInstanceResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *InvokeInstanceResponse) GetFailure() *InvokeInstanceResponse_Failure {
	if x, ok := x.GetResult().(*InvokeInstanceResponse_Failure_); ok {
		return x.Failure
	}
	return nil
}

type isInvokeInstanceResponse_Result interface {
	isInvokeInstanceResponse_Result()
}

type InvokeInstanceResponse_Success_ struct {
	Success *InvokeInstanceResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type InvokeInstanceResponse_Failure_ struct {
	Failure *InvokeInstanceResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*InvokeInstanceResponse_Success_) isInvokeInstanceResponse_Result() {}

func (*InvokeInstanceResponse_Failure_) isInvokeInstanceResponse_Result() {}

// Request for GetPoolDelegators and GetPoolDelegatorsRewardPeriod.
type GetPoolDelegatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block in which to query the delegators.
	BlockHash *BlockHashInput `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The 'BakerId' of the pool owner.
	Baker *BakerId `protobuf:"bytes,2,opt,name=baker,proto3" json:"baker,omitempty"`
}

func (x *GetPoolDelegatorsRequest) Reset() {
	*x = GetPoolDelegatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoolDelegatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolDelegatorsRequest) ProtoMessage() {}

func (x *GetPoolDelegatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolDelegatorsRequest.ProtoReflect.Descriptor instead.
func (*GetPoolDelegatorsRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{146}
}

func (x *GetPoolDelegatorsRequest) GetBlockHash() *BlockHashInput {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *GetPoolDelegatorsRequest) GetBaker() *BakerId {
	if x != nil {
		return x.Baker
	}
	return nil
}

// Stream item for GetPoolDelegators and GetPassiveDelegators.
type DelegatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The delegator account address.
	Account *AccountAddress `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The amount of stake currently staked to the pool.
	Stake *Amount `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	// Pending change to the current stake of the delegator.
	PendingChange *StakePendingChange `protobuf:"bytes,3,opt,name=pending_change,json=pendingChange,proto3,oneof" json:"pending_change,omitempty"`
}

func (x *DelegatorInfo) Reset() {
	*x = DelegatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorInfo) ProtoMessage() {}

func (x *DelegatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorInfo.ProtoReflect.Descriptor instead.
func (*DelegatorInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{147}
}

func (x *DelegatorInfo) GetAccount() *AccountAddress {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *DelegatorInfo) GetStake() *Amount {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *DelegatorInfo) GetPendingChange() *StakePendingChange {
	if x != nil {
		return x.PendingChange
	}
	return nil
}

// Stream item for GetPoolDelegatorsRewardPeriod and GetPassiveDelegatorsRewardPeriod.
type DelegatorRewardPeriodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The delegator account address.
	Account *AccountAddress `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The amount of stake currently staked to the pool.
	Stake *Amount `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (x *DelegatorRewardPeriodInfo) Reset() {
	*x = DelegatorRewardPeriodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorRewardPeriodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorRewardPeriodInfo) ProtoMessage() {}

func (x *DelegatorRewardPeriodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorRewardPeriodInfo.ProtoReflect.Descriptor instead.
func (*DelegatorRewardPeriodInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{148}
}

func (x *DelegatorRewardPeriodInfo) GetAccount() *AccountAddress {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *DelegatorRewardPeriodInfo) GetStake() *Amount {
	if x != nil {
		return x.Stake
	}
	return nil
}

// Response type for GetBranches.
type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the block.
	BlockHash *BlockHash `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Further blocks branching of this block.
	Children []*Branch `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{149}
}

func (x *Branch) GetBlockHash() *BlockHash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Branch) GetChildren() []*Branch {
	if x != nil {
		return x.Children
	}
	return nil
}

// The leadership election nonce is an unpredictable value updated once an
// epoch to make sure that bakers cannot predict too far in the future when
// they will win the right to bake blocks.
type LeadershipElectionNonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LeadershipElectionNonce) Reset() {
	*x = LeadershipElectionNonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadershipElectionNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadershipElectionNonce) ProtoMessage() {}

func (x *LeadershipElectionNonce) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadershipElectionNonce.ProtoReflect.Descriptor instead.
func (*LeadershipElectionNonce) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{150}
}

func (x *LeadershipElectionNonce) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Response type for GetElectionInfo.
// Contains information related to baker election for a perticular block.
type ElectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baking lottery election difficulty.
	ElectionDifficulty *ElectionDifficulty `protobuf:"bytes,1,opt,name=election_difficulty,json=electionDifficulty,proto3" json:"election_difficulty,omitempty"`
	// Current leadership election nonce for the lottery.
	ElectionNonce *LeadershipElectionNonce `protobuf:"bytes,2,opt,name=election_nonce,json=electionNonce,proto3" json:"election_nonce,omitempty"`
	// List of the currently eligible bakers.
	BakerElectionInfo []*ElectionInfo_Baker `protobuf:"bytes,3,rep,name=baker_election_info,json=bakerElectionInfo,proto3" json:"baker_election_info,omitempty"`
}

func (x *ElectionInfo) Reset() {
	*x = ElectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionInfo) ProtoMessage() {}

func (x *ElectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionInfo.ProtoReflect.Descriptor instead.
func (*ElectionInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{151}
}

func (x *ElectionInfo) GetElectionDifficulty() *ElectionDifficulty {
	if x != nil {
		return x.ElectionDifficulty
	}
	return nil
}

func (x *ElectionInfo) GetElectionNonce() *LeadershipElectionNonce {
	if x != nil {
		return x.ElectionNonce
	}
	return nil
}

func (x *ElectionInfo) GetBakerElectionInfo() []*ElectionInfo_Baker {
	if x != nil {
		return x.BakerElectionInfo
	}
	return nil
}

// A protocol generated event that is not directly caused by a transaction. This
// includes minting new CCD, rewarding different bakers and delegators, etc.
type BlockSpecialEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*BlockSpecialEvent_BakingRewards_
	//	*BlockSpecialEvent_Mint_
	//	*BlockSpecialEvent_FinalizationRewards_
	//	*BlockSpecialEvent_BlockReward_
	//	*BlockSpecialEvent_PaydayFoundationReward_
	//	*BlockSpecialEvent_PaydayAccountReward_
	//	*BlockSpecialEvent_BlockAccrueReward_
	//	*BlockSpecialEvent_PaydayPoolReward_
	Event isBlockSpecialEvent_Event `protobuf_oneof:"event"`
}

func (x *BlockSpecialEvent) Reset() {
	*x = BlockSpecialEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent) ProtoMessage() {}

func (x *BlockSpecialEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152}
}

func (m *BlockSpecialEvent) GetEvent() isBlockSpecialEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *BlockSpecialEvent) GetBakingRewards() *BlockSpecialEvent_BakingRewards {
	if x, ok := x.GetEvent().(*BlockSpecialEvent_BakingRewards_); ok {
		return x.BakingRewards
	}
	return nil
}

func (x *BlockSpecialEvent) GetMint() *BlockSpecialEvent_Mint {
	if x, ok := x.GetEvent().(*BlockSpecialEvent_Mint_); ok {
		return x.Mint
	}
	return nil
}

func (x *BlockSpecialEvent) GetFinalizationRewards() *BlockSpecialEvent_FinalizationRewards {
	if x, ok := x.GetEvent().(*BlockSpecialEvent_FinalizationRewards_); ok {
		return x.FinalizationRewards
	}
	return nil
}

func (x *BlockSpecialEvent) GetBlockReward() *BlockSpecialEvent_BlockReward {
	if x, ok := x.GetEvent().(*BlockSpecialEvent_BlockReward_); ok {
		return x.BlockReward
	}
	return nil
}

func (x *BlockSpecialEvent) GetPaydayFoundationReward() *BlockSpecialEvent_PaydayFoundationReward {
	if x, ok := x.GetEvent().(*BlockSpecialEvent_PaydayFoundationReward_); ok {
		return x.PaydayFoundationReward
	}
	return nil
}

func (x *BlockSpecialEvent) GetPaydayAccountReward() *BlockSpecialEvent_PaydayAccountReward {
	if x, ok := x.GetEvent().(*BlockSpecialEvent_PaydayAccountReward_); ok {
		return x.PaydayAccountReward
	}
	return nil
}

func (x *BlockSpecialEvent) GetBlockAccrueReward() *BlockSpecialEvent_BlockAccrueReward {
	if x, ok := x.GetEvent().(*BlockSpecialEvent_BlockAccrueReward_); ok {
		return x.BlockAccrueReward
	}
	return nil
}

func (x *BlockSpecialEvent) GetPaydayPoolReward() *BlockSpecialEvent_PaydayPoolReward {
	if x, ok := x.GetEvent().(*BlockSpecialEvent_PaydayPoolReward_); ok {
		return x.PaydayPoolReward
	}
	return nil
}

type isBlockSpecialEvent_Event interface {
	isBlockSpecialEvent_Event()
}

type BlockSpecialEvent_BakingRewards_ struct {
	BakingRewards *BlockSpecialEvent_BakingRewards `protobuf:"bytes,1,opt,name=baking_rewards,json=bakingRewards,proto3,oneof"`
}

type BlockSpecialEvent_Mint_ struct {
	Mint *BlockSpecialEvent_Mint `protobuf:"bytes,2,opt,name=mint,proto3,oneof"`
}

type BlockSpecialEvent_FinalizationRewards_ struct {
	FinalizationRewards *BlockSpecialEvent_FinalizationRewards `protobuf:"bytes,3,opt,name=finalization_rewards,json=finalizationRewards,proto3,oneof"`
}

type BlockSpecialEvent_BlockReward_ struct {
	BlockReward *BlockSpecialEvent_BlockReward `protobuf:"bytes,4,opt,name=block_reward,json=blockReward,proto3,oneof"`
}

type BlockSpecialEvent_PaydayFoundationReward_ struct {
	PaydayFoundationReward *BlockSpecialEvent_PaydayFoundationReward `protobuf:"bytes,5,opt,name=payday_foundation_reward,json=paydayFoundationReward,proto3,oneof"`
}

type BlockSpecialEvent_PaydayAccountReward_ struct {
	PaydayAccountReward *BlockSpecialEvent_PaydayAccountReward `protobuf:"bytes,6,opt,name=payday_account_reward,json=paydayAccountReward,proto3,oneof"`
}

type BlockSpecialEvent_BlockAccrueReward_ struct {
	BlockAccrueReward *BlockSpecialEvent_BlockAccrueReward `protobuf:"bytes,7,opt,name=block_accrue_reward,json=blockAccrueReward,proto3,oneof"`
}

type BlockSpecialEvent_PaydayPoolReward_ struct {
	PaydayPoolReward *BlockSpecialEvent_PaydayPoolReward `protobuf:"bytes,8,opt,name=payday_pool_reward,json=paydayPoolReward,proto3,oneof"`
}

func (*BlockSpecialEvent_BakingRewards_) isBlockSpecialEvent_Event() {}

func (*BlockSpecialEvent_Mint_) isBlockSpecialEvent_Event() {}

func (*BlockSpecialEvent_FinalizationRewards_) isBlockSpecialEvent_Event() {}

func (*BlockSpecialEvent_BlockReward_) isBlockSpecialEvent_Event() {}

func (*BlockSpecialEvent_PaydayFoundationReward_) isBlockSpecialEvent_Event() {}

func (*BlockSpecialEvent_PaydayAccountReward_) isBlockSpecialEvent_Event() {}

func (*BlockSpecialEvent_BlockAccrueReward_) isBlockSpecialEvent_Event() {}

func (*BlockSpecialEvent_PaydayPoolReward_) isBlockSpecialEvent_Event() {}

// A pending update.
type PendingUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The effective time of the update.
	EffectiveTime *TransactionTime `protobuf:"bytes,1,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	// The effect of the update.
	//
	// Types that are assignable to Effect:
	//	*PendingUpdate_RootKeys
	//	*PendingUpdate_Level1Keys
	//	*PendingUpdate_Level2KeysCpv_0
	//	*PendingUpdate_Level2KeysCpv_1
	//	*PendingUpdate_Protocol
	//	*PendingUpdate_ElectionDifficulty
	//	*PendingUpdate_EuroPerEnergy
	//	*PendingUpdate_MicroCcdPerEuro
	//	*PendingUpdate_FoundationAccount
	//	*PendingUpdate_MintDistributionCpv_0
	//	*PendingUpdate_MintDistributionCpv_1
	//	*PendingUpdate_TransactionFeeDistribution
	//	*PendingUpdate_GasRewards
	//	*PendingUpdate_PoolParametersCpv_0
	//	*PendingUpdate_PoolParametersCpv_1
	//	*PendingUpdate_AddAnonymityRevoker
	//	*PendingUpdate_AddIdentityProvider
	//	*PendingUpdate_CooldownParameters
	//	*PendingUpdate_TimeParameters
	//	*PendingUpdate_GasRewardsCpv_2
	//	*PendingUpdate_TimeoutParameters
	//	*PendingUpdate_MinBlockTime
	//	*PendingUpdate_BlockEnergyLimit
	//	*PendingUpdate_FinalizationCommitteeParameters
	Effect isPendingUpdate_Effect `protobuf_oneof:"effect"`
}

func (x *PendingUpdate) Reset() {
	*x = PendingUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingUpdate) ProtoMessage() {}

func (x *PendingUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingUpdate.ProtoReflect.Descriptor instead.
func (*PendingUpdate) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{153}
}

func (x *PendingUpdate) GetEffectiveTime() *TransactionTime {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (m *PendingUpdate) GetEffect() isPendingUpdate_Effect {
	if m != nil {
		return m.Effect
	}
	return nil
}

func (x *PendingUpdate) GetRootKeys() *HigherLevelKeys {
	if x, ok := x.GetEffect().(*PendingUpdate_RootKeys); ok {
		return x.RootKeys
	}
	return nil
}

func (x *PendingUpdate) GetLevel1Keys() *HigherLevelKeys {
	if x, ok := x.GetEffect().(*PendingUpdate_Level1Keys); ok {
		return x.Level1Keys
	}
	return nil
}

func (x *PendingUpdate) GetLevel2KeysCpv_0() *AuthorizationsV0 {
	if x, ok := x.GetEffect().(*PendingUpdate_Level2KeysCpv_0); ok {
		return x.Level2KeysCpv_0
	}
	return nil
}

func (x *PendingUpdate) GetLevel2KeysCpv_1() *AuthorizationsV1 {
	if x, ok := x.GetEffect().(*PendingUpdate_Level2KeysCpv_1); ok {
		return x.Level2KeysCpv_1
	}
	return nil
}

func (x *PendingUpdate) GetProtocol() *ProtocolUpdate {
	if x, ok := x.GetEffect().(*PendingUpdate_Protocol); ok {
		return x.Protocol
	}
	return nil
}

func (x *PendingUpdate) GetElectionDifficulty() *ElectionDifficulty {
	if x, ok := x.GetEffect().(*PendingUpdate_ElectionDifficulty); ok {
		return x.ElectionDifficulty
	}
	return nil
}

func (x *PendingUpdate) GetEuroPerEnergy() *ExchangeRate {
	if x, ok := x.GetEffect().(*PendingUpdate_EuroPerEnergy); ok {
		return x.EuroPerEnergy
	}
	return nil
}

func (x *PendingUpdate) GetMicroCcdPerEuro() *ExchangeRate {
	if x, ok := x.GetEffect().(*PendingUpdate_MicroCcdPerEuro); ok {
		return x.MicroCcdPerEuro
	}
	return nil
}

func (x *PendingUpdate) GetFoundationAccount() *AccountAddress {
	if x, ok := x.GetEffect().(*PendingUpdate_FoundationAccount); ok {
		return x.FoundationAccount
	}
	return nil
}

func (x *PendingUpdate) GetMintDistributionCpv_0() *MintDistributionCpv0 {
	if x, ok := x.GetEffect().(*PendingUpdate_MintDistributionCpv_0); ok {
		return x.MintDistributionCpv_0
	}
	return nil
}

func (x *PendingUpdate) GetMintDistributionCpv_1() *MintDistributionCpv1 {
	if x, ok := x.GetEffect().(*PendingUpdate_MintDistributionCpv_1); ok {
		return x.MintDistributionCpv_1
	}
	return nil
}

func (x *PendingUpdate) GetTransactionFeeDistribution() *TransactionFeeDistribution {
	if x, ok := x.GetEffect().(*PendingUpdate_TransactionFeeDistribution); ok {
		return x.TransactionFeeDistribution
	}
	return nil
}

func (x *PendingUpdate) GetGasRewards() *GasRewards {
	if x, ok := x.GetEffect().(*PendingUpdate_GasRewards); ok {
		return x.GasRewards
	}
	return nil
}

func (x *PendingUpdate) GetPoolParametersCpv_0() *BakerStakeThreshold {
	if x, ok := x.GetEffect().(*PendingUpdate_PoolParametersCpv_0); ok {
		return x.PoolParametersCpv_0
	}
	return nil
}

func (x *PendingUpdate) GetPoolParametersCpv_1() *PoolParametersCpv1 {
	if x, ok := x.GetEffect().(*PendingUpdate_PoolParametersCpv_1); ok {
		return x.PoolParametersCpv_1
	}
	return nil
}

func (x *PendingUpdate) GetAddAnonymityRevoker() *ArInfo {
	if x, ok := x.GetEffect().(*PendingUpdate_AddAnonymityRevoker); ok {
		return x.AddAnonymityRevoker
	}
	return nil
}

func (x *PendingUpdate) GetAddIdentityProvider() *IpInfo {
	if x, ok := x.GetEffect().(*PendingUpdate_AddIdentityProvider); ok {
		return x.AddIdentityProvider
	}
	return nil
}

func (x *PendingUpdate) GetCooldownParameters() *CooldownParametersCpv1 {
	if x, ok := x.GetEffect().(*PendingUpdate_CooldownParameters); ok {
		return x.CooldownParameters
	}
	return nil
}

func (x *PendingUpdate) GetTimeParameters() *TimeParametersCpv1 {
	if x, ok := x.GetEffect().(*PendingUpdate_TimeParameters); ok {
		return x.TimeParameters
	}
	return nil
}

func (x *PendingUpdate) GetGasRewardsCpv_2() *GasRewardsCpv2 {
	if x, ok := x.GetEffect().(*PendingUpdate_GasRewardsCpv_2); ok {
		return x.GasRewardsCpv_2
	}
	return nil
}

func (x *PendingUpdate) GetTimeoutParameters() *TimeoutParameters {
	if x, ok := x.GetEffect().(*PendingUpdate_TimeoutParameters); ok {
		return x.TimeoutParameters
	}
	return nil
}

func (x *PendingUpdate) GetMinBlockTime() *Duration {
	if x, ok := x.GetEffect().(*PendingUpdate_MinBlockTime); ok {
		return x.MinBlockTime
	}
	return nil
}

func (x *PendingUpdate) GetBlockEnergyLimit() *Energy {
	if x, ok := x.GetEffect().(*PendingUpdate_BlockEnergyLimit); ok {
		return x.BlockEnergyLimit
	}
	return nil
}

func (x *PendingUpdate) GetFinalizationCommitteeParameters() *FinalizationCommitteeParameters {
	if x, ok := x.GetEffect().(*PendingUpdate_FinalizationCommitteeParameters); ok {
		return x.FinalizationCommitteeParameters
	}
	return nil
}

type isPendingUpdate_Effect interface {
	isPendingUpdate_Effect()
}

type PendingUpdate_RootKeys struct {
	// Updates to the root keys.
	RootKeys *HigherLevelKeys `protobuf:"bytes,2,opt,name=root_keys,json=rootKeys,proto3,oneof"`
}

type PendingUpdate_Level1Keys struct {
	// Updates to the level 1 keys.
	Level1Keys *HigherLevelKeys `protobuf:"bytes,3,opt,name=level1_keys,json=level1Keys,proto3,oneof"`
}

type PendingUpdate_Level2KeysCpv_0 struct {
	// Updates to the level 2 keys.
	Level2KeysCpv_0 *AuthorizationsV0 `protobuf:"bytes,4,opt,name=level2_keys_cpv_0,json=level2KeysCpv0,proto3,oneof"`
}

type PendingUpdate_Level2KeysCpv_1 struct {
	// Updates to the level 2 keys.
	Level2KeysCpv_1 *AuthorizationsV1 `protobuf:"bytes,5,opt,name=level2_keys_cpv_1,json=level2KeysCpv1,proto3,oneof"`
}

type PendingUpdate_Protocol struct {
	// Protocol updates.
	Protocol *ProtocolUpdate `protobuf:"bytes,6,opt,name=protocol,proto3,oneof"`
}

type PendingUpdate_ElectionDifficulty struct {
	// Updates to the election difficulty parameter.
	ElectionDifficulty *ElectionDifficulty `protobuf:"bytes,7,opt,name=election_difficulty,json=electionDifficulty,proto3,oneof"`
}

type PendingUpdate_EuroPerEnergy struct {
	// Updates to the euro:energy exchange rate.
	EuroPerEnergy *ExchangeRate `protobuf:"bytes,8,opt,name=euro_per_energy,json=euroPerEnergy,proto3,oneof"`
}

type PendingUpdate_MicroCcdPerEuro struct {
	// Updates to the CCD:EUR exchange rate.
	MicroCcdPerEuro *ExchangeRate `protobuf:"bytes,9,opt,name=micro_ccd_per_euro,json=microCcdPerEuro,proto3,oneof"`
}

type PendingUpdate_FoundationAccount struct {
	// Updates to the foundation account.
	FoundationAccount *AccountAddress `protobuf:"bytes,10,opt,name=foundation_account,json=foundationAccount,proto3,oneof"`
}

type PendingUpdate_MintDistributionCpv_0 struct {
	// Updates to the mint distribution. Is only relevant prior to protocol version 4.
	MintDistributionCpv_0 *MintDistributionCpv0 `protobuf:"bytes,11,opt,name=mint_distribution_cpv_0,json=mintDistributionCpv0,proto3,oneof"`
}

type PendingUpdate_MintDistributionCpv_1 struct {
	// The mint distribution was updated. Introduced in protocol version 4.
	MintDistributionCpv_1 *MintDistributionCpv1 `protobuf:"bytes,12,opt,name=mint_distribution_cpv_1,json=mintDistributionCpv1,proto3,oneof"`
}

type PendingUpdate_TransactionFeeDistribution struct {
	// Updates to the transaction fee distribution.
	TransactionFeeDistribution *TransactionFeeDistribution `protobuf:"bytes,13,opt,name=transaction_fee_distribution,json=transactionFeeDistribution,proto3,oneof"`
}

type PendingUpdate_GasRewards struct {
	// Updates to the GAS rewards.
	GasRewards *GasRewards `protobuf:"bytes,14,opt,name=gas_rewards,json=gasRewards,proto3,oneof"`
}

type PendingUpdate_PoolParametersCpv_0 struct {
	// Updates baker stake threshold. Is only relevant prior to protocol version 4.
	PoolParametersCpv_0 *BakerStakeThreshold `protobuf:"bytes,15,opt,name=pool_parameters_cpv_0,json=poolParametersCpv0,proto3,oneof"`
}

type PendingUpdate_PoolParametersCpv_1 struct {
	// Updates pool parameters. Introduced in protocol version 4.
	PoolParametersCpv_1 *PoolParametersCpv1 `protobuf:"bytes,16,opt,name=pool_parameters_cpv_1,json=poolParametersCpv1,proto3,oneof"`
}

type PendingUpdate_AddAnonymityRevoker struct {
	// Adds a new anonymity revoker.
	AddAnonymityRevoker *ArInfo `protobuf:"bytes,17,opt,name=add_anonymity_revoker,json=addAnonymityRevoker,proto3,oneof"`
}

type PendingUpdate_AddIdentityProvider struct {
	// Adds a new identity provider.
	AddIdentityProvider *IpInfo `protobuf:"bytes,18,opt,name=add_identity_provider,json=addIdentityProvider,proto3,oneof"`
}

type PendingUpdate_CooldownParameters struct {
	// Updates to cooldown parameters for chain parameters version 1 introduced in protocol version 4.
	CooldownParameters *CooldownParametersCpv1 `protobuf:"bytes,19,opt,name=cooldown_parameters,json=cooldownParameters,proto3,oneof"`
}

type PendingUpdate_TimeParameters struct {
	// Updates to time parameters for chain parameters version 1 introduced in protocol version 4.
	TimeParameters *TimeParametersCpv1 `protobuf:"bytes,20,opt,name=time_parameters,json=timeParameters,proto3,oneof"`
}

type PendingUpdate_GasRewardsCpv_2 struct {
	// Updates to the GAS rewards effective from protocol version 6 (chain parameters version 2).
	GasRewardsCpv_2 *GasRewardsCpv2 `protobuf:"bytes,21,opt,name=gas_rewards_cpv_2,json=gasRewardsCpv2,proto3,oneof"`
}

type PendingUpdate_TimeoutParameters struct {
	// Updates to the consensus timeouts for chain parameters version 2.
	TimeoutParameters *TimeoutParameters `protobuf:"bytes,22,opt,name=timeout_parameters,json=timeoutParameters,proto3,oneof"`
}

type PendingUpdate_MinBlockTime struct {
	// Updates to the the minimum time between blocks for chain parameters version 2.
	MinBlockTime *Duration `protobuf:"bytes,23,opt,name=min_block_time,json=minBlockTime,proto3,oneof"`
}

type PendingUpdate_BlockEnergyLimit struct {
	// Updates to the block energy limit for chain parameters version 2.
	BlockEnergyLimit *Energy `protobuf:"bytes,24,opt,name=block_energy_limit,json=blockEnergyLimit,proto3,oneof"`
}

type PendingUpdate_FinalizationCommitteeParameters struct {
	// Updates to the finalization committee for for chain parameters version 2.
	FinalizationCommitteeParameters *FinalizationCommitteeParameters `protobuf:"bytes,25,opt,name=finalization_committee_parameters,json=finalizationCommitteeParameters,proto3,oneof"`
}

func (*PendingUpdate_RootKeys) isPendingUpdate_Effect() {}

func (*PendingUpdate_Level1Keys) isPendingUpdate_Effect() {}

func (*PendingUpdate_Level2KeysCpv_0) isPendingUpdate_Effect() {}

func (*PendingUpdate_Level2KeysCpv_1) isPendingUpdate_Effect() {}

func (*PendingUpdate_Protocol) isPendingUpdate_Effect() {}

func (*PendingUpdate_ElectionDifficulty) isPendingUpdate_Effect() {}

func (*PendingUpdate_EuroPerEnergy) isPendingUpdate_Effect() {}

func (*PendingUpdate_MicroCcdPerEuro) isPendingUpdate_Effect() {}

func (*PendingUpdate_FoundationAccount) isPendingUpdate_Effect() {}

func (*PendingUpdate_MintDistributionCpv_0) isPendingUpdate_Effect() {}

func (*PendingUpdate_MintDistributionCpv_1) isPendingUpdate_Effect() {}

func (*PendingUpdate_TransactionFeeDistribution) isPendingUpdate_Effect() {}

func (*PendingUpdate_GasRewards) isPendingUpdate_Effect() {}

func (*PendingUpdate_PoolParametersCpv_0) isPendingUpdate_Effect() {}

func (*PendingUpdate_PoolParametersCpv_1) isPendingUpdate_Effect() {}

func (*PendingUpdate_AddAnonymityRevoker) isPendingUpdate_Effect() {}

func (*PendingUpdate_AddIdentityProvider) isPendingUpdate_Effect() {}

func (*PendingUpdate_CooldownParameters) isPendingUpdate_Effect() {}

func (*PendingUpdate_TimeParameters) isPendingUpdate_Effect() {}

func (*PendingUpdate_GasRewardsCpv_2) isPendingUpdate_Effect() {}

func (*PendingUpdate_TimeoutParameters) isPendingUpdate_Effect() {}

func (*PendingUpdate_MinBlockTime) isPendingUpdate_Effect() {}

func (*PendingUpdate_BlockEnergyLimit) isPendingUpdate_Effect() {}

func (*PendingUpdate_FinalizationCommitteeParameters) isPendingUpdate_Effect() {}

// The response for `GetNextUpdateSequenceNumbers`.
type NextUpdateSequenceNumbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updates to the root keys.
	RootKeys *SequenceNumber `protobuf:"bytes,1,opt,name=root_keys,json=rootKeys,proto3" json:"root_keys,omitempty"`
	// Updates to the level 1 keys.
	Level1Keys *SequenceNumber `protobuf:"bytes,2,opt,name=level1_keys,json=level1Keys,proto3" json:"level1_keys,omitempty"`
	// Updates to the level 2 keys.
	Level2Keys *SequenceNumber `protobuf:"bytes,3,opt,name=level2_keys,json=level2Keys,proto3" json:"level2_keys,omitempty"`
	// Protocol updates.
	Protocol *SequenceNumber `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Updates to the election difficulty parameter.
	ElectionDifficulty *SequenceNumber `protobuf:"bytes,5,opt,name=election_difficulty,json=electionDifficulty,proto3" json:"election_difficulty,omitempty"`
	// Updates to the euro:energy exchange rate.
	EuroPerEnergy *SequenceNumber `protobuf:"bytes,6,opt,name=euro_per_energy,json=euroPerEnergy,proto3" json:"euro_per_energy,omitempty"`
	// Updates to the CCD:EUR exchange rate.
	MicroCcdPerEuro *SequenceNumber `protobuf:"bytes,7,opt,name=micro_ccd_per_euro,json=microCcdPerEuro,proto3" json:"micro_ccd_per_euro,omitempty"`
	// Updates to the foundation account.
	FoundationAccount *SequenceNumber `protobuf:"bytes,8,opt,name=foundation_account,json=foundationAccount,proto3" json:"foundation_account,omitempty"`
	// Updates to the mint distribution.
	MintDistribution *SequenceNumber `protobuf:"bytes,9,opt,name=mint_distribution,json=mintDistribution,proto3" json:"mint_distribution,omitempty"`
	// Updates to the transaction fee distribution.
	TransactionFeeDistribution *SequenceNumber `protobuf:"bytes,10,opt,name=transaction_fee_distribution,json=transactionFeeDistribution,proto3" json:"transaction_fee_distribution,omitempty"`
	// Updates to the GAS rewards.
	GasRewards *SequenceNumber `protobuf:"bytes,11,opt,name=gas_rewards,json=gasRewards,proto3" json:"gas_rewards,omitempty"`
	// Updates pool parameters.
	PoolParameters *SequenceNumber `protobuf:"bytes,12,opt,name=pool_parameters,json=poolParameters,proto3" json:"pool_parameters,omitempty"`
	// Adds a new anonymity revoker.
	AddAnonymityRevoker *SequenceNumber `protobuf:"bytes,13,opt,name=add_anonymity_revoker,json=addAnonymityRevoker,proto3" json:"add_anonymity_revoker,omitempty"`
	// Adds a new identity provider.
	AddIdentityProvider *SequenceNumber `protobuf:"bytes,14,opt,name=add_identity_provider,json=addIdentityProvider,proto3" json:"add_identity_provider,omitempty"`
	// Updates to cooldown parameters for chain parameters version 1 introduced in protocol version 4.
	CooldownParameters *SequenceNumber `protobuf:"bytes,15,opt,name=cooldown_parameters,json=cooldownParameters,proto3" json:"cooldown_parameters,omitempty"`
	// Updates to time parameters for chain parameters version 1 introduced in protocol version 4.
	TimeParameters *SequenceNumber `protobuf:"bytes,16,opt,name=time_parameters,json=timeParameters,proto3" json:"time_parameters,omitempty"`
	// Updates to the timeout parameters
	TimeoutParameters *SequenceNumber `protobuf:"bytes,17,opt,name=timeout_parameters,json=timeoutParameters,proto3" json:"timeout_parameters,omitempty"`
	// Updates to the the minimum time between blocks for chain parameters version 2.
	MinBlockTime *SequenceNumber `protobuf:"bytes,18,opt,name=min_block_time,json=minBlockTime,proto3" json:"min_block_time,omitempty"`
	// Updates to the block energy limit for chain parameters version 2.
	BlockEnergyLimit *SequenceNumber `protobuf:"bytes,19,opt,name=block_energy_limit,json=blockEnergyLimit,proto3" json:"block_energy_limit,omitempty"`
	// Updates to the finalization committee parameters
	FinalizationCommitteeParameters *SequenceNumber `protobuf:"bytes,20,opt,name=finalization_committee_parameters,json=finalizationCommitteeParameters,proto3" json:"finalization_committee_parameters,omitempty"`
}

func (x *NextUpdateSequenceNumbers) Reset() {
	*x = NextUpdateSequenceNumbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextUpdateSequenceNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextUpdateSequenceNumbers) ProtoMessage() {}

func (x *NextUpdateSequenceNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextUpdateSequenceNumbers.ProtoReflect.Descriptor instead.
func (*NextUpdateSequenceNumbers) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{154}
}

func (x *NextUpdateSequenceNumbers) GetRootKeys() *SequenceNumber {
	if x != nil {
		return x.RootKeys
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetLevel1Keys() *SequenceNumber {
	if x != nil {
		return x.Level1Keys
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetLevel2Keys() *SequenceNumber {
	if x != nil {
		return x.Level2Keys
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetProtocol() *SequenceNumber {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetElectionDifficulty() *SequenceNumber {
	if x != nil {
		return x.ElectionDifficulty
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetEuroPerEnergy() *SequenceNumber {
	if x != nil {
		return x.EuroPerEnergy
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetMicroCcdPerEuro() *SequenceNumber {
	if x != nil {
		return x.MicroCcdPerEuro
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetFoundationAccount() *SequenceNumber {
	if x != nil {
		return x.FoundationAccount
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetMintDistribution() *SequenceNumber {
	if x != nil {
		return x.MintDistribution
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetTransactionFeeDistribution() *SequenceNumber {
	if x != nil {
		return x.TransactionFeeDistribution
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetGasRewards() *SequenceNumber {
	if x != nil {
		return x.GasRewards
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetPoolParameters() *SequenceNumber {
	if x != nil {
		return x.PoolParameters
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetAddAnonymityRevoker() *SequenceNumber {
	if x != nil {
		return x.AddAnonymityRevoker
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetAddIdentityProvider() *SequenceNumber {
	if x != nil {
		return x.AddIdentityProvider
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetCooldownParameters() *SequenceNumber {
	if x != nil {
		return x.CooldownParameters
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetTimeParameters() *SequenceNumber {
	if x != nil {
		return x.TimeParameters
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetTimeoutParameters() *SequenceNumber {
	if x != nil {
		return x.TimeoutParameters
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetMinBlockTime() *SequenceNumber {
	if x != nil {
		return x.MinBlockTime
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetBlockEnergyLimit() *SequenceNumber {
	if x != nil {
		return x.BlockEnergyLimit
	}
	return nil
}

func (x *NextUpdateSequenceNumbers) GetFinalizationCommitteeParameters() *SequenceNumber {
	if x != nil {
		return x.FinalizationCommitteeParameters
	}
	return nil
}

// A request to send a new block item to the chain.
// An IP address
type IpAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IpAddress) Reset() {
	*x = IpAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddress) ProtoMessage() {}

func (x *IpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddress.ProtoReflect.Descriptor instead.
func (*IpAddress) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{155}
}

func (x *IpAddress) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A port
// Valid port numbers are expected thus
// the value is expected to be in the range (0..u16::MAX).
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{156}
}

func (x *Port) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A socket address consisting of
// an IP + port.
type IpSocketAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *IpAddress `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port *Port      `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *IpSocketAddress) Reset() {
	*x = IpSocketAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpSocketAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpSocketAddress) ProtoMessage() {}

func (x *IpSocketAddress) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpSocketAddress.ProtoReflect.Descriptor instead.
func (*IpSocketAddress) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{157}
}

func (x *IpSocketAddress) GetIp() *IpAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *IpSocketAddress) GetPort() *Port {
	if x != nil {
		return x.Port
	}
	return nil
}

// A peer id
// An identifier that the peer wants to be
// be recoknized by.
// The underlying value is simply a u64.
// Note. There is no authenticity of the peer id and
// as such it is only used for logging purposes.
type PeerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PeerId) Reset() {
	*x = PeerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerId) ProtoMessage() {}

func (x *PeerId) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerId.ProtoReflect.Descriptor instead.
func (*PeerId) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{158}
}

func (x *PeerId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A banned peer
type BannedPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IP address of the banned peer.
	IpAddress *IpAddress `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *BannedPeer) Reset() {
	*x = BannedPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannedPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannedPeer) ProtoMessage() {}

func (x *BannedPeer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannedPeer.ProtoReflect.Descriptor instead.
func (*BannedPeer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{159}
}

func (x *BannedPeer) GetIpAddress() *IpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// The banned peers given by
// their IP addresses.
type BannedPeers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*BannedPeer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *BannedPeers) Reset() {
	*x = BannedPeers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannedPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannedPeers) ProtoMessage() {}

func (x *BannedPeers) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannedPeers.ProtoReflect.Descriptor instead.
func (*BannedPeers) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{160}
}

func (x *BannedPeers) GetPeers() []*BannedPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

// A peer to ban specified by its IP.
// Note. This will ban all peers located behind the
// specified IP even though they are using different ports.
type PeerToBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress *IpAddress `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *PeerToBan) Reset() {
	*x = PeerToBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerToBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerToBan) ProtoMessage() {}

func (x *PeerToBan) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerToBan.ProtoReflect.Descriptor instead.
func (*PeerToBan) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{161}
}

func (x *PeerToBan) GetIpAddress() *IpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// Request to enable dumping of network packages.
type DumpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which file to dump the packages into.
	// Requires a valid path.
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Whether the node should dump raw packages.
	Raw bool `protobuf:"varint,2,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *DumpRequest) Reset() {
	*x = DumpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpRequest) ProtoMessage() {}

func (x *DumpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpRequest.ProtoReflect.Descriptor instead.
func (*DumpRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{162}
}

func (x *DumpRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *DumpRequest) GetRaw() bool {
	if x != nil {
		return x.Raw
	}
	return false
}

// Peers and their associated network related statistics
type PeersInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*PeersInfo_Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeersInfo) Reset() {
	*x = PeersInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersInfo) ProtoMessage() {}

func (x *PeersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersInfo.ProtoReflect.Descriptor instead.
func (*PeersInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{163}
}

func (x *PeersInfo) GetPeers() []*PeersInfo_Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

// Node info response
// Contains various information of the
// enquired node.
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the node.
	PeerVersion string `protobuf:"bytes,1,opt,name=peer_version,json=peerVersion,proto3" json:"peer_version,omitempty"`
	// local time of the node.
	LocalTime *Timestamp `protobuf:"bytes,3,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	// Number of milliseconds that the node
	// has been alive.
	PeerUptime *Duration `protobuf:"bytes,4,opt,name=peer_uptime,json=peerUptime,proto3" json:"peer_uptime,omitempty"`
	// Information related to the p2p protocol.
	NetworkInfo *NodeInfo_NetworkInfo `protobuf:"bytes,5,opt,name=network_info,json=networkInfo,proto3" json:"network_info,omitempty"`
	// Details of the node.
	//
	// Types that are assignable to Details:
	//	*NodeInfo_Bootstrapper
	//	*NodeInfo_Node_
	Details isNodeInfo_Details `protobuf_oneof:"details"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{164}
}

func (x *NodeInfo) GetPeerVersion() string {
	if x != nil {
		return x.PeerVersion
	}
	return ""
}

func (x *NodeInfo) GetLocalTime() *Timestamp {
	if x != nil {
		return x.LocalTime
	}
	return nil
}

func (x *NodeInfo) GetPeerUptime() *Duration {
	if x != nil {
		return x.PeerUptime
	}
	return nil
}

func (x *NodeInfo) GetNetworkInfo() *NodeInfo_NetworkInfo {
	if x != nil {
		return x.NetworkInfo
	}
	return nil
}

func (m *NodeInfo) GetDetails() isNodeInfo_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *NodeInfo) GetBootstrapper() *Empty {
	if x, ok := x.GetDetails().(*NodeInfo_Bootstrapper); ok {
		return x.Bootstrapper
	}
	return nil
}

func (x *NodeInfo) GetNode() *NodeInfo_Node {
	if x, ok := x.GetDetails().(*NodeInfo_Node_); ok {
		return x.Node
	}
	return nil
}

type isNodeInfo_Details interface {
	isNodeInfo_Details()
}

type NodeInfo_Bootstrapper struct {
	// The node is a bootstrapper and is not running consensus.
	Bootstrapper *Empty `protobuf:"bytes,6,opt,name=bootstrapper,proto3,oneof"`
}

type NodeInfo_Node_ struct {
	// The node is a regular node and runs the consensus
	// protocol.
	Node *NodeInfo_Node `protobuf:"bytes,7,opt,name=node,proto3,oneof"`
}

func (*NodeInfo_Bootstrapper) isNodeInfo_Details() {}

func (*NodeInfo_Node_) isNodeInfo_Details() {}

type SendBlockItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BlockItem:
	//	*SendBlockItemRequest_AccountTransaction
	//	*SendBlockItemRequest_CredentialDeployment
	//	*SendBlockItemRequest_UpdateInstruction
	BlockItem isSendBlockItemRequest_BlockItem `protobuf_oneof:"block_item"`
}

func (x *SendBlockItemRequest) Reset() {
	*x = SendBlockItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBlockItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBlockItemRequest) ProtoMessage() {}

func (x *SendBlockItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBlockItemRequest.ProtoReflect.Descriptor instead.
func (*SendBlockItemRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{165}
}

func (m *SendBlockItemRequest) GetBlockItem() isSendBlockItemRequest_BlockItem {
	if m != nil {
		return m.BlockItem
	}
	return nil
}

func (x *SendBlockItemRequest) GetAccountTransaction() *AccountTransaction {
	if x, ok := x.GetBlockItem().(*SendBlockItemRequest_AccountTransaction); ok {
		return x.AccountTransaction
	}
	return nil
}

func (x *SendBlockItemRequest) GetCredentialDeployment() *CredentialDeployment {
	if x, ok := x.GetBlockItem().(*SendBlockItemRequest_CredentialDeployment); ok {
		return x.CredentialDeployment
	}
	return nil
}

func (x *SendBlockItemRequest) GetUpdateInstruction() *UpdateInstruction {
	if x, ok := x.GetBlockItem().(*SendBlockItemRequest_UpdateInstruction); ok {
		return x.UpdateInstruction
	}
	return nil
}

type isSendBlockItemRequest_BlockItem interface {
	isSendBlockItemRequest_BlockItem()
}

type SendBlockItemRequest_AccountTransaction struct {
	// Account transactions are messages which are signed and paid for by an account.
	AccountTransaction *AccountTransaction `protobuf:"bytes,1,opt,name=account_transaction,json=accountTransaction,proto3,oneof"`
}

type SendBlockItemRequest_CredentialDeployment struct {
	// Credential deployments create new accounts. They are not paid for
	// directly by the sender. Instead, bakers are rewarded by the protocol for
	// including them.
	CredentialDeployment *CredentialDeployment `protobuf:"bytes,2,opt,name=credential_deployment,json=credentialDeployment,proto3,oneof"`
}

type SendBlockItemRequest_UpdateInstruction struct {
	// Update instructions are messages which can update the chain parameters. Including which keys are allowed
	// to make future update instructions.
	UpdateInstruction *UpdateInstruction `protobuf:"bytes,3,opt,name=update_instruction,json=updateInstruction,proto3,oneof"`
}

func (*SendBlockItemRequest_AccountTransaction) isSendBlockItemRequest_BlockItem() {}

func (*SendBlockItemRequest_CredentialDeployment) isSendBlockItemRequest_BlockItem() {}

func (*SendBlockItemRequest_UpdateInstruction) isSendBlockItemRequest_BlockItem() {}

// Credential deployments create new accounts. They are not paid for
// directly by the sender. Instead, bakers are rewarded by the protocol for
// including them.
type CredentialDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageExpiry *TransactionTime `protobuf:"bytes,1,opt,name=message_expiry,json=messageExpiry,proto3" json:"message_expiry,omitempty"`
	// The credential to be added.
	//
	// Types that are assignable to Payload:
	//	*CredentialDeployment_RawPayload
	Payload isCredentialDeployment_Payload `protobuf_oneof:"payload"`
}

func (x *CredentialDeployment) Reset() {
	*x = CredentialDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialDeployment) ProtoMessage() {}

func (x *CredentialDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialDeployment.ProtoReflect.Descriptor instead.
func (*CredentialDeployment) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{166}
}

func (x *CredentialDeployment) GetMessageExpiry() *TransactionTime {
	if x != nil {
		return x.MessageExpiry
	}
	return nil
}

func (m *CredentialDeployment) GetPayload() isCredentialDeployment_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CredentialDeployment) GetRawPayload() []byte {
	if x, ok := x.GetPayload().(*CredentialDeployment_RawPayload); ok {
		return x.RawPayload
	}
	return nil
}

type isCredentialDeployment_Payload interface {
	isCredentialDeployment_Payload()
}

type CredentialDeployment_RawPayload struct {
	// A raw payload, which is just the encoded payload.
	// A typed variant might be added in the future.
	RawPayload []byte `protobuf:"bytes,2,opt,name=raw_payload,json=rawPayload,proto3,oneof"`
}

func (*CredentialDeployment_RawPayload) isCredentialDeployment_Payload() {}

// A single signature. Used when sending block items to a node with
// `SendBlockItem`.
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{167}
}

func (x *Signature) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper for a map from indexes to signatures.
// Needed because protobuf doesn't allow nested maps directly.
type SignatureMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures map[uint32]*Signature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SignatureMap) Reset() {
	*x = SignatureMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureMap) ProtoMessage() {}

func (x *SignatureMap) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureMap.ProtoReflect.Descriptor instead.
func (*SignatureMap) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{168}
}

func (x *SignatureMap) GetSignatures() map[uint32]*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Wrapper for a map from indexes to signatures.
// Needed because protobuf doesn't allow nested maps directly.
// The keys in the SignatureMap must not exceed 2^8.
type AccountSignatureMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures map[uint32]*Signature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccountSignatureMap) Reset() {
	*x = AccountSignatureMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSignatureMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSignatureMap) ProtoMessage() {}

func (x *AccountSignatureMap) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSignatureMap.ProtoReflect.Descriptor instead.
func (*AccountSignatureMap) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{169}
}

func (x *AccountSignatureMap) GetSignatures() map[uint32]*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type AccountTransactionSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map from `CredentialIndex` to `SignatureMap`s.
	// The type `CredentialIndex` is not used directly, as messages cannot be keys in maps.
	// The map cannot contain more than 2^8 signatures.
	Signatures map[uint32]*AccountSignatureMap `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccountTransactionSignature) Reset() {
	*x = AccountTransactionSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionSignature) ProtoMessage() {}

func (x *AccountTransactionSignature) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionSignature.ProtoReflect.Descriptor instead.
func (*AccountTransactionSignature) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{170}
}

func (x *AccountTransactionSignature) GetSignatures() map[uint32]*AccountSignatureMap {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Header of an account transaction that contains basic data to check whether
// the sender and the transaction are valid. The header is shared by all transaction types.
type AccountTransactionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sender of the transaction.
	Sender *AccountAddress `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Sequence number of the transaction.
	SequenceNumber *SequenceNumber `protobuf:"bytes,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Maximum amount of nergy the transaction can take to execute.
	EnergyAmount *Energy `protobuf:"bytes,3,opt,name=energy_amount,json=energyAmount,proto3" json:"energy_amount,omitempty"`
	// Latest time the transaction can included in a block.
	Expiry *TransactionTime `protobuf:"bytes,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *AccountTransactionHeader) Reset() {
	*x = AccountTransactionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionHeader) ProtoMessage() {}

func (x *AccountTransactionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionHeader.ProtoReflect.Descriptor instead.
func (*AccountTransactionHeader) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{171}
}

func (x *AccountTransactionHeader) GetSender() *AccountAddress {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *AccountTransactionHeader) GetSequenceNumber() *SequenceNumber {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

func (x *AccountTransactionHeader) GetEnergyAmount() *Energy {
	if x != nil {
		return x.EnergyAmount
	}
	return nil
}

func (x *AccountTransactionHeader) GetExpiry() *TransactionTime {
	if x != nil {
		return x.Expiry
	}
	return nil
}

// Data required to initialize a new contract instance.
type InitContractPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of CCD to send to the instance.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Reference to the module from which the instance will be created.
	ModuleRef *ModuleRef `protobuf:"bytes,2,opt,name=module_ref,json=moduleRef,proto3" json:"module_ref,omitempty"`
	// Name of the contract to initialize. This is expected to be in the format
	// `init_name`.
	InitName *InitName `protobuf:"bytes,3,opt,name=init_name,json=initName,proto3" json:"init_name,omitempty"`
	// Parameter to call the `init` of the contract with.
	Parameter *Parameter `protobuf:"bytes,4,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *InitContractPayload) Reset() {
	*x = InitContractPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitContractPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitContractPayload) ProtoMessage() {}

func (x *InitContractPayload) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitContractPayload.ProtoReflect.Descriptor instead.
func (*InitContractPayload) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{172}
}

func (x *InitContractPayload) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InitContractPayload) GetModuleRef() *ModuleRef {
	if x != nil {
		return x.ModuleRef
	}
	return nil
}

func (x *InitContractPayload) GetInitName() *InitName {
	if x != nil {
		return x.InitName
	}
	return nil
}

func (x *InitContractPayload) GetParameter() *Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// Data required to update a contract instance.
type UpdateContractPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of CCD to send to the instance.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Address of the instance to update.
	Address *ContractAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Name of the entrypoint to call to update the instance.
	// This is expected to be in the format `contractName.entrypointName`.
	ReceiveName *ReceiveName `protobuf:"bytes,3,opt,name=receive_name,json=receiveName,proto3" json:"receive_name,omitempty"`
	// Parameter to pass to the entrypoint.
	Parameter *Parameter `protobuf:"bytes,4,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *UpdateContractPayload) Reset() {
	*x = UpdateContractPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractPayload) ProtoMessage() {}

func (x *UpdateContractPayload) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractPayload.ProtoReflect.Descriptor instead.
func (*UpdateContractPayload) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{173}
}

func (x *UpdateContractPayload) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *UpdateContractPayload) GetAddress() *ContractAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UpdateContractPayload) GetReceiveName() *ReceiveName {
	if x != nil {
		return x.ReceiveName
	}
	return nil
}

func (x *UpdateContractPayload) GetParameter() *Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// Payload of a transfer between two accounts.
type TransferPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of CCD to send.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Receiver address.
	Receiver *AccountAddress `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *TransferPayload) Reset() {
	*x = TransferPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPayload) ProtoMessage() {}

func (x *TransferPayload) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPayload.ProtoReflect.Descriptor instead.
func (*TransferPayload) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{174}
}

func (x *TransferPayload) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransferPayload) GetReceiver() *AccountAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

// Payload of a transfer between two accounts with a memo.
type TransferWithMemoPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of CCD to send.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Receiver address.
	Receiver *AccountAddress `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Memo to include with the transfer.
	Memo *Memo `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *TransferWithMemoPayload) Reset() {
	*x = TransferWithMemoPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferWithMemoPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferWithMemoPayload) ProtoMessage() {}

func (x *TransferWithMemoPayload) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferWithMemoPayload.ProtoReflect.Descriptor instead.
func (*TransferWithMemoPayload) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{175}
}

func (x *TransferWithMemoPayload) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransferWithMemoPayload) GetReceiver() *AccountAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *TransferWithMemoPayload) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

// The payload for an account transaction.
type AccountTransactionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*AccountTransactionPayload_RawPayload
	//	*AccountTransactionPayload_DeployModule
	//	*AccountTransactionPayload_InitContract
	//	*AccountTransactionPayload_UpdateContract
	//	*AccountTransactionPayload_Transfer
	//	*AccountTransactionPayload_TransferWithMemo
	//	*AccountTransactionPayload_RegisterData
	Payload isAccountTransactionPayload_Payload `protobuf_oneof:"payload"`
}

func (x *AccountTransactionPayload) Reset() {
	*x = AccountTransactionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionPayload) ProtoMessage() {}

func (x *AccountTransactionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionPayload.ProtoReflect.Descriptor instead.
func (*AccountTransactionPayload) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{176}
}

func (m *AccountTransactionPayload) GetPayload() isAccountTransactionPayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AccountTransactionPayload) GetRawPayload() []byte {
	if x, ok := x.GetPayload().(*AccountTransactionPayload_RawPayload); ok {
		return x.RawPayload
	}
	return nil
}

func (x *AccountTransactionPayload) GetDeployModule() *VersionedModuleSource {
	if x, ok := x.GetPayload().(*AccountTransactionPayload_DeployModule); ok {
		return x.DeployModule
	}
	return nil
}

func (x *AccountTransactionPayload) GetInitContract() *InitContractPayload {
	if x, ok := x.GetPayload().(*AccountTransactionPayload_InitContract); ok {
		return x.InitContract
	}
	return nil
}

func (x *AccountTransactionPayload) GetUpdateContract() *UpdateContractPayload {
	if x, ok := x.GetPayload().(*AccountTransactionPayload_UpdateContract); ok {
		return x.UpdateContract
	}
	return nil
}

func (x *AccountTransactionPayload) GetTransfer() *TransferPayload {
	if x, ok := x.GetPayload().(*AccountTransactionPayload_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *AccountTransactionPayload) GetTransferWithMemo() *TransferWithMemoPayload {
	if x, ok := x.GetPayload().(*AccountTransactionPayload_TransferWithMemo); ok {
		return x.TransferWithMemo
	}
	return nil
}

func (x *AccountTransactionPayload) GetRegisterData() *RegisteredData {
	if x, ok := x.GetPayload().(*AccountTransactionPayload_RegisterData); ok {
		return x.RegisterData
	}
	return nil
}

type isAccountTransactionPayload_Payload interface {
	isAccountTransactionPayload_Payload()
}

type AccountTransactionPayload_RawPayload struct {
	// A pre-serialized payload in the binary serialization format defined
	// by the protocol.
	RawPayload []byte `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3,oneof"`
}

type AccountTransactionPayload_DeployModule struct {
	// A transfer between two accounts. With an optional memo.
	DeployModule *VersionedModuleSource `protobuf:"bytes,2,opt,name=deploy_module,json=deployModule,proto3,oneof"`
}

type AccountTransactionPayload_InitContract struct {
	InitContract *InitContractPayload `protobuf:"bytes,3,opt,name=init_contract,json=initContract,proto3,oneof"`
}

type AccountTransactionPayload_UpdateContract struct {
	UpdateContract *UpdateContractPayload `protobuf:"bytes,4,opt,name=update_contract,json=updateContract,proto3,oneof"`
}

type AccountTransactionPayload_Transfer struct {
	Transfer *TransferPayload `protobuf:"bytes,5,opt,name=transfer,proto3,oneof"`
}

type AccountTransactionPayload_TransferWithMemo struct {
	TransferWithMemo *TransferWithMemoPayload `protobuf:"bytes,6,opt,name=transfer_with_memo,json=transferWithMemo,proto3,oneof"`
}

type AccountTransactionPayload_RegisterData struct {
	RegisterData *RegisteredData `protobuf:"bytes,7,opt,name=register_data,json=registerData,proto3,oneof"`
}

func (*AccountTransactionPayload_RawPayload) isAccountTransactionPayload_Payload() {}

func (*AccountTransactionPayload_DeployModule) isAccountTransactionPayload_Payload() {}

func (*AccountTransactionPayload_InitContract) isAccountTransactionPayload_Payload() {}

func (*AccountTransactionPayload_UpdateContract) isAccountTransactionPayload_Payload() {}

func (*AccountTransactionPayload_Transfer) isAccountTransactionPayload_Payload() {}

func (*AccountTransactionPayload_TransferWithMemo) isAccountTransactionPayload_Payload() {}

func (*AccountTransactionPayload_RegisterData) isAccountTransactionPayload_Payload() {}

// An unsigned account transaction. This is used with the
// `GetTransactionSignHash` endpoint to obtain the message to sign.
type PreAccountTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *AccountTransactionHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Payload *AccountTransactionPayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PreAccountTransaction) Reset() {
	*x = PreAccountTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreAccountTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreAccountTransaction) ProtoMessage() {}

func (x *PreAccountTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreAccountTransaction.ProtoReflect.Descriptor instead.
func (*PreAccountTransaction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{177}
}

func (x *PreAccountTransaction) GetHeader() *AccountTransactionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PreAccountTransaction) GetPayload() *AccountTransactionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Account transactions are messages which are signed and paid for by the sender
// account.
type AccountTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature *AccountTransactionSignature `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Header    *AccountTransactionHeader    `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Payload   *AccountTransactionPayload   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *AccountTransaction) Reset() {
	*x = AccountTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransaction) ProtoMessage() {}

func (x *AccountTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransaction.ProtoReflect.Descriptor instead.
func (*AccountTransaction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{178}
}

func (x *AccountTransaction) GetSignature() *AccountTransactionSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AccountTransaction) GetHeader() *AccountTransactionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AccountTransaction) GetPayload() *AccountTransactionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type UpdateInstructionSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map from `UpdateKeysIndex` to `Signature`.
	// The type `UpdateKeysIndex`is not used directly, as messages cannot be keys in maps.
	Signatures map[uint32]*Signature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateInstructionSignature) Reset() {
	*x = UpdateInstructionSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstructionSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstructionSignature) ProtoMessage() {}

func (x *UpdateInstructionSignature) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstructionSignature.ProtoReflect.Descriptor instead.
func (*UpdateInstructionSignature) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{179}
}

func (x *UpdateInstructionSignature) GetSignatures() map[uint32]*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type UpdateInstructionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber *UpdateSequenceNumber `protobuf:"bytes,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	EffectiveTime  *TransactionTime      `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	Timeout        *TransactionTime      `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *UpdateInstructionHeader) Reset() {
	*x = UpdateInstructionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstructionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstructionHeader) ProtoMessage() {}

func (x *UpdateInstructionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstructionHeader.ProtoReflect.Descriptor instead.
func (*UpdateInstructionHeader) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{180}
}

func (x *UpdateInstructionHeader) GetSequenceNumber() *UpdateSequenceNumber {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

func (x *UpdateInstructionHeader) GetEffectiveTime() *TransactionTime {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *UpdateInstructionHeader) GetTimeout() *TransactionTime {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// The payload for an UpdateInstruction.
type UpdateInstructionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*UpdateInstructionPayload_RawPayload
	Payload isUpdateInstructionPayload_Payload `protobuf_oneof:"payload"`
}

func (x *UpdateInstructionPayload) Reset() {
	*x = UpdateInstructionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstructionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstructionPayload) ProtoMessage() {}

func (x *UpdateInstructionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstructionPayload.ProtoReflect.Descriptor instead.
func (*UpdateInstructionPayload) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{181}
}

func (m *UpdateInstructionPayload) GetPayload() isUpdateInstructionPayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *UpdateInstructionPayload) GetRawPayload() []byte {
	if x, ok := x.GetPayload().(*UpdateInstructionPayload_RawPayload); ok {
		return x.RawPayload
	}
	return nil
}

type isUpdateInstructionPayload_Payload interface {
	isUpdateInstructionPayload_Payload()
}

type UpdateInstructionPayload_RawPayload struct {
	// A raw payload encoded according to the format defined by the protocol.
	RawPayload []byte `protobuf:"bytes,3,opt,name=raw_payload,json=rawPayload,proto3,oneof"`
}

func (*UpdateInstructionPayload_RawPayload) isUpdateInstructionPayload_Payload() {}

type UpdateInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map from `UpdateKeysIndex` to `Signature`. Keys must not exceed 2^16.
	Signatures *SignatureMap             `protobuf:"bytes,1,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Header     *UpdateInstructionHeader  `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Payload    *UpdateInstructionPayload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UpdateInstruction) Reset() {
	*x = UpdateInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstruction) ProtoMessage() {}

func (x *UpdateInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstruction.ProtoReflect.Descriptor instead.
func (*UpdateInstruction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{182}
}

func (x *UpdateInstruction) GetSignatures() *SignatureMap {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *UpdateInstruction) GetHeader() *UpdateInstructionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateInstruction) GetPayload() *UpdateInstructionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Signature on an account transaction is defined to be the signature on the
// hash of the `PreAccountTransaction`.
type AccountTransactionSignHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AccountTransactionSignHash) Reset() {
	*x = AccountTransactionSignHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionSignHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionSignHash) ProtoMessage() {}

func (x *AccountTransactionSignHash) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionSignHash.ProtoReflect.Descriptor instead.
func (*AccountTransactionSignHash) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{183}
}

func (x *AccountTransactionSignHash) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// The number of credential deployments allowed in a block. This in effect
// determines the number of accounts that can be created in a block.
type CredentialsPerBlockLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CredentialsPerBlockLimit) Reset() {
	*x = CredentialsPerBlockLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialsPerBlockLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialsPerBlockLimit) ProtoMessage() {}

func (x *CredentialsPerBlockLimit) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialsPerBlockLimit.ProtoReflect.Descriptor instead.
func (*CredentialsPerBlockLimit) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{184}
}

func (x *CredentialsPerBlockLimit) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Updatable chain parameters that apply to protocol versions 1-3.
type ChainParametersV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Election difficulty for consensus lottery.
	ElectionDifficulty *ElectionDifficulty `protobuf:"bytes,1,opt,name=election_difficulty,json=electionDifficulty,proto3" json:"election_difficulty,omitempty"`
	// Euro per energy exchange rate.
	EuroPerEnergy *ExchangeRate `protobuf:"bytes,2,opt,name=euro_per_energy,json=euroPerEnergy,proto3" json:"euro_per_energy,omitempty"`
	// Micro CCD per euro exchange rate.
	MicroCcdPerEuro *ExchangeRate `protobuf:"bytes,3,opt,name=micro_ccd_per_euro,json=microCcdPerEuro,proto3" json:"micro_ccd_per_euro,omitempty"`
	// Extra number of epochs before reduction in stake, or baker
	// deregistration is completed.
	BakerCooldownEpochs *Epoch `protobuf:"bytes,4,opt,name=baker_cooldown_epochs,json=bakerCooldownEpochs,proto3" json:"baker_cooldown_epochs,omitempty"`
	// The limit for the number of account creations in a block.
	AccountCreationLimit *CredentialsPerBlockLimit `protobuf:"bytes,5,opt,name=account_creation_limit,json=accountCreationLimit,proto3" json:"account_creation_limit,omitempty"`
	// Current mint distribution
	MintDistribution *MintDistributionCpv0 `protobuf:"bytes,6,opt,name=mint_distribution,json=mintDistribution,proto3" json:"mint_distribution,omitempty"`
	// Current transaction fee distribution.
	TransactionFeeDistribution *TransactionFeeDistribution `protobuf:"bytes,7,opt,name=transaction_fee_distribution,json=transactionFeeDistribution,proto3" json:"transaction_fee_distribution,omitempty"`
	// Current gas reward parameters.
	GasRewards *GasRewards `protobuf:"bytes,8,opt,name=gas_rewards,json=gasRewards,proto3" json:"gas_rewards,omitempty"`
	// The foundation account.
	FoundationAccount *AccountAddress `protobuf:"bytes,9,opt,name=foundation_account,json=foundationAccount,proto3" json:"foundation_account,omitempty"`
	// Minimum threshold for becoming a baker.
	MinimumThresholdForBaking *Amount `protobuf:"bytes,10,opt,name=minimum_threshold_for_baking,json=minimumThresholdForBaking,proto3" json:"minimum_threshold_for_baking,omitempty"`
	// Keys allowed to do root updates.
	RootKeys *HigherLevelKeys `protobuf:"bytes,11,opt,name=root_keys,json=rootKeys,proto3" json:"root_keys,omitempty"`
	// Keys allowed to do level1 updates;
	Level1Keys *HigherLevelKeys `protobuf:"bytes,12,opt,name=level1_keys,json=level1Keys,proto3" json:"level1_keys,omitempty"`
	// Keys allowed to do parameter updates.
	Level2Keys *AuthorizationsV0 `protobuf:"bytes,13,opt,name=level2_keys,json=level2Keys,proto3" json:"level2_keys,omitempty"`
}

func (x *ChainParametersV0) Reset() {
	*x = ChainParametersV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainParametersV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainParametersV0) ProtoMessage() {}

func (x *ChainParametersV0) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainParametersV0.ProtoReflect.Descriptor instead.
func (*ChainParametersV0) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{185}
}

func (x *ChainParametersV0) GetElectionDifficulty() *ElectionDifficulty {
	if x != nil {
		return x.ElectionDifficulty
	}
	return nil
}

func (x *ChainParametersV0) GetEuroPerEnergy() *ExchangeRate {
	if x != nil {
		return x.EuroPerEnergy
	}
	return nil
}

func (x *ChainParametersV0) GetMicroCcdPerEuro() *ExchangeRate {
	if x != nil {
		return x.MicroCcdPerEuro
	}
	return nil
}

func (x *ChainParametersV0) GetBakerCooldownEpochs() *Epoch {
	if x != nil {
		return x.BakerCooldownEpochs
	}
	return nil
}

func (x *ChainParametersV0) GetAccountCreationLimit() *CredentialsPerBlockLimit {
	if x != nil {
		return x.AccountCreationLimit
	}
	return nil
}

func (x *ChainParametersV0) GetMintDistribution() *MintDistributionCpv0 {
	if x != nil {
		return x.MintDistribution
	}
	return nil
}

func (x *ChainParametersV0) GetTransactionFeeDistribution() *TransactionFeeDistribution {
	if x != nil {
		return x.TransactionFeeDistribution
	}
	return nil
}

func (x *ChainParametersV0) GetGasRewards() *GasRewards {
	if x != nil {
		return x.GasRewards
	}
	return nil
}

func (x *ChainParametersV0) GetFoundationAccount() *AccountAddress {
	if x != nil {
		return x.FoundationAccount
	}
	return nil
}

func (x *ChainParametersV0) GetMinimumThresholdForBaking() *Amount {
	if x != nil {
		return x.MinimumThresholdForBaking
	}
	return nil
}

func (x *ChainParametersV0) GetRootKeys() *HigherLevelKeys {
	if x != nil {
		return x.RootKeys
	}
	return nil
}

func (x *ChainParametersV0) GetLevel1Keys() *HigherLevelKeys {
	if x != nil {
		return x.Level1Keys
	}
	return nil
}

func (x *ChainParametersV0) GetLevel2Keys() *AuthorizationsV0 {
	if x != nil {
		return x.Level2Keys
	}
	return nil
}

// Updatable chain parameters that apply to protocol versions 4-5.
type ChainParametersV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Election difficulty for consensus lottery.
	ElectionDifficulty *ElectionDifficulty `protobuf:"bytes,1,opt,name=election_difficulty,json=electionDifficulty,proto3" json:"election_difficulty,omitempty"`
	// Euro per energy exchange rate.
	EuroPerEnergy *ExchangeRate `protobuf:"bytes,2,opt,name=euro_per_energy,json=euroPerEnergy,proto3" json:"euro_per_energy,omitempty"`
	// Micro CCD per euro exchange rate.
	MicroCcdPerEuro *ExchangeRate `protobuf:"bytes,3,opt,name=micro_ccd_per_euro,json=microCcdPerEuro,proto3" json:"micro_ccd_per_euro,omitempty"`
	// Extra number of epochs before reduction in stake, or baker
	// deregistration is completed.
	CooldownParameters *CooldownParametersCpv1 `protobuf:"bytes,4,opt,name=cooldown_parameters,json=cooldownParameters,proto3" json:"cooldown_parameters,omitempty"`
	// Current time parameters.
	// The time parameters indicates the mint rate and the
	// reward period length, i.e. the time between paydays.
	TimeParameters *TimeParametersCpv1 `protobuf:"bytes,5,opt,name=time_parameters,json=timeParameters,proto3" json:"time_parameters,omitempty"`
	// The limit for the number of account creations in a block.
	AccountCreationLimit *CredentialsPerBlockLimit `protobuf:"bytes,6,opt,name=account_creation_limit,json=accountCreationLimit,proto3" json:"account_creation_limit,omitempty"`
	// Current mint distribution
	MintDistribution *MintDistributionCpv1 `protobuf:"bytes,7,opt,name=mint_distribution,json=mintDistribution,proto3" json:"mint_distribution,omitempty"`
	// Current transaction fee distribution.
	TransactionFeeDistribution *TransactionFeeDistribution `protobuf:"bytes,8,opt,name=transaction_fee_distribution,json=transactionFeeDistribution,proto3" json:"transaction_fee_distribution,omitempty"`
	// Current gas reward parameters.
	GasRewards *GasRewards `protobuf:"bytes,9,opt,name=gas_rewards,json=gasRewards,proto3" json:"gas_rewards,omitempty"`
	// The foundation account.
	FoundationAccount *AccountAddress `protobuf:"bytes,10,opt,name=foundation_account,json=foundationAccount,proto3" json:"foundation_account,omitempty"`
	// Parameters governing baking pools and their commissions.
	PoolParameters *PoolParametersCpv1 `protobuf:"bytes,11,opt,name=pool_parameters,json=poolParameters,proto3" json:"pool_parameters,omitempty"`
	// Keys allowed to do root updates.
	RootKeys *HigherLevelKeys `protobuf:"bytes,12,opt,name=root_keys,json=rootKeys,proto3" json:"root_keys,omitempty"`
	// Keys allowed to do level1 updates;
	Level1Keys *HigherLevelKeys `protobuf:"bytes,13,opt,name=level1_keys,json=level1Keys,proto3" json:"level1_keys,omitempty"`
	// Keys allowed to do parameter updates.
	Level2Keys *AuthorizationsV1 `protobuf:"bytes,14,opt,name=level2_keys,json=level2Keys,proto3" json:"level2_keys,omitempty"`
}

func (x *ChainParametersV1) Reset() {
	*x = ChainParametersV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainParametersV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainParametersV1) ProtoMessage() {}

func (x *ChainParametersV1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainParametersV1.ProtoReflect.Descriptor instead.
func (*ChainParametersV1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{186}
}

func (x *ChainParametersV1) GetElectionDifficulty() *ElectionDifficulty {
	if x != nil {
		return x.ElectionDifficulty
	}
	return nil
}

func (x *ChainParametersV1) GetEuroPerEnergy() *ExchangeRate {
	if x != nil {
		return x.EuroPerEnergy
	}
	return nil
}

func (x *ChainParametersV1) GetMicroCcdPerEuro() *ExchangeRate {
	if x != nil {
		return x.MicroCcdPerEuro
	}
	return nil
}

func (x *ChainParametersV1) GetCooldownParameters() *CooldownParametersCpv1 {
	if x != nil {
		return x.CooldownParameters
	}
	return nil
}

func (x *ChainParametersV1) GetTimeParameters() *TimeParametersCpv1 {
	if x != nil {
		return x.TimeParameters
	}
	return nil
}

func (x *ChainParametersV1) GetAccountCreationLimit() *CredentialsPerBlockLimit {
	if x != nil {
		return x.AccountCreationLimit
	}
	return nil
}

func (x *ChainParametersV1) GetMintDistribution() *MintDistributionCpv1 {
	if x != nil {
		return x.MintDistribution
	}
	return nil
}

func (x *ChainParametersV1) GetTransactionFeeDistribution() *TransactionFeeDistribution {
	if x != nil {
		return x.TransactionFeeDistribution
	}
	return nil
}

func (x *ChainParametersV1) GetGasRewards() *GasRewards {
	if x != nil {
		return x.GasRewards
	}
	return nil
}

func (x *ChainParametersV1) GetFoundationAccount() *AccountAddress {
	if x != nil {
		return x.FoundationAccount
	}
	return nil
}

func (x *ChainParametersV1) GetPoolParameters() *PoolParametersCpv1 {
	if x != nil {
		return x.PoolParameters
	}
	return nil
}

func (x *ChainParametersV1) GetRootKeys() *HigherLevelKeys {
	if x != nil {
		return x.RootKeys
	}
	return nil
}

func (x *ChainParametersV1) GetLevel1Keys() *HigherLevelKeys {
	if x != nil {
		return x.Level1Keys
	}
	return nil
}

func (x *ChainParametersV1) GetLevel2Keys() *AuthorizationsV1 {
	if x != nil {
		return x.Level2Keys
	}
	return nil
}

// Updatable chain parameters that apply to protocol versions 6.
type ChainParametersV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Consensus parameters.
	ConsensusParameters *ConsensusParametersV1 `protobuf:"bytes,1,opt,name=consensus_parameters,json=consensusParameters,proto3" json:"consensus_parameters,omitempty"`
	// Euro per energy exchange rate.
	EuroPerEnergy *ExchangeRate `protobuf:"bytes,2,opt,name=euro_per_energy,json=euroPerEnergy,proto3" json:"euro_per_energy,omitempty"`
	// Micro CCD per euro exchange rate.
	MicroCcdPerEuro *ExchangeRate `protobuf:"bytes,3,opt,name=micro_ccd_per_euro,json=microCcdPerEuro,proto3" json:"micro_ccd_per_euro,omitempty"`
	// Extra number of epochs before reduction in stake, or baker
	// deregistration is completed.
	CooldownParameters *CooldownParametersCpv1 `protobuf:"bytes,4,opt,name=cooldown_parameters,json=cooldownParameters,proto3" json:"cooldown_parameters,omitempty"`
	// Current time parameters.
	// The time parameters indicates the mint rate and the
	// reward period length, i.e. the time between paydays.
	TimeParameters *TimeParametersCpv1 `protobuf:"bytes,5,opt,name=time_parameters,json=timeParameters,proto3" json:"time_parameters,omitempty"`
	// The limit for the number of account creations in a block.
	AccountCreationLimit *CredentialsPerBlockLimit `protobuf:"bytes,6,opt,name=account_creation_limit,json=accountCreationLimit,proto3" json:"account_creation_limit,omitempty"`
	// Current mint distribution
	MintDistribution *MintDistributionCpv1 `protobuf:"bytes,7,opt,name=mint_distribution,json=mintDistribution,proto3" json:"mint_distribution,omitempty"`
	// Current transaction fee distribution.
	TransactionFeeDistribution *TransactionFeeDistribution `protobuf:"bytes,8,opt,name=transaction_fee_distribution,json=transactionFeeDistribution,proto3" json:"transaction_fee_distribution,omitempty"`
	// Current gas reward parameters.
	GasRewards *GasRewardsCpv2 `protobuf:"bytes,9,opt,name=gas_rewards,json=gasRewards,proto3" json:"gas_rewards,omitempty"`
	// The foundation account.
	FoundationAccount *AccountAddress `protobuf:"bytes,10,opt,name=foundation_account,json=foundationAccount,proto3" json:"foundation_account,omitempty"`
	// Parameters governing baking pools and their commissions.
	PoolParameters *PoolParametersCpv1 `protobuf:"bytes,11,opt,name=pool_parameters,json=poolParameters,proto3" json:"pool_parameters,omitempty"`
	// Keys allowed to do root updates.
	RootKeys *HigherLevelKeys `protobuf:"bytes,12,opt,name=root_keys,json=rootKeys,proto3" json:"root_keys,omitempty"`
	// Keys allowed to do level1 updates;
	Level1Keys *HigherLevelKeys `protobuf:"bytes,13,opt,name=level1_keys,json=level1Keys,proto3" json:"level1_keys,omitempty"`
	// Keys allowed to do parameter updates.
	Level2Keys *AuthorizationsV1 `protobuf:"bytes,14,opt,name=level2_keys,json=level2Keys,proto3" json:"level2_keys,omitempty"`
	// Finalization committee parameters
	FinalizationCommitteeParameters *FinalizationCommitteeParameters `protobuf:"bytes,15,opt,name=finalization_committee_parameters,json=finalizationCommitteeParameters,proto3" json:"finalization_committee_parameters,omitempty"`
}

func (x *ChainParametersV2) Reset() {
	*x = ChainParametersV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainParametersV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainParametersV2) ProtoMessage() {}

func (x *ChainParametersV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainParametersV2.ProtoReflect.Descriptor instead.
func (*ChainParametersV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{187}
}

func (x *ChainParametersV2) GetConsensusParameters() *ConsensusParametersV1 {
	if x != nil {
		return x.ConsensusParameters
	}
	return nil
}

func (x *ChainParametersV2) GetEuroPerEnergy() *ExchangeRate {
	if x != nil {
		return x.EuroPerEnergy
	}
	return nil
}

func (x *ChainParametersV2) GetMicroCcdPerEuro() *ExchangeRate {
	if x != nil {
		return x.MicroCcdPerEuro
	}
	return nil
}

func (x *ChainParametersV2) GetCooldownParameters() *CooldownParametersCpv1 {
	if x != nil {
		return x.CooldownParameters
	}
	return nil
}

func (x *ChainParametersV2) GetTimeParameters() *TimeParametersCpv1 {
	if x != nil {
		return x.TimeParameters
	}
	return nil
}

func (x *ChainParametersV2) GetAccountCreationLimit() *CredentialsPerBlockLimit {
	if x != nil {
		return x.AccountCreationLimit
	}
	return nil
}

func (x *ChainParametersV2) GetMintDistribution() *MintDistributionCpv1 {
	if x != nil {
		return x.MintDistribution
	}
	return nil
}

func (x *ChainParametersV2) GetTransactionFeeDistribution() *TransactionFeeDistribution {
	if x != nil {
		return x.TransactionFeeDistribution
	}
	return nil
}

func (x *ChainParametersV2) GetGasRewards() *GasRewardsCpv2 {
	if x != nil {
		return x.GasRewards
	}
	return nil
}

func (x *ChainParametersV2) GetFoundationAccount() *AccountAddress {
	if x != nil {
		return x.FoundationAccount
	}
	return nil
}

func (x *ChainParametersV2) GetPoolParameters() *PoolParametersCpv1 {
	if x != nil {
		return x.PoolParameters
	}
	return nil
}

func (x *ChainParametersV2) GetRootKeys() *HigherLevelKeys {
	if x != nil {
		return x.RootKeys
	}
	return nil
}

func (x *ChainParametersV2) GetLevel1Keys() *HigherLevelKeys {
	if x != nil {
		return x.Level1Keys
	}
	return nil
}

func (x *ChainParametersV2) GetLevel2Keys() *AuthorizationsV1 {
	if x != nil {
		return x.Level2Keys
	}
	return nil
}

func (x *ChainParametersV2) GetFinalizationCommitteeParameters() *FinalizationCommitteeParameters {
	if x != nil {
		return x.FinalizationCommitteeParameters
	}
	return nil
}

// Chain parameters.
type ChainParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//	*ChainParameters_V0
	//	*ChainParameters_V1
	//	*ChainParameters_V2
	Parameters isChainParameters_Parameters `protobuf_oneof:"parameters"`
}

func (x *ChainParameters) Reset() {
	*x = ChainParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainParameters) ProtoMessage() {}

func (x *ChainParameters) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainParameters.ProtoReflect.Descriptor instead.
func (*ChainParameters) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{188}
}

func (m *ChainParameters) GetParameters() isChainParameters_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *ChainParameters) GetV0() *ChainParametersV0 {
	if x, ok := x.GetParameters().(*ChainParameters_V0); ok {
		return x.V0
	}
	return nil
}

func (x *ChainParameters) GetV1() *ChainParametersV1 {
	if x, ok := x.GetParameters().(*ChainParameters_V1); ok {
		return x.V1
	}
	return nil
}

func (x *ChainParameters) GetV2() *ChainParametersV2 {
	if x, ok := x.GetParameters().(*ChainParameters_V2); ok {
		return x.V2
	}
	return nil
}

type isChainParameters_Parameters interface {
	isChainParameters_Parameters()
}

type ChainParameters_V0 struct {
	// Chain parameters that apply when the block is a protocol version 1-3 block.
	V0 *ChainParametersV0 `protobuf:"bytes,1,opt,name=v0,proto3,oneof"`
}

type ChainParameters_V1 struct {
	// Chain parameters that apply when the block is a protocol version 4-5 block.
	V1 *ChainParametersV1 `protobuf:"bytes,2,opt,name=v1,proto3,oneof"`
}

type ChainParameters_V2 struct {
	// Chain parameters that apply when the block is a protocol version 6- block.
	V2 *ChainParametersV2 `protobuf:"bytes,3,opt,name=v2,proto3,oneof"`
}

func (*ChainParameters_V0) isChainParameters_Parameters() {}

func (*ChainParameters_V1) isChainParameters_Parameters() {}

func (*ChainParameters_V2) isChainParameters_Parameters() {}

// Details about a finalizer for the finalization round.
type FinalizationSummaryParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker ID. Every finalizer is in particular a baker.
	Baker *BakerId `protobuf:"bytes,1,opt,name=baker,proto3" json:"baker,omitempty"`
	// The weight of the finalizer in the committee. This is an "absolute" weight.
	Weight uint64 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Whether the finalizer's signature was present on the particular finalization record.
	Signed bool `protobuf:"varint,3,opt,name=signed,proto3" json:"signed,omitempty"`
}

func (x *FinalizationSummaryParty) Reset() {
	*x = FinalizationSummaryParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizationSummaryParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizationSummaryParty) ProtoMessage() {}

func (x *FinalizationSummaryParty) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizationSummaryParty.ProtoReflect.Descriptor instead.
func (*FinalizationSummaryParty) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{189}
}

func (x *FinalizationSummaryParty) GetBaker() *BakerId {
	if x != nil {
		return x.Baker
	}
	return nil
}

func (x *FinalizationSummaryParty) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *FinalizationSummaryParty) GetSigned() bool {
	if x != nil {
		return x.Signed
	}
	return false
}

// Index of the finalization round. This increases on each successfully
// completed finalization.
type FinalizationIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FinalizationIndex) Reset() {
	*x = FinalizationIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizationIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizationIndex) ProtoMessage() {}

func (x *FinalizationIndex) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizationIndex.ProtoReflect.Descriptor instead.
func (*FinalizationIndex) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{190}
}

func (x *FinalizationIndex) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Details about a finalization record included in a block.
type FinalizationSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block that was finalized by the finalization record.
	Block *BlockHash `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// Index of the finalization round that finalized the block.
	Index *FinalizationIndex `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	// Finalization delay used for the finalization round.
	Delay *BlockHeight `protobuf:"bytes,3,opt,name=delay,proto3" json:"delay,omitempty"`
	// List of all finalizers with information about whether they signed the
	// finalization record or not.
	Finalizers []*FinalizationSummaryParty `protobuf:"bytes,4,rep,name=finalizers,proto3" json:"finalizers,omitempty"`
}

func (x *FinalizationSummary) Reset() {
	*x = FinalizationSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizationSummary) ProtoMessage() {}

func (x *FinalizationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizationSummary.ProtoReflect.Descriptor instead.
func (*FinalizationSummary) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{191}
}

func (x *FinalizationSummary) GetBlock() *BlockHash {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *FinalizationSummary) GetIndex() *FinalizationIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *FinalizationSummary) GetDelay() *BlockHeight {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *FinalizationSummary) GetFinalizers() []*FinalizationSummaryParty {
	if x != nil {
		return x.Finalizers
	}
	return nil
}

// Finalization summary that may or may not be part of the block.
type BlockFinalizationSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Summary:
	//	*BlockFinalizationSummary_None
	//	*BlockFinalizationSummary_Record
	Summary isBlockFinalizationSummary_Summary `protobuf_oneof:"summary"`
}

func (x *BlockFinalizationSummary) Reset() {
	*x = BlockFinalizationSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockFinalizationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockFinalizationSummary) ProtoMessage() {}

func (x *BlockFinalizationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockFinalizationSummary.ProtoReflect.Descriptor instead.
func (*BlockFinalizationSummary) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{192}
}

func (m *BlockFinalizationSummary) GetSummary() isBlockFinalizationSummary_Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (x *BlockFinalizationSummary) GetNone() *Empty {
	if x, ok := x.GetSummary().(*BlockFinalizationSummary_None); ok {
		return x.None
	}
	return nil
}

func (x *BlockFinalizationSummary) GetRecord() *FinalizationSummary {
	if x, ok := x.GetSummary().(*BlockFinalizationSummary_Record); ok {
		return x.Record
	}
	return nil
}

type isBlockFinalizationSummary_Summary interface {
	isBlockFinalizationSummary_Summary()
}

type BlockFinalizationSummary_None struct {
	// There is no finalization data in the block.
	None *Empty `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type BlockFinalizationSummary_Record struct {
	// There is a single finalization record with the block.
	Record *FinalizationSummary `protobuf:"bytes,2,opt,name=record,proto3,oneof"`
}

func (*BlockFinalizationSummary_None) isBlockFinalizationSummary_Summary() {}

func (*BlockFinalizationSummary_Record) isBlockFinalizationSummary_Summary() {}

type BlockItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the block item that identifies it to the chain.
	Hash *TransactionHash `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Types that are assignable to BlockItem:
	//	*BlockItem_AccountTransaction
	//	*BlockItem_CredentialDeployment
	//	*BlockItem_UpdateInstruction
	BlockItem isBlockItem_BlockItem `protobuf_oneof:"block_item"`
}

func (x *BlockItem) Reset() {
	*x = BlockItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockItem) ProtoMessage() {}

func (x *BlockItem) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockItem.ProtoReflect.Descriptor instead.
func (*BlockItem) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{193}
}

func (x *BlockItem) GetHash() *TransactionHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (m *BlockItem) GetBlockItem() isBlockItem_BlockItem {
	if m != nil {
		return m.BlockItem
	}
	return nil
}

func (x *BlockItem) GetAccountTransaction() *AccountTransaction {
	if x, ok := x.GetBlockItem().(*BlockItem_AccountTransaction); ok {
		return x.AccountTransaction
	}
	return nil
}

func (x *BlockItem) GetCredentialDeployment() *CredentialDeployment {
	if x, ok := x.GetBlockItem().(*BlockItem_CredentialDeployment); ok {
		return x.CredentialDeployment
	}
	return nil
}

func (x *BlockItem) GetUpdateInstruction() *UpdateInstruction {
	if x, ok := x.GetBlockItem().(*BlockItem_UpdateInstruction); ok {
		return x.UpdateInstruction
	}
	return nil
}

type isBlockItem_BlockItem interface {
	isBlockItem_BlockItem()
}

type BlockItem_AccountTransaction struct {
	// Account transactions are messages which are signed and paid for by an account.
	AccountTransaction *AccountTransaction `protobuf:"bytes,2,opt,name=account_transaction,json=accountTransaction,proto3,oneof"`
}

type BlockItem_CredentialDeployment struct {
	// Credential deployments create new accounts. They are not paid for
	// directly by the sender. Instead, bakers are rewarded by the protocol for
	// including them.
	CredentialDeployment *CredentialDeployment `protobuf:"bytes,3,opt,name=credential_deployment,json=credentialDeployment,proto3,oneof"`
}

type BlockItem_UpdateInstruction struct {
	// Update instructions are messages which can update the chain parameters. Including which keys are allowed
	// to make future update instructions.
	UpdateInstruction *UpdateInstruction `protobuf:"bytes,4,opt,name=update_instruction,json=updateInstruction,proto3,oneof"`
}

func (*BlockItem_AccountTransaction) isBlockItem_BlockItem() {}

func (*BlockItem_CredentialDeployment) isBlockItem_BlockItem() {}

func (*BlockItem_UpdateInstruction) isBlockItem_BlockItem() {}

// Source bytes of a smart contract v0 module.
type VersionedModuleSource_ModuleSourceV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VersionedModuleSource_ModuleSourceV0) Reset() {
	*x = VersionedModuleSource_ModuleSourceV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedModuleSource_ModuleSourceV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedModuleSource_ModuleSourceV0) ProtoMessage() {}

func (x *VersionedModuleSource_ModuleSourceV0) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedModuleSource_ModuleSourceV0.ProtoReflect.Descriptor instead.
func (*VersionedModuleSource_ModuleSourceV0) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10, 0}
}

func (x *VersionedModuleSource_ModuleSourceV0) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Source bytes of a smart contract v1 module.
type VersionedModuleSource_ModuleSourceV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VersionedModuleSource_ModuleSourceV1) Reset() {
	*x = VersionedModuleSource_ModuleSourceV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedModuleSource_ModuleSourceV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedModuleSource_ModuleSourceV1) ProtoMessage() {}

func (x *VersionedModuleSource_ModuleSourceV1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedModuleSource_ModuleSourceV1.ProtoReflect.Descriptor instead.
func (*VersionedModuleSource_ModuleSourceV1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10, 1}
}

func (x *VersionedModuleSource_ModuleSourceV1) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type StakePendingChange_Reduce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewStake *Amount `protobuf:"bytes,1,opt,name=new_stake,json=newStake,proto3" json:"new_stake,omitempty"`
	// Unix timestamp in milliseconds when the change takes effect.
	EffectiveTime *Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
}

func (x *StakePendingChange_Reduce) Reset() {
	*x = StakePendingChange_Reduce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakePendingChange_Reduce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakePendingChange_Reduce) ProtoMessage() {}

func (x *StakePendingChange_Reduce) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakePendingChange_Reduce.ProtoReflect.Descriptor instead.
func (*StakePendingChange_Reduce) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{22, 0}
}

func (x *StakePendingChange_Reduce) GetNewStake() *Amount {
	if x != nil {
		return x.NewStake
	}
	return nil
}

func (x *StakePendingChange_Reduce) GetEffectiveTime() *Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

type AccountStakingInfo_Baker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount staked at present.
	StakedAmount *Amount `protobuf:"bytes,1,opt,name=staked_amount,json=stakedAmount,proto3" json:"staked_amount,omitempty"`
	// A flag indicating whether rewards paid to the baker are automatically
	// restaked or not.
	RestakeEarnings bool `protobuf:"varint,2,opt,name=restake_earnings,json=restakeEarnings,proto3" json:"restake_earnings,omitempty"`
	// Information about the baker that is staking.
	BakerInfo *BakerInfo `protobuf:"bytes,3,opt,name=baker_info,json=bakerInfo,proto3" json:"baker_info,omitempty"`
	// If present, any pending change to the delegated stake.
	PendingChange *StakePendingChange `protobuf:"bytes,4,opt,name=pending_change,json=pendingChange,proto3,oneof" json:"pending_change,omitempty"`
	// Present if the account is currently a baker, i.e., it is in the baking
	// committee of the current epoch.
	PoolInfo *BakerPoolInfo `protobuf:"bytes,5,opt,name=pool_info,json=poolInfo,proto3,oneof" json:"pool_info,omitempty"`
}

func (x *AccountStakingInfo_Baker) Reset() {
	*x = AccountStakingInfo_Baker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStakingInfo_Baker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStakingInfo_Baker) ProtoMessage() {}

func (x *AccountStakingInfo_Baker) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStakingInfo_Baker.ProtoReflect.Descriptor instead.
func (*AccountStakingInfo_Baker) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{26, 0}
}

func (x *AccountStakingInfo_Baker) GetStakedAmount() *Amount {
	if x != nil {
		return x.StakedAmount
	}
	return nil
}

func (x *AccountStakingInfo_Baker) GetRestakeEarnings() bool {
	if x != nil {
		return x.RestakeEarnings
	}
	return false
}

func (x *AccountStakingInfo_Baker) GetBakerInfo() *BakerInfo {
	if x != nil {
		return x.BakerInfo
	}
	return nil
}

func (x *AccountStakingInfo_Baker) GetPendingChange() *StakePendingChange {
	if x != nil {
		return x.PendingChange
	}
	return nil
}

func (x *AccountStakingInfo_Baker) GetPoolInfo() *BakerPoolInfo {
	if x != nil {
		return x.PoolInfo
	}
	return nil
}

type AccountStakingInfo_Delegator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount that the account delegates.
	StakedAmount *Amount `protobuf:"bytes,1,opt,name=staked_amount,json=stakedAmount,proto3" json:"staked_amount,omitempty"`
	// Whether the earnings are automatically added to the staked amount.
	RestakeEarnings bool `protobuf:"varint,2,opt,name=restake_earnings,json=restakeEarnings,proto3" json:"restake_earnings,omitempty"`
	// The entity to which the account delegates.
	Target *DelegationTarget `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// If present, any pending change to the delegated stake.
	PendingChange *StakePendingChange `protobuf:"bytes,4,opt,name=pending_change,json=pendingChange,proto3,oneof" json:"pending_change,omitempty"`
}

func (x *AccountStakingInfo_Delegator) Reset() {
	*x = AccountStakingInfo_Delegator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStakingInfo_Delegator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStakingInfo_Delegator) ProtoMessage() {}

func (x *AccountStakingInfo_Delegator) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStakingInfo_Delegator.ProtoReflect.Descriptor instead.
func (*AccountStakingInfo_Delegator) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{26, 1}
}

func (x *AccountStakingInfo_Delegator) GetStakedAmount() *Amount {
	if x != nil {
		return x.StakedAmount
	}
	return nil
}

func (x *AccountStakingInfo_Delegator) GetRestakeEarnings() bool {
	if x != nil {
		return x.RestakeEarnings
	}
	return false
}

func (x *AccountStakingInfo_Delegator) GetTarget() *DelegationTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *AccountStakingInfo_Delegator) GetPendingChange() *StakePendingChange {
	if x != nil {
		return x.PendingChange
	}
	return nil
}

// Request using a relative block height.
type BlockHashInput_RelativeHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Genesis index to start from.
	GenesisIndex *GenesisIndex `protobuf:"bytes,1,opt,name=genesis_index,json=genesisIndex,proto3" json:"genesis_index,omitempty"`
	// Height starting from the genesis block at the genesis index.
	Height *BlockHeight `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	// Whether to return results only from the specified genesis index (`true`),
	// or allow results from more recent genesis indices as well (`false`).
	Restrict bool `protobuf:"varint,3,opt,name=restrict,proto3" json:"restrict,omitempty"`
}

func (x *BlockHashInput_RelativeHeight) Reset() {
	*x = BlockHashInput_RelativeHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHashInput_RelativeHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHashInput_RelativeHeight) ProtoMessage() {}

func (x *BlockHashInput_RelativeHeight) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHashInput_RelativeHeight.ProtoReflect.Descriptor instead.
func (*BlockHashInput_RelativeHeight) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{50, 0}
}

func (x *BlockHashInput_RelativeHeight) GetGenesisIndex() *GenesisIndex {
	if x != nil {
		return x.GenesisIndex
	}
	return nil
}

func (x *BlockHashInput_RelativeHeight) GetHeight() *BlockHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *BlockHashInput_RelativeHeight) GetRestrict() bool {
	if x != nil {
		return x.Restrict
	}
	return false
}

// Version 0 smart contract instance information.
type InstanceInfo_V0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the instance.
	Model *ContractStateV0 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// The account address which deployed the instance.
	Owner *AccountAddress `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The amount of CCD tokens in the balance of the instance.
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// A list of endpoints exposed by the instance.
	Methods []*ReceiveName `protobuf:"bytes,4,rep,name=methods,proto3" json:"methods,omitempty"`
	// The name of the smart contract of the instance.
	Name *InitName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The module reference for the smart contract module of the instance.
	SourceModule *ModuleRef `protobuf:"bytes,6,opt,name=source_module,json=sourceModule,proto3" json:"source_module,omitempty"`
}

func (x *InstanceInfo_V0) Reset() {
	*x = InstanceInfo_V0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo_V0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo_V0) ProtoMessage() {}

func (x *InstanceInfo_V0) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo_V0.ProtoReflect.Descriptor instead.
func (*InstanceInfo_V0) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{58, 0}
}

func (x *InstanceInfo_V0) GetModel() *ContractStateV0 {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *InstanceInfo_V0) GetOwner() *AccountAddress {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *InstanceInfo_V0) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InstanceInfo_V0) GetMethods() []*ReceiveName {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *InstanceInfo_V0) GetName() *InitName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *InstanceInfo_V0) GetSourceModule() *ModuleRef {
	if x != nil {
		return x.SourceModule
	}
	return nil
}

// Version 1 smart contract instance information.
type InstanceInfo_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account address which deployed the instance.
	Owner *AccountAddress `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The amount of CCD tokens in the balance of the instance.
	Amount *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// A list of endpoints exposed by the instance.
	Methods []*ReceiveName `protobuf:"bytes,4,rep,name=methods,proto3" json:"methods,omitempty"`
	// The name of the smart contract of the instance.
	Name *InitName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The module reference for the smart contract module of the instance.
	SourceModule *ModuleRef `protobuf:"bytes,6,opt,name=source_module,json=sourceModule,proto3" json:"source_module,omitempty"`
}

func (x *InstanceInfo_V1) Reset() {
	*x = InstanceInfo_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo_V1) ProtoMessage() {}

func (x *InstanceInfo_V1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo_V1.ProtoReflect.Descriptor instead.
func (*InstanceInfo_V1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{58, 1}
}

func (x *InstanceInfo_V1) GetOwner() *AccountAddress {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *InstanceInfo_V1) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InstanceInfo_V1) GetMethods() []*ReceiveName {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *InstanceInfo_V1) GetName() *InitName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *InstanceInfo_V1) GetSourceModule() *ModuleRef {
	if x != nil {
		return x.SourceModule
	}
	return nil
}

type BlockItemStatus_Committed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcomes []*BlockItemSummaryInBlock `protobuf:"bytes,1,rep,name=outcomes,proto3" json:"outcomes,omitempty"`
}

func (x *BlockItemStatus_Committed) Reset() {
	*x = BlockItemStatus_Committed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockItemStatus_Committed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockItemStatus_Committed) ProtoMessage() {}

func (x *BlockItemStatus_Committed) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockItemStatus_Committed.ProtoReflect.Descriptor instead.
func (*BlockItemStatus_Committed) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{66, 0}
}

func (x *BlockItemStatus_Committed) GetOutcomes() []*BlockItemSummaryInBlock {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

type BlockItemStatus_Finalized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome *BlockItemSummaryInBlock `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *BlockItemStatus_Finalized) Reset() {
	*x = BlockItemStatus_Finalized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockItemStatus_Finalized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockItemStatus_Finalized) ProtoMessage() {}

func (x *BlockItemStatus_Finalized) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockItemStatus_Finalized.ProtoReflect.Descriptor instead.
func (*BlockItemStatus_Finalized) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{66, 1}
}

func (x *BlockItemStatus_Finalized) GetOutcome() *BlockItemSummaryInBlock {
	if x != nil {
		return x.Outcome
	}
	return nil
}

type RejectReason_InvalidInitMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleRef *ModuleRef `protobuf:"bytes,1,opt,name=module_ref,json=moduleRef,proto3" json:"module_ref,omitempty"`
	InitName  *InitName  `protobuf:"bytes,2,opt,name=init_name,json=initName,proto3" json:"init_name,omitempty"`
}

func (x *RejectReason_InvalidInitMethod) Reset() {
	*x = RejectReason_InvalidInitMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectReason_InvalidInitMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectReason_InvalidInitMethod) ProtoMessage() {}

func (x *RejectReason_InvalidInitMethod) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectReason_InvalidInitMethod.ProtoReflect.Descriptor instead.
func (*RejectReason_InvalidInitMethod) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72, 0}
}

func (x *RejectReason_InvalidInitMethod) GetModuleRef() *ModuleRef {
	if x != nil {
		return x.ModuleRef
	}
	return nil
}

func (x *RejectReason_InvalidInitMethod) GetInitName() *InitName {
	if x != nil {
		return x.InitName
	}
	return nil
}

type RejectReason_InvalidReceiveMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleRef   *ModuleRef   `protobuf:"bytes,1,opt,name=module_ref,json=moduleRef,proto3" json:"module_ref,omitempty"`
	ReceiveName *ReceiveName `protobuf:"bytes,2,opt,name=receive_name,json=receiveName,proto3" json:"receive_name,omitempty"`
}

func (x *RejectReason_InvalidReceiveMethod) Reset() {
	*x = RejectReason_InvalidReceiveMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectReason_InvalidReceiveMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectReason_InvalidReceiveMethod) ProtoMessage() {}

func (x *RejectReason_InvalidReceiveMethod) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectReason_InvalidReceiveMethod.ProtoReflect.Descriptor instead.
func (*RejectReason_InvalidReceiveMethod) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72, 1}
}

func (x *RejectReason_InvalidReceiveMethod) GetModuleRef() *ModuleRef {
	if x != nil {
		return x.ModuleRef
	}
	return nil
}

func (x *RejectReason_InvalidReceiveMethod) GetReceiveName() *ReceiveName {
	if x != nil {
		return x.ReceiveName
	}
	return nil
}

type RejectReason_AmountTooLarge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  *Amount  `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RejectReason_AmountTooLarge) Reset() {
	*x = RejectReason_AmountTooLarge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectReason_AmountTooLarge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectReason_AmountTooLarge) ProtoMessage() {}

func (x *RejectReason_AmountTooLarge) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectReason_AmountTooLarge.ProtoReflect.Descriptor instead.
func (*RejectReason_AmountTooLarge) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72, 2}
}

func (x *RejectReason_AmountTooLarge) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RejectReason_AmountTooLarge) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type RejectReason_RejectedInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RejectReason int32 `protobuf:"varint,1,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *RejectReason_RejectedInit) Reset() {
	*x = RejectReason_RejectedInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectReason_RejectedInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectReason_RejectedInit) ProtoMessage() {}

func (x *RejectReason_RejectedInit) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectReason_RejectedInit.ProtoReflect.Descriptor instead.
func (*RejectReason_RejectedInit) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72, 3}
}

func (x *RejectReason_RejectedInit) GetRejectReason() int32 {
	if x != nil {
		return x.RejectReason
	}
	return 0
}

type RejectReason_RejectedReceive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RejectReason    int32            `protobuf:"varint,1,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	ContractAddress *ContractAddress `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ReceiveName     *ReceiveName     `protobuf:"bytes,3,opt,name=receive_name,json=receiveName,proto3" json:"receive_name,omitempty"`
	Parameter       *Parameter       `protobuf:"bytes,4,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *RejectReason_RejectedReceive) Reset() {
	*x = RejectReason_RejectedReceive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectReason_RejectedReceive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectReason_RejectedReceive) ProtoMessage() {}

func (x *RejectReason_RejectedReceive) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectReason_RejectedReceive.ProtoReflect.Descriptor instead.
func (*RejectReason_RejectedReceive) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72, 4}
}

func (x *RejectReason_RejectedReceive) GetRejectReason() int32 {
	if x != nil {
		return x.RejectReason
	}
	return 0
}

func (x *RejectReason_RejectedReceive) GetContractAddress() *ContractAddress {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *RejectReason_RejectedReceive) GetReceiveName() *ReceiveName {
	if x != nil {
		return x.ReceiveName
	}
	return nil
}

func (x *RejectReason_RejectedReceive) GetParameter() *Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

type RejectReason_DuplicateCredIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*CredentialRegistrationId `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *RejectReason_DuplicateCredIds) Reset() {
	*x = RejectReason_DuplicateCredIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectReason_DuplicateCredIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectReason_DuplicateCredIds) ProtoMessage() {}

func (x *RejectReason_DuplicateCredIds) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectReason_DuplicateCredIds.ProtoReflect.Descriptor instead.
func (*RejectReason_DuplicateCredIds) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72, 5}
}

func (x *RejectReason_DuplicateCredIds) GetIds() []*CredentialRegistrationId {
	if x != nil {
		return x.Ids
	}
	return nil
}

type RejectReason_NonExistentCredIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*CredentialRegistrationId `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *RejectReason_NonExistentCredIds) Reset() {
	*x = RejectReason_NonExistentCredIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectReason_NonExistentCredIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectReason_NonExistentCredIds) ProtoMessage() {}

func (x *RejectReason_NonExistentCredIds) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectReason_NonExistentCredIds.ProtoReflect.Descriptor instead.
func (*RejectReason_NonExistentCredIds) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72, 6}
}

func (x *RejectReason_NonExistentCredIds) GetIds() []*CredentialRegistrationId {
	if x != nil {
		return x.Ids
	}
	return nil
}

// A contract transferred an amount to an account.
type ContractTraceElement_Transferred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sender contract.
	Sender *ContractAddress `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Amount transferred.
	Amount *Amount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Receiver account.
	Receiver *AccountAddress `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *ContractTraceElement_Transferred) Reset() {
	*x = ContractTraceElement_Transferred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractTraceElement_Transferred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractTraceElement_Transferred) ProtoMessage() {}

func (x *ContractTraceElement_Transferred) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractTraceElement_Transferred.ProtoReflect.Descriptor instead.
func (*ContractTraceElement_Transferred) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{76, 0}
}

func (x *ContractTraceElement_Transferred) GetSender() *ContractAddress {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *ContractTraceElement_Transferred) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ContractTraceElement_Transferred) GetReceiver() *AccountAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

// A contract was interrupted.
// This occurs when a contract invokes another contract or makes a transfer to an account.
type ContractTraceElement_Interrupted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contract interrupted.
	Address *ContractAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The events generated up until the interruption.
	Events []*ContractEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ContractTraceElement_Interrupted) Reset() {
	*x = ContractTraceElement_Interrupted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractTraceElement_Interrupted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractTraceElement_Interrupted) ProtoMessage() {}

func (x *ContractTraceElement_Interrupted) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractTraceElement_Interrupted.ProtoReflect.Descriptor instead.
func (*ContractTraceElement_Interrupted) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{76, 1}
}

func (x *ContractTraceElement_Interrupted) GetAddress() *ContractAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ContractTraceElement_Interrupted) GetEvents() []*ContractEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// A previously interrupted contract was resumed.
type ContractTraceElement_Resumed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contract resumed.
	Address *ContractAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Whether the action that caused the interruption (invoke contract or make transfer) was successful or not.
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ContractTraceElement_Resumed) Reset() {
	*x = ContractTraceElement_Resumed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractTraceElement_Resumed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractTraceElement_Resumed) ProtoMessage() {}

func (x *ContractTraceElement_Resumed) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractTraceElement_Resumed.ProtoReflect.Descriptor instead.
func (*ContractTraceElement_Resumed) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{76, 2}
}

func (x *ContractTraceElement_Resumed) GetAddress() *ContractAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ContractTraceElement_Resumed) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// A previously interrupted contract was resumed.
type ContractTraceElement_Upgraded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The that was upgraded.
	Address *ContractAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The module from which the contract was upgraded.
	From *ModuleRef `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// The module to which it was upgraded.
	To *ModuleRef `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ContractTraceElement_Upgraded) Reset() {
	*x = ContractTraceElement_Upgraded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractTraceElement_Upgraded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractTraceElement_Upgraded) ProtoMessage() {}

func (x *ContractTraceElement_Upgraded) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractTraceElement_Upgraded.ProtoReflect.Descriptor instead.
func (*ContractTraceElement_Upgraded) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{76, 3}
}

func (x *ContractTraceElement_Upgraded) GetAddress() *ContractAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ContractTraceElement_Upgraded) GetFrom() *ModuleRef {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ContractTraceElement_Upgraded) GetTo() *ModuleRef {
	if x != nil {
		return x.To
	}
	return nil
}

// A baker was added.
type BakerEvent_BakerAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The keys with which the baker registered.
	KeysEvent *BakerKeysEvent `protobuf:"bytes,1,opt,name=keys_event,json=keysEvent,proto3" json:"keys_event,omitempty"`
	// The amount the account staked to become a baker. This amount is
	// locked.
	Stake *Amount `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	// Whether the baker will automatically add earnings to their stake or
	// not.
	RestakeEarnings bool `protobuf:"varint,3,opt,name=restake_earnings,json=restakeEarnings,proto3" json:"restake_earnings,omitempty"`
}

func (x *BakerEvent_BakerAdded) Reset() {
	*x = BakerEvent_BakerAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerAdded) ProtoMessage() {}

func (x *BakerEvent_BakerAdded) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerAdded.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerAdded) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 0}
}

func (x *BakerEvent_BakerAdded) GetKeysEvent() *BakerKeysEvent {
	if x != nil {
		return x.KeysEvent
	}
	return nil
}

func (x *BakerEvent_BakerAdded) GetStake() *Amount {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *BakerEvent_BakerAdded) GetRestakeEarnings() bool {
	if x != nil {
		return x.RestakeEarnings
	}
	return false
}

// Baker stake increased.
type BakerEvent_BakerStakeIncreased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker's id.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// The new stake.
	NewStake *Amount `protobuf:"bytes,2,opt,name=new_stake,json=newStake,proto3" json:"new_stake,omitempty"`
}

func (x *BakerEvent_BakerStakeIncreased) Reset() {
	*x = BakerEvent_BakerStakeIncreased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerStakeIncreased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerStakeIncreased) ProtoMessage() {}

func (x *BakerEvent_BakerStakeIncreased) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerStakeIncreased.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerStakeIncreased) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 1}
}

func (x *BakerEvent_BakerStakeIncreased) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerEvent_BakerStakeIncreased) GetNewStake() *Amount {
	if x != nil {
		return x.NewStake
	}
	return nil
}

type BakerEvent_BakerStakeDecreased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker's id.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// The new stake.
	NewStake *Amount `protobuf:"bytes,2,opt,name=new_stake,json=newStake,proto3" json:"new_stake,omitempty"`
}

func (x *BakerEvent_BakerStakeDecreased) Reset() {
	*x = BakerEvent_BakerStakeDecreased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerStakeDecreased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerStakeDecreased) ProtoMessage() {}

func (x *BakerEvent_BakerStakeDecreased) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerStakeDecreased.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerStakeDecreased) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 2}
}

func (x *BakerEvent_BakerStakeDecreased) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerEvent_BakerStakeDecreased) GetNewStake() *Amount {
	if x != nil {
		return x.NewStake
	}
	return nil
}

type BakerEvent_BakerRestakeEarningsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker's id.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// The new value of the flag.
	RestakeEarnings bool `protobuf:"varint,2,opt,name=restake_earnings,json=restakeEarnings,proto3" json:"restake_earnings,omitempty"`
}

func (x *BakerEvent_BakerRestakeEarningsUpdated) Reset() {
	*x = BakerEvent_BakerRestakeEarningsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerRestakeEarningsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerRestakeEarningsUpdated) ProtoMessage() {}

func (x *BakerEvent_BakerRestakeEarningsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerRestakeEarningsUpdated.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerRestakeEarningsUpdated) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 3}
}

func (x *BakerEvent_BakerRestakeEarningsUpdated) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerEvent_BakerRestakeEarningsUpdated) GetRestakeEarnings() bool {
	if x != nil {
		return x.RestakeEarnings
	}
	return false
}

// Updated open status for a baker pool.
type BakerEvent_BakerSetOpenStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker's id.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// The new open status.
	OpenStatus OpenStatus `protobuf:"varint,2,opt,name=open_status,json=openStatus,proto3,enum=concordium.v2.OpenStatus" json:"open_status,omitempty"`
}

func (x *BakerEvent_BakerSetOpenStatus) Reset() {
	*x = BakerEvent_BakerSetOpenStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerSetOpenStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerSetOpenStatus) ProtoMessage() {}

func (x *BakerEvent_BakerSetOpenStatus) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerSetOpenStatus.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerSetOpenStatus) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 4}
}

func (x *BakerEvent_BakerSetOpenStatus) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerEvent_BakerSetOpenStatus) GetOpenStatus() OpenStatus {
	if x != nil {
		return x.OpenStatus
	}
	return OpenStatus_OPEN_STATUS_OPEN_FOR_ALL
}

// Updated metadata url for a baker pool.
type BakerEvent_BakerSetMetadataUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker's id.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// The URL.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BakerEvent_BakerSetMetadataUrl) Reset() {
	*x = BakerEvent_BakerSetMetadataUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerSetMetadataUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerSetMetadataUrl) ProtoMessage() {}

func (x *BakerEvent_BakerSetMetadataUrl) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerSetMetadataUrl.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerSetMetadataUrl) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 5}
}

func (x *BakerEvent_BakerSetMetadataUrl) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerEvent_BakerSetMetadataUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Updated transaction fee commission for a baker pool.
type BakerEvent_BakerSetTransactionFeeCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker's id.
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// The transaction fee commission.
	TransactionFeeCommission *AmountFraction `protobuf:"bytes,2,opt,name=transaction_fee_commission,json=transactionFeeCommission,proto3" json:"transaction_fee_commission,omitempty"`
}

func (x *BakerEvent_BakerSetTransactionFeeCommission) Reset() {
	*x = BakerEvent_BakerSetTransactionFeeCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerSetTransactionFeeCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerSetTransactionFeeCommission) ProtoMessage() {}

func (x *BakerEvent_BakerSetTransactionFeeCommission) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerSetTransactionFeeCommission.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerSetTransactionFeeCommission) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 6}
}

func (x *BakerEvent_BakerSetTransactionFeeCommission) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerEvent_BakerSetTransactionFeeCommission) GetTransactionFeeCommission() *AmountFraction {
	if x != nil {
		return x.TransactionFeeCommission
	}
	return nil
}

// Updated baking reward commission for baker pool
type BakerEvent_BakerSetBakingRewardCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker's id
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// The baking reward commission
	BakingRewardCommission *AmountFraction `protobuf:"bytes,2,opt,name=baking_reward_commission,json=bakingRewardCommission,proto3" json:"baking_reward_commission,omitempty"`
}

func (x *BakerEvent_BakerSetBakingRewardCommission) Reset() {
	*x = BakerEvent_BakerSetBakingRewardCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerSetBakingRewardCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerSetBakingRewardCommission) ProtoMessage() {}

func (x *BakerEvent_BakerSetBakingRewardCommission) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerSetBakingRewardCommission.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerSetBakingRewardCommission) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 7}
}

func (x *BakerEvent_BakerSetBakingRewardCommission) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerEvent_BakerSetBakingRewardCommission) GetBakingRewardCommission() *AmountFraction {
	if x != nil {
		return x.BakingRewardCommission
	}
	return nil
}

// Updated finalization reward commission for baker pool
type BakerEvent_BakerSetFinalizationRewardCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Baker's id
	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// The finalization reward commission
	FinalizationRewardCommission *AmountFraction `protobuf:"bytes,2,opt,name=finalization_reward_commission,json=finalizationRewardCommission,proto3" json:"finalization_reward_commission,omitempty"`
}

func (x *BakerEvent_BakerSetFinalizationRewardCommission) Reset() {
	*x = BakerEvent_BakerSetFinalizationRewardCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakerEvent_BakerSetFinalizationRewardCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakerEvent_BakerSetFinalizationRewardCommission) ProtoMessage() {}

func (x *BakerEvent_BakerSetFinalizationRewardCommission) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakerEvent_BakerSetFinalizationRewardCommission.ProtoReflect.Descriptor instead.
func (*BakerEvent_BakerSetFinalizationRewardCommission) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84, 8}
}

func (x *BakerEvent_BakerSetFinalizationRewardCommission) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (x *BakerEvent_BakerSetFinalizationRewardCommission) GetFinalizationRewardCommission() *AmountFraction {
	if x != nil {
		return x.FinalizationRewardCommission
	}
	return nil
}

type DelegationEvent_DelegationStakeIncreased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delegator's id
	DelegatorId *DelegatorId `protobuf:"bytes,1,opt,name=delegator_id,json=delegatorId,proto3" json:"delegator_id,omitempty"`
	// New stake
	NewStake *Amount `protobuf:"bytes,2,opt,name=new_stake,json=newStake,proto3" json:"new_stake,omitempty"`
}

func (x *DelegationEvent_DelegationStakeIncreased) Reset() {
	*x = DelegationEvent_DelegationStakeIncreased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationEvent_DelegationStakeIncreased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationEvent_DelegationStakeIncreased) ProtoMessage() {}

func (x *DelegationEvent_DelegationStakeIncreased) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationEvent_DelegationStakeIncreased.ProtoReflect.Descriptor instead.
func (*DelegationEvent_DelegationStakeIncreased) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{86, 0}
}

func (x *DelegationEvent_DelegationStakeIncreased) GetDelegatorId() *DelegatorId {
	if x != nil {
		return x.DelegatorId
	}
	return nil
}

func (x *DelegationEvent_DelegationStakeIncreased) GetNewStake() *Amount {
	if x != nil {
		return x.NewStake
	}
	return nil
}

type DelegationEvent_DelegationStakeDecreased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delegator's id
	DelegatorId *DelegatorId `protobuf:"bytes,1,opt,name=delegator_id,json=delegatorId,proto3" json:"delegator_id,omitempty"`
	// New stake
	NewStake *Amount `protobuf:"bytes,2,opt,name=new_stake,json=newStake,proto3" json:"new_stake,omitempty"`
}

func (x *DelegationEvent_DelegationStakeDecreased) Reset() {
	*x = DelegationEvent_DelegationStakeDecreased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationEvent_DelegationStakeDecreased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationEvent_DelegationStakeDecreased) ProtoMessage() {}

func (x *DelegationEvent_DelegationStakeDecreased) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationEvent_DelegationStakeDecreased.ProtoReflect.Descriptor instead.
func (*DelegationEvent_DelegationStakeDecreased) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{86, 1}
}

func (x *DelegationEvent_DelegationStakeDecreased) GetDelegatorId() *DelegatorId {
	if x != nil {
		return x.DelegatorId
	}
	return nil
}

func (x *DelegationEvent_DelegationStakeDecreased) GetNewStake() *Amount {
	if x != nil {
		return x.NewStake
	}
	return nil
}

type DelegationEvent_DelegationSetRestakeEarnings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delegator's id
	DelegatorId *DelegatorId `protobuf:"bytes,1,opt,name=delegator_id,json=delegatorId,proto3" json:"delegator_id,omitempty"`
	// Whether earnings will be restaked
	RestakeEarnings bool `protobuf:"varint,2,opt,name=restake_earnings,json=restakeEarnings,proto3" json:"restake_earnings,omitempty"`
}

func (x *DelegationEvent_DelegationSetRestakeEarnings) Reset() {
	*x = DelegationEvent_DelegationSetRestakeEarnings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationEvent_DelegationSetRestakeEarnings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationEvent_DelegationSetRestakeEarnings) ProtoMessage() {}

func (x *DelegationEvent_DelegationSetRestakeEarnings) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationEvent_DelegationSetRestakeEarnings.ProtoReflect.Descriptor instead.
func (*DelegationEvent_DelegationSetRestakeEarnings) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{86, 2}
}

func (x *DelegationEvent_DelegationSetRestakeEarnings) GetDelegatorId() *DelegatorId {
	if x != nil {
		return x.DelegatorId
	}
	return nil
}

func (x *DelegationEvent_DelegationSetRestakeEarnings) GetRestakeEarnings() bool {
	if x != nil {
		return x.RestakeEarnings
	}
	return false
}

type DelegationEvent_DelegationSetDelegationTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delegator's id
	DelegatorId *DelegatorId `protobuf:"bytes,1,opt,name=delegator_id,json=delegatorId,proto3" json:"delegator_id,omitempty"`
	// New delegation target
	DelegationTarget *DelegationTarget `protobuf:"bytes,2,opt,name=delegation_target,json=delegationTarget,proto3" json:"delegation_target,omitempty"`
}

func (x *DelegationEvent_DelegationSetDelegationTarget) Reset() {
	*x = DelegationEvent_DelegationSetDelegationTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationEvent_DelegationSetDelegationTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationEvent_DelegationSetDelegationTarget) ProtoMessage() {}

func (x *DelegationEvent_DelegationSetDelegationTarget) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationEvent_DelegationSetDelegationTarget.ProtoReflect.Descriptor instead.
func (*DelegationEvent_DelegationSetDelegationTarget) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{86, 3}
}

func (x *DelegationEvent_DelegationSetDelegationTarget) GetDelegatorId() *DelegatorId {
	if x != nil {
		return x.DelegatorId
	}
	return nil
}

func (x *DelegationEvent_DelegationSetDelegationTarget) GetDelegationTarget() *DelegationTarget {
	if x != nil {
		return x.DelegationTarget
	}
	return nil
}

// No effects other than payment from this transaction.
// The rejection reason indicates why the transaction failed.
type AccountTransactionEffects_None struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction type of a failed transaction, if known.
	// In case of serialization failure this will not be set.
	TransactionType *TransactionType `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3,enum=concordium.v2.TransactionType,oneof" json:"transaction_type,omitempty"`
	// Reason for rejection of the transaction.
	RejectReason *RejectReason `protobuf:"bytes,2,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *AccountTransactionEffects_None) Reset() {
	*x = AccountTransactionEffects_None{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_None) ProtoMessage() {}

func (x *AccountTransactionEffects_None) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_None.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_None) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 0}
}

func (x *AccountTransactionEffects_None) GetTransactionType() TransactionType {
	if x != nil && x.TransactionType != nil {
		return *x.TransactionType
	}
	return TransactionType_DEPLOY_MODULE
}

func (x *AccountTransactionEffects_None) GetRejectReason() *RejectReason {
	if x != nil {
		return x.RejectReason
	}
	return nil
}

// A contract update transaction was issued and produced the given trace.
// This is the result of Update transaction.
type AccountTransactionEffects_ContractUpdateIssued struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Effects []*ContractTraceElement `protobuf:"bytes,1,rep,name=effects,proto3" json:"effects,omitempty"`
}

func (x *AccountTransactionEffects_ContractUpdateIssued) Reset() {
	*x = AccountTransactionEffects_ContractUpdateIssued{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_ContractUpdateIssued) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_ContractUpdateIssued) ProtoMessage() {}

func (x *AccountTransactionEffects_ContractUpdateIssued) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_ContractUpdateIssued.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_ContractUpdateIssued) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 1}
}

func (x *AccountTransactionEffects_ContractUpdateIssued) GetEffects() []*ContractTraceElement {
	if x != nil {
		return x.Effects
	}
	return nil
}

// A simple account to account transfer occurred. This is the result of a
// successful Transfer transaction.
type AccountTransactionEffects_AccountTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount that was transferred.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Receiver account.
	Receiver *AccountAddress `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Memo.
	Memo *Memo `protobuf:"bytes,3,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
}

func (x *AccountTransactionEffects_AccountTransfer) Reset() {
	*x = AccountTransactionEffects_AccountTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_AccountTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_AccountTransfer) ProtoMessage() {}

func (x *AccountTransactionEffects_AccountTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_AccountTransfer.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_AccountTransfer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 2}
}

func (x *AccountTransactionEffects_AccountTransfer) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *AccountTransactionEffects_AccountTransfer) GetReceiver() *AccountAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *AccountTransactionEffects_AccountTransfer) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

// An account was deregistered as a baker. This is the result of a
// successful UpdateBakerStake transaction.
type AccountTransactionEffects_BakerStakeUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the stake was updated (that is, it changed and did not stay the
	// same) then this is present, otherwise it is not present.
	Update *BakerStakeUpdatedData `protobuf:"bytes,1,opt,name=update,proto3,oneof" json:"update,omitempty"`
}

func (x *AccountTransactionEffects_BakerStakeUpdated) Reset() {
	*x = AccountTransactionEffects_BakerStakeUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_BakerStakeUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_BakerStakeUpdated) ProtoMessage() {}

func (x *AccountTransactionEffects_BakerStakeUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_BakerStakeUpdated.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_BakerStakeUpdated) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 3}
}

func (x *AccountTransactionEffects_BakerStakeUpdated) GetUpdate() *BakerStakeUpdatedData {
	if x != nil {
		return x.Update
	}
	return nil
}

// An encrypted amount was transferred. This is the result of a successful
// EncryptedAmountTransfer transaction.
type AccountTransactionEffects_EncryptedAmountTransferred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Removed *EncryptedAmountRemovedEvent `protobuf:"bytes,1,opt,name=removed,proto3" json:"removed,omitempty"`
	Added   *NewEncryptedAmountEvent     `protobuf:"bytes,2,opt,name=added,proto3" json:"added,omitempty"`
	Memo    *Memo                        `protobuf:"bytes,3,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
}

func (x *AccountTransactionEffects_EncryptedAmountTransferred) Reset() {
	*x = AccountTransactionEffects_EncryptedAmountTransferred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_EncryptedAmountTransferred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_EncryptedAmountTransferred) ProtoMessage() {}

func (x *AccountTransactionEffects_EncryptedAmountTransferred) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_EncryptedAmountTransferred.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_EncryptedAmountTransferred) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 4}
}

func (x *AccountTransactionEffects_EncryptedAmountTransferred) GetRemoved() *EncryptedAmountRemovedEvent {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *AccountTransactionEffects_EncryptedAmountTransferred) GetAdded() *NewEncryptedAmountEvent {
	if x != nil {
		return x.Added
	}
	return nil
}

func (x *AccountTransactionEffects_EncryptedAmountTransferred) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

// An account transferred part of its encrypted balance to its public
// balance. This is the result of a successful TransferToPublic transaction.
type AccountTransactionEffects_TransferredToPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Removed *EncryptedAmountRemovedEvent `protobuf:"bytes,1,opt,name=removed,proto3" json:"removed,omitempty"`
	Amount  *Amount                      `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AccountTransactionEffects_TransferredToPublic) Reset() {
	*x = AccountTransactionEffects_TransferredToPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_TransferredToPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_TransferredToPublic) ProtoMessage() {}

func (x *AccountTransactionEffects_TransferredToPublic) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_TransferredToPublic.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_TransferredToPublic) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 5}
}

func (x *AccountTransactionEffects_TransferredToPublic) GetRemoved() *EncryptedAmountRemovedEvent {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *AccountTransactionEffects_TransferredToPublic) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// A transfer with schedule was performed. This is the result of a
// successful TransferWithSchedule transaction.
type AccountTransactionEffects_TransferredWithSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Receiver account.
	Receiver *AccountAddress `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The list of releases. Ordered by increasing timestamp.
	Amount []*NewRelease `protobuf:"bytes,2,rep,name=amount,proto3" json:"amount,omitempty"`
	// Optional memo.
	Memo *Memo `protobuf:"bytes,3,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
}

func (x *AccountTransactionEffects_TransferredWithSchedule) Reset() {
	*x = AccountTransactionEffects_TransferredWithSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_TransferredWithSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_TransferredWithSchedule) ProtoMessage() {}

func (x *AccountTransactionEffects_TransferredWithSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_TransferredWithSchedule.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_TransferredWithSchedule) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 6}
}

func (x *AccountTransactionEffects_TransferredWithSchedule) GetReceiver() *AccountAddress {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *AccountTransactionEffects_TransferredWithSchedule) GetAmount() []*NewRelease {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *AccountTransactionEffects_TransferredWithSchedule) GetMemo() *Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

// Account's credentials were updated. This is the result of a
// successful UpdateCredentials transaction.
type AccountTransactionEffects_CredentialsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The credential ids that were added.
	NewCredIds []*CredentialRegistrationId `protobuf:"bytes,1,rep,name=new_cred_ids,json=newCredIds,proto3" json:"new_cred_ids,omitempty"`
	// The credentials that were removed.
	RemovedCredIds []*CredentialRegistrationId `protobuf:"bytes,2,rep,name=removed_cred_ids,json=removedCredIds,proto3" json:"removed_cred_ids,omitempty"`
	// The (possibly) updated account threshold.
	NewThreshold *AccountThreshold `protobuf:"bytes,3,opt,name=new_threshold,json=newThreshold,proto3" json:"new_threshold,omitempty"`
}

func (x *AccountTransactionEffects_CredentialsUpdated) Reset() {
	*x = AccountTransactionEffects_CredentialsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_CredentialsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_CredentialsUpdated) ProtoMessage() {}

func (x *AccountTransactionEffects_CredentialsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_CredentialsUpdated.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_CredentialsUpdated) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 7}
}

func (x *AccountTransactionEffects_CredentialsUpdated) GetNewCredIds() []*CredentialRegistrationId {
	if x != nil {
		return x.NewCredIds
	}
	return nil
}

func (x *AccountTransactionEffects_CredentialsUpdated) GetRemovedCredIds() []*CredentialRegistrationId {
	if x != nil {
		return x.RemovedCredIds
	}
	return nil
}

func (x *AccountTransactionEffects_CredentialsUpdated) GetNewThreshold() *AccountThreshold {
	if x != nil {
		return x.NewThreshold
	}
	return nil
}

// A baker was configured. The details of what happened are contained in
// the list of BakerEvents.
type AccountTransactionEffects_BakerConfigured struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*BakerEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AccountTransactionEffects_BakerConfigured) Reset() {
	*x = AccountTransactionEffects_BakerConfigured{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_BakerConfigured) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_BakerConfigured) ProtoMessage() {}

func (x *AccountTransactionEffects_BakerConfigured) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_BakerConfigured.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_BakerConfigured) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 8}
}

func (x *AccountTransactionEffects_BakerConfigured) GetEvents() []*BakerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// An account configured delegation. The details of what happened are
// contained in the list of DelegationEvents.
type AccountTransactionEffects_DelegationConfigured struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*DelegationEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AccountTransactionEffects_DelegationConfigured) Reset() {
	*x = AccountTransactionEffects_DelegationConfigured{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransactionEffects_DelegationConfigured) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransactionEffects_DelegationConfigured) ProtoMessage() {}

func (x *AccountTransactionEffects_DelegationConfigured) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransactionEffects_DelegationConfigured.ProtoReflect.Descriptor instead.
func (*AccountTransactionEffects_DelegationConfigured) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87, 9}
}

func (x *AccountTransactionEffects_DelegationConfigured) GetEvents() []*DelegationEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// Identity of the anonymity revoker on the chain. This defines their
// evaluateion point for secret sharing, and thus it cannot be 0.
type ArInfo_ArIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ArInfo_ArIdentity) Reset() {
	*x = ArInfo_ArIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArInfo_ArIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArInfo_ArIdentity) ProtoMessage() {}

func (x *ArInfo_ArIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArInfo_ArIdentity.ProtoReflect.Descriptor instead.
func (*ArInfo_ArIdentity) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{102, 0}
}

func (x *ArInfo_ArIdentity) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Public key of an anonymity revoker.
type ArInfo_ArPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ArInfo_ArPublicKey) Reset() {
	*x = ArInfo_ArPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArInfo_ArPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArInfo_ArPublicKey) ProtoMessage() {}

func (x *ArInfo_ArPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArInfo_ArPublicKey.ProtoReflect.Descriptor instead.
func (*ArInfo_ArPublicKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{102, 1}
}

func (x *ArInfo_ArPublicKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Pointcheval-Sanders public key of the identity provider.
type IpInfo_IpVerifyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IpInfo_IpVerifyKey) Reset() {
	*x = IpInfo_IpVerifyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpInfo_IpVerifyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpInfo_IpVerifyKey) ProtoMessage() {}

func (x *IpInfo_IpVerifyKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpInfo_IpVerifyKey.ProtoReflect.Descriptor instead.
func (*IpInfo_IpVerifyKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{104, 0}
}

func (x *IpInfo_IpVerifyKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Ed25519 public key of the identity provider.
type IpInfo_IpCdiVerifyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IpInfo_IpCdiVerifyKey) Reset() {
	*x = IpInfo_IpCdiVerifyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpInfo_IpCdiVerifyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpInfo_IpCdiVerifyKey) ProtoMessage() {}

func (x *IpInfo_IpCdiVerifyKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpInfo_IpCdiVerifyKey.ProtoReflect.Descriptor instead.
func (*IpInfo_IpCdiVerifyKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{104, 1}
}

func (x *IpInfo_IpCdiVerifyKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type BlockItemSummary_TransactionIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BlockItemSummary_TransactionIndex) Reset() {
	*x = BlockItemSummary_TransactionIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockItemSummary_TransactionIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockItemSummary_TransactionIndex) ProtoMessage() {}

func (x *BlockItemSummary_TransactionIndex) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockItemSummary_TransactionIndex.ProtoReflect.Descriptor instead.
func (*BlockItemSummary_TransactionIndex) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{130, 0}
}

func (x *BlockItemSummary_TransactionIndex) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A reduction in baker equity capital is pending.
type PoolPendingChange_Reduce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New baker equity capital.
	ReducedEquityCapital *Amount `protobuf:"bytes,1,opt,name=reduced_equity_capital,json=reducedEquityCapital,proto3" json:"reduced_equity_capital,omitempty"`
	// Timestamp when the change takes effect.
	EffectiveTime *Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
}

func (x *PoolPendingChange_Reduce) Reset() {
	*x = PoolPendingChange_Reduce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolPendingChange_Reduce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolPendingChange_Reduce) ProtoMessage() {}

func (x *PoolPendingChange_Reduce) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolPendingChange_Reduce.ProtoReflect.Descriptor instead.
func (*PoolPendingChange_Reduce) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{137, 0}
}

func (x *PoolPendingChange_Reduce) GetReducedEquityCapital() *Amount {
	if x != nil {
		return x.ReducedEquityCapital
	}
	return nil
}

func (x *PoolPendingChange_Reduce) GetEffectiveTime() *Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

// Removal of the pool is pending.
type PoolPendingChange_Remove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the change takes effect.
	EffectiveTime *Timestamp `protobuf:"bytes,1,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
}

func (x *PoolPendingChange_Remove) Reset() {
	*x = PoolPendingChange_Remove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolPendingChange_Remove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolPendingChange_Remove) ProtoMessage() {}

func (x *PoolPendingChange_Remove) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolPendingChange_Remove.ProtoReflect.Descriptor instead.
func (*PoolPendingChange_Remove) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{137, 1}
}

func (x *PoolPendingChange_Remove) GetEffectiveTime() *Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

// Request using an absolute block height.
type BlocksAtHeightRequest_Absolute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The absolute block height.
	Height *AbsoluteBlockHeight `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *BlocksAtHeightRequest_Absolute) Reset() {
	*x = BlocksAtHeightRequest_Absolute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksAtHeightRequest_Absolute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksAtHeightRequest_Absolute) ProtoMessage() {}

func (x *BlocksAtHeightRequest_Absolute) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksAtHeightRequest_Absolute.ProtoReflect.Descriptor instead.
func (*BlocksAtHeightRequest_Absolute) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{141, 0}
}

func (x *BlocksAtHeightRequest_Absolute) GetHeight() *AbsoluteBlockHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

// Request using a relative block height.
type BlocksAtHeightRequest_Relative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Genesis index to start from.
	GenesisIndex *GenesisIndex `protobuf:"bytes,1,opt,name=genesis_index,json=genesisIndex,proto3" json:"genesis_index,omitempty"`
	// Height starting from the genesis block at the genesis index.
	Height *BlockHeight `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	// Whether to return results only from the specified genesis index (`true`),
	// or allow results from more recent genesis indices as well (`false`).
	Restrict bool `protobuf:"varint,3,opt,name=restrict,proto3" json:"restrict,omitempty"`
}

func (x *BlocksAtHeightRequest_Relative) Reset() {
	*x = BlocksAtHeightRequest_Relative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksAtHeightRequest_Relative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksAtHeightRequest_Relative) ProtoMessage() {}

func (x *BlocksAtHeightRequest_Relative) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksAtHeightRequest_Relative.ProtoReflect.Descriptor instead.
func (*BlocksAtHeightRequest_Relative) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{141, 1}
}

func (x *BlocksAtHeightRequest_Relative) GetGenesisIndex() *GenesisIndex {
	if x != nil {
		return x.GenesisIndex
	}
	return nil
}

func (x *BlocksAtHeightRequest_Relative) GetHeight() *BlockHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *BlocksAtHeightRequest_Relative) GetRestrict() bool {
	if x != nil {
		return x.Restrict
	}
	return false
}

// Version 0 tokenomics.
type TokenomicsInfo_V0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total CCD in existence.
	TotalAmount *Amount `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The total CCD in encrypted balances.
	TotalEncryptedAmount *Amount `protobuf:"bytes,2,opt,name=total_encrypted_amount,json=totalEncryptedAmount,proto3" json:"total_encrypted_amount,omitempty"`
	// The amount in the baking reward account.
	BakingRewardAccount *Amount `protobuf:"bytes,3,opt,name=baking_reward_account,json=bakingRewardAccount,proto3" json:"baking_reward_account,omitempty"`
	// The amount in the finalization reward account.
	FinalizationRewardAccount *Amount `protobuf:"bytes,4,opt,name=finalization_reward_account,json=finalizationRewardAccount,proto3" json:"finalization_reward_account,omitempty"`
	// The amount in the GAS account.
	GasAccount *Amount `protobuf:"bytes,5,opt,name=gas_account,json=gasAccount,proto3" json:"gas_account,omitempty"`
	// The protocol version.
	ProtocolVersion ProtocolVersion `protobuf:"varint,6,opt,name=protocol_version,json=protocolVersion,proto3,enum=concordium.v2.ProtocolVersion" json:"protocol_version,omitempty"`
}

func (x *TokenomicsInfo_V0) Reset() {
	*x = TokenomicsInfo_V0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenomicsInfo_V0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenomicsInfo_V0) ProtoMessage() {}

func (x *TokenomicsInfo_V0) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenomicsInfo_V0.ProtoReflect.Descriptor instead.
func (*TokenomicsInfo_V0) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{143, 0}
}

func (x *TokenomicsInfo_V0) GetTotalAmount() *Amount {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *TokenomicsInfo_V0) GetTotalEncryptedAmount() *Amount {
	if x != nil {
		return x.TotalEncryptedAmount
	}
	return nil
}

func (x *TokenomicsInfo_V0) GetBakingRewardAccount() *Amount {
	if x != nil {
		return x.BakingRewardAccount
	}
	return nil
}

func (x *TokenomicsInfo_V0) GetFinalizationRewardAccount() *Amount {
	if x != nil {
		return x.FinalizationRewardAccount
	}
	return nil
}

func (x *TokenomicsInfo_V0) GetGasAccount() *Amount {
	if x != nil {
		return x.GasAccount
	}
	return nil
}

func (x *TokenomicsInfo_V0) GetProtocolVersion() ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return ProtocolVersion_PROTOCOL_VERSION_1
}

// Version 1 tokenomics.
type TokenomicsInfo_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total CCD in existence.
	TotalAmount *Amount `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The total CCD in encrypted balances.
	TotalEncryptedAmount *Amount `protobuf:"bytes,2,opt,name=total_encrypted_amount,json=totalEncryptedAmount,proto3" json:"total_encrypted_amount,omitempty"`
	// The amount in the baking reward account.
	BakingRewardAccount *Amount `protobuf:"bytes,3,opt,name=baking_reward_account,json=bakingRewardAccount,proto3" json:"baking_reward_account,omitempty"`
	// The amount in the finalization reward account.
	FinalizationRewardAccount *Amount `protobuf:"bytes,4,opt,name=finalization_reward_account,json=finalizationRewardAccount,proto3" json:"finalization_reward_account,omitempty"`
	// The amount in the GAS account.
	GasAccount *Amount `protobuf:"bytes,5,opt,name=gas_account,json=gasAccount,proto3" json:"gas_account,omitempty"`
	// The transaction reward fraction accruing to the foundation (to be paid at next payday).
	FoundationTransactionRewards *Amount `protobuf:"bytes,6,opt,name=foundation_transaction_rewards,json=foundationTransactionRewards,proto3" json:"foundation_transaction_rewards,omitempty"`
	// The time of the next payday.
	NextPaydayTime *Timestamp `protobuf:"bytes,7,opt,name=next_payday_time,json=nextPaydayTime,proto3" json:"next_payday_time,omitempty"`
	// The rate at which CCD will be minted (as a proportion of the total supply) at the next payday.
	NextPaydayMintRate *MintRate `protobuf:"bytes,8,opt,name=next_payday_mint_rate,json=nextPaydayMintRate,proto3" json:"next_payday_mint_rate,omitempty"`
	// The total capital put up as stake by bakers and delegators.
	TotalStakedCapital *Amount `protobuf:"bytes,9,opt,name=total_staked_capital,json=totalStakedCapital,proto3" json:"total_staked_capital,omitempty"`
	// The protocol version.
	ProtocolVersion ProtocolVersion `protobuf:"varint,10,opt,name=protocol_version,json=protocolVersion,proto3,enum=concordium.v2.ProtocolVersion" json:"protocol_version,omitempty"`
}

func (x *TokenomicsInfo_V1) Reset() {
	*x = TokenomicsInfo_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenomicsInfo_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenomicsInfo_V1) ProtoMessage() {}

func (x *TokenomicsInfo_V1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenomicsInfo_V1.ProtoReflect.Descriptor instead.
func (*TokenomicsInfo_V1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{143, 1}
}

func (x *TokenomicsInfo_V1) GetTotalAmount() *Amount {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetTotalEncryptedAmount() *Amount {
	if x != nil {
		return x.TotalEncryptedAmount
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetBakingRewardAccount() *Amount {
	if x != nil {
		return x.BakingRewardAccount
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetFinalizationRewardAccount() *Amount {
	if x != nil {
		return x.FinalizationRewardAccount
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetGasAccount() *Amount {
	if x != nil {
		return x.GasAccount
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetFoundationTransactionRewards() *Amount {
	if x != nil {
		return x.FoundationTransactionRewards
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetNextPaydayTime() *Timestamp {
	if x != nil {
		return x.NextPaydayTime
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetNextPaydayMintRate() *MintRate {
	if x != nil {
		return x.NextPaydayMintRate
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetTotalStakedCapital() *Amount {
	if x != nil {
		return x.TotalStakedCapital
	}
	return nil
}

func (x *TokenomicsInfo_V1) GetProtocolVersion() ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return ProtocolVersion_PROTOCOL_VERSION_1
}

// Contract execution failed.
type InvokeInstanceResponse_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If invoking a V0 contract this is not provided, otherwise it is
	// potentially return value produced by the call unless the call failed with
	// out of energy or runtime error. If the V1 contract terminated with a
	// logic error then the return value is present.
	ReturnValue []byte `protobuf:"bytes,1,opt,name=return_value,json=returnValue,proto3,oneof" json:"return_value,omitempty"`
	// Energy used by the execution.
	UsedEnergy *Energy `protobuf:"bytes,2,opt,name=used_energy,json=usedEnergy,proto3" json:"used_energy,omitempty"`
	// Contract execution failed for the given reason.
	Reason *RejectReason `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *InvokeInstanceResponse_Failure) Reset() {
	*x = InvokeInstanceResponse_Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeInstanceResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeInstanceResponse_Failure) ProtoMessage() {}

func (x *InvokeInstanceResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeInstanceResponse_Failure.ProtoReflect.Descriptor instead.
func (*InvokeInstanceResponse_Failure) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{145, 0}
}

func (x *InvokeInstanceResponse_Failure) GetReturnValue() []byte {
	if x != nil {
		return x.ReturnValue
	}
	return nil
}

func (x *InvokeInstanceResponse_Failure) GetUsedEnergy() *Energy {
	if x != nil {
		return x.UsedEnergy
	}
	return nil
}

func (x *InvokeInstanceResponse_Failure) GetReason() *RejectReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

// Contract execution succeeded.
type InvokeInstanceResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If invoking a V0 contract this is absent. Otherwise it is the return
	// value produced by the contract.
	ReturnValue []byte `protobuf:"bytes,1,opt,name=return_value,json=returnValue,proto3,oneof" json:"return_value,omitempty"`
	// Energy used by the execution.
	UsedEnergy *Energy `protobuf:"bytes,2,opt,name=used_energy,json=usedEnergy,proto3" json:"used_energy,omitempty"`
	// Effects produced by contract execution.
	Effects []*ContractTraceElement `protobuf:"bytes,3,rep,name=effects,proto3" json:"effects,omitempty"`
}

func (x *InvokeInstanceResponse_Success) Reset() {
	*x = InvokeInstanceResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeInstanceResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeInstanceResponse_Success) ProtoMessage() {}

func (x *InvokeInstanceResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeInstanceResponse_Success.ProtoReflect.Descriptor instead.
func (*InvokeInstanceResponse_Success) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{145, 1}
}

func (x *InvokeInstanceResponse_Success) GetReturnValue() []byte {
	if x != nil {
		return x.ReturnValue
	}
	return nil
}

func (x *InvokeInstanceResponse_Success) GetUsedEnergy() *Energy {
	if x != nil {
		return x.UsedEnergy
	}
	return nil
}

func (x *InvokeInstanceResponse_Success) GetEffects() []*ContractTraceElement {
	if x != nil {
		return x.Effects
	}
	return nil
}

type ElectionInfo_Baker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the baker.
	Baker *BakerId `protobuf:"bytes,1,opt,name=baker,proto3" json:"baker,omitempty"`
	// The account address of the baker.
	Account *AccountAddress `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// The lottery power of the baker, rounded to the nearest representable "double".
	LotteryPower float64 `protobuf:"fixed64,3,opt,name=lottery_power,json=lotteryPower,proto3" json:"lottery_power,omitempty"`
}

func (x *ElectionInfo_Baker) Reset() {
	*x = ElectionInfo_Baker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionInfo_Baker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionInfo_Baker) ProtoMessage() {}

func (x *ElectionInfo_Baker) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionInfo_Baker.ProtoReflect.Descriptor instead.
func (*ElectionInfo_Baker) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{151, 0}
}

func (x *ElectionInfo_Baker) GetBaker() *BakerId {
	if x != nil {
		return x.Baker
	}
	return nil
}

func (x *ElectionInfo_Baker) GetAccount() *AccountAddress {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *ElectionInfo_Baker) GetLotteryPower() float64 {
	if x != nil {
		return x.LotteryPower
	}
	return 0
}

// A representation of a mapping from an account address to an amount.
type BlockSpecialEvent_AccountAmounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*BlockSpecialEvent_AccountAmounts_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *BlockSpecialEvent_AccountAmounts) Reset() {
	*x = BlockSpecialEvent_AccountAmounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_AccountAmounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_AccountAmounts) ProtoMessage() {}

func (x *BlockSpecialEvent_AccountAmounts) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_AccountAmounts.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_AccountAmounts) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 0}
}

func (x *BlockSpecialEvent_AccountAmounts) GetEntries() []*BlockSpecialEvent_AccountAmounts_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Payment to each baker of a previous epoch, in proportion to the number
// of blocks they contributed.
type BlockSpecialEvent_BakingRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount awarded to each baker.
	BakerRewards *BlockSpecialEvent_AccountAmounts `protobuf:"bytes,1,opt,name=baker_rewards,json=bakerRewards,proto3" json:"baker_rewards,omitempty"`
	// The remaining balance of the baker reward account.
	Remainder *Amount `protobuf:"bytes,2,opt,name=remainder,proto3" json:"remainder,omitempty"`
}

func (x *BlockSpecialEvent_BakingRewards) Reset() {
	*x = BlockSpecialEvent_BakingRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_BakingRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_BakingRewards) ProtoMessage() {}

func (x *BlockSpecialEvent_BakingRewards) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_BakingRewards.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_BakingRewards) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 1}
}

func (x *BlockSpecialEvent_BakingRewards) GetBakerRewards() *BlockSpecialEvent_AccountAmounts {
	if x != nil {
		return x.BakerRewards
	}
	return nil
}

func (x *BlockSpecialEvent_BakingRewards) GetRemainder() *Amount {
	if x != nil {
		return x.Remainder
	}
	return nil
}

// Minting of new CCD.
type BlockSpecialEvent_Mint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount allocated to the banking reward account.
	MintBakingReward *Amount `protobuf:"bytes,1,opt,name=mint_baking_reward,json=mintBakingReward,proto3" json:"mint_baking_reward,omitempty"`
	// The amount allocated to the finalization reward account.
	MintFinalizationReward *Amount `protobuf:"bytes,2,opt,name=mint_finalization_reward,json=mintFinalizationReward,proto3" json:"mint_finalization_reward,omitempty"`
	// The amount allocated as the platform development charge.
	MintPlatformDevelopmentCharge *Amount `protobuf:"bytes,3,opt,name=mint_platform_development_charge,json=mintPlatformDevelopmentCharge,proto3" json:"mint_platform_development_charge,omitempty"`
	// The account to which the platform development charge is paid.
	FoundationAccount *AccountAddress `protobuf:"bytes,4,opt,name=foundation_account,json=foundationAccount,proto3" json:"foundation_account,omitempty"`
}

func (x *BlockSpecialEvent_Mint) Reset() {
	*x = BlockSpecialEvent_Mint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_Mint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_Mint) ProtoMessage() {}

func (x *BlockSpecialEvent_Mint) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_Mint.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_Mint) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 2}
}

func (x *BlockSpecialEvent_Mint) GetMintBakingReward() *Amount {
	if x != nil {
		return x.MintBakingReward
	}
	return nil
}

func (x *BlockSpecialEvent_Mint) GetMintFinalizationReward() *Amount {
	if x != nil {
		return x.MintFinalizationReward
	}
	return nil
}

func (x *BlockSpecialEvent_Mint) GetMintPlatformDevelopmentCharge() *Amount {
	if x != nil {
		return x.MintPlatformDevelopmentCharge
	}
	return nil
}

func (x *BlockSpecialEvent_Mint) GetFoundationAccount() *AccountAddress {
	if x != nil {
		return x.FoundationAccount
	}
	return nil
}

// Payment to each finalizer on inclusion of a finalization record in a block.
type BlockSpecialEvent_FinalizationRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount awarded to each finalizer.
	FinalizationRewards *BlockSpecialEvent_AccountAmounts `protobuf:"bytes,1,opt,name=finalization_rewards,json=finalizationRewards,proto3" json:"finalization_rewards,omitempty"`
	// The remaining balance of the finalization reward account.
	Remainder *Amount `protobuf:"bytes,2,opt,name=remainder,proto3" json:"remainder,omitempty"`
}

func (x *BlockSpecialEvent_FinalizationRewards) Reset() {
	*x = BlockSpecialEvent_FinalizationRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_FinalizationRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_FinalizationRewards) ProtoMessage() {}

func (x *BlockSpecialEvent_FinalizationRewards) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_FinalizationRewards.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_FinalizationRewards) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 3}
}

func (x *BlockSpecialEvent_FinalizationRewards) GetFinalizationRewards() *BlockSpecialEvent_AccountAmounts {
	if x != nil {
		return x.FinalizationRewards
	}
	return nil
}

func (x *BlockSpecialEvent_FinalizationRewards) GetRemainder() *Amount {
	if x != nil {
		return x.Remainder
	}
	return nil
}

// Disbursement of fees from a block between the GAS account,
// the baker, and the foundation. It should always be that:
//
// ```transaction_fees + old_gas_account = new_gas_account + baker_reward + foundation_charge```
type BlockSpecialEvent_BlockReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total fees paid for transactions in the block.
	TransactionFees *Amount `protobuf:"bytes,1,opt,name=transaction_fees,json=transactionFees,proto3" json:"transaction_fees,omitempty"`
	// The old balance of the GAS account.
	OldGasAccount *Amount `protobuf:"bytes,2,opt,name=old_gas_account,json=oldGasAccount,proto3" json:"old_gas_account,omitempty"`
	// The new balance of the GAS account.
	NewGasAccount *Amount `protobuf:"bytes,3,opt,name=new_gas_account,json=newGasAccount,proto3" json:"new_gas_account,omitempty"`
	// The amount awarded to the baker.
	BakerReward *Amount `protobuf:"bytes,4,opt,name=baker_reward,json=bakerReward,proto3" json:"baker_reward,omitempty"`
	// The amount awarded to the foundation.
	FoundationCharge *Amount `protobuf:"bytes,5,opt,name=foundation_charge,json=foundationCharge,proto3" json:"foundation_charge,omitempty"`
	// The baker of the block, who receives the award.
	Baker *AccountAddress `protobuf:"bytes,6,opt,name=baker,proto3" json:"baker,omitempty"`
	// The foundation account.
	FoundationAccount *AccountAddress `protobuf:"bytes,7,opt,name=foundation_account,json=foundationAccount,proto3" json:"foundation_account,omitempty"`
}

func (x *BlockSpecialEvent_BlockReward) Reset() {
	*x = BlockSpecialEvent_BlockReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_BlockReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_BlockReward) ProtoMessage() {}

func (x *BlockSpecialEvent_BlockReward) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_BlockReward.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_BlockReward) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 4}
}

func (x *BlockSpecialEvent_BlockReward) GetTransactionFees() *Amount {
	if x != nil {
		return x.TransactionFees
	}
	return nil
}

func (x *BlockSpecialEvent_BlockReward) GetOldGasAccount() *Amount {
	if x != nil {
		return x.OldGasAccount
	}
	return nil
}

func (x *BlockSpecialEvent_BlockReward) GetNewGasAccount() *Amount {
	if x != nil {
		return x.NewGasAccount
	}
	return nil
}

func (x *BlockSpecialEvent_BlockReward) GetBakerReward() *Amount {
	if x != nil {
		return x.BakerReward
	}
	return nil
}

func (x *BlockSpecialEvent_BlockReward) GetFoundationCharge() *Amount {
	if x != nil {
		return x.FoundationCharge
	}
	return nil
}

func (x *BlockSpecialEvent_BlockReward) GetBaker() *AccountAddress {
	if x != nil {
		return x.Baker
	}
	return nil
}

func (x *BlockSpecialEvent_BlockReward) GetFoundationAccount() *AccountAddress {
	if x != nil {
		return x.FoundationAccount
	}
	return nil
}

// Foundation tax.
type BlockSpecialEvent_PaydayFoundationReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account that got rewarded.
	FoundationAccount *AccountAddress `protobuf:"bytes,1,opt,name=foundation_account,json=foundationAccount,proto3" json:"foundation_account,omitempty"`
	// The transaction fee reward at payday to the account.
	DevelopmentCharge *Amount `protobuf:"bytes,2,opt,name=development_charge,json=developmentCharge,proto3" json:"development_charge,omitempty"`
}

func (x *BlockSpecialEvent_PaydayFoundationReward) Reset() {
	*x = BlockSpecialEvent_PaydayFoundationReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_PaydayFoundationReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_PaydayFoundationReward) ProtoMessage() {}

func (x *BlockSpecialEvent_PaydayFoundationReward) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_PaydayFoundationReward.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_PaydayFoundationReward) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 5}
}

func (x *BlockSpecialEvent_PaydayFoundationReward) GetFoundationAccount() *AccountAddress {
	if x != nil {
		return x.FoundationAccount
	}
	return nil
}

func (x *BlockSpecialEvent_PaydayFoundationReward) GetDevelopmentCharge() *Amount {
	if x != nil {
		return x.DevelopmentCharge
	}
	return nil
}

// Reward payment to the given account.
type BlockSpecialEvent_PaydayAccountReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account that got rewarded.
	Account *AccountAddress `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The transaction fee reward at payday to the account.
	TransactionFees *Amount `protobuf:"bytes,2,opt,name=transaction_fees,json=transactionFees,proto3" json:"transaction_fees,omitempty"`
	// The baking reward at payday to the account.
	BakerReward *Amount `protobuf:"bytes,3,opt,name=baker_reward,json=bakerReward,proto3" json:"baker_reward,omitempty"`
	// The finalization reward at payday to the account.
	FinalizationReward *Amount `protobuf:"bytes,4,opt,name=finalization_reward,json=finalizationReward,proto3" json:"finalization_reward,omitempty"`
}

func (x *BlockSpecialEvent_PaydayAccountReward) Reset() {
	*x = BlockSpecialEvent_PaydayAccountReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_PaydayAccountReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_PaydayAccountReward) ProtoMessage() {}

func (x *BlockSpecialEvent_PaydayAccountReward) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_PaydayAccountReward.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_PaydayAccountReward) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 6}
}

func (x *BlockSpecialEvent_PaydayAccountReward) GetAccount() *AccountAddress {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *BlockSpecialEvent_PaydayAccountReward) GetTransactionFees() *Amount {
	if x != nil {
		return x.TransactionFees
	}
	return nil
}

func (x *BlockSpecialEvent_PaydayAccountReward) GetBakerReward() *Amount {
	if x != nil {
		return x.BakerReward
	}
	return nil
}

func (x *BlockSpecialEvent_PaydayAccountReward) GetFinalizationReward() *Amount {
	if x != nil {
		return x.FinalizationReward
	}
	return nil
}

// Amounts accrued to accounts for each baked block.
type BlockSpecialEvent_BlockAccrueReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total fees paid for transactions in the block.
	TransactionFees *Amount `protobuf:"bytes,1,opt,name=transaction_fees,json=transactionFees,proto3" json:"transaction_fees,omitempty"`
	// The old balance of the GAS account.
	OldGasAccount *Amount `protobuf:"bytes,2,opt,name=old_gas_account,json=oldGasAccount,proto3" json:"old_gas_account,omitempty"`
	// The new balance of the GAS account.
	NewGasAccount *Amount `protobuf:"bytes,3,opt,name=new_gas_account,json=newGasAccount,proto3" json:"new_gas_account,omitempty"`
	// The amount awarded to the baker.
	BakerReward *Amount `protobuf:"bytes,4,opt,name=baker_reward,json=bakerReward,proto3" json:"baker_reward,omitempty"`
	// The amount awarded to the passive delegators.
	PassiveReward *Amount `protobuf:"bytes,5,opt,name=passive_reward,json=passiveReward,proto3" json:"passive_reward,omitempty"`
	// The amount awarded to the foundation.
	FoundationCharge *Amount `protobuf:"bytes,6,opt,name=foundation_charge,json=foundationCharge,proto3" json:"foundation_charge,omitempty"`
	// The baker of the block, who will receive the award.
	Baker *BakerId `protobuf:"bytes,7,opt,name=baker,proto3" json:"baker,omitempty"`
}

func (x *BlockSpecialEvent_BlockAccrueReward) Reset() {
	*x = BlockSpecialEvent_BlockAccrueReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_BlockAccrueReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_BlockAccrueReward) ProtoMessage() {}

func (x *BlockSpecialEvent_BlockAccrueReward) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_BlockAccrueReward.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_BlockAccrueReward) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 7}
}

func (x *BlockSpecialEvent_BlockAccrueReward) GetTransactionFees() *Amount {
	if x != nil {
		return x.TransactionFees
	}
	return nil
}

func (x *BlockSpecialEvent_BlockAccrueReward) GetOldGasAccount() *Amount {
	if x != nil {
		return x.OldGasAccount
	}
	return nil
}

func (x *BlockSpecialEvent_BlockAccrueReward) GetNewGasAccount() *Amount {
	if x != nil {
		return x.NewGasAccount
	}
	return nil
}

func (x *BlockSpecialEvent_BlockAccrueReward) GetBakerReward() *Amount {
	if x != nil {
		return x.BakerReward
	}
	return nil
}

func (x *BlockSpecialEvent_BlockAccrueReward) GetPassiveReward() *Amount {
	if x != nil {
		return x.PassiveReward
	}
	return nil
}

func (x *BlockSpecialEvent_BlockAccrueReward) GetFoundationCharge() *Amount {
	if x != nil {
		return x.FoundationCharge
	}
	return nil
}

func (x *BlockSpecialEvent_BlockAccrueReward) GetBaker() *BakerId {
	if x != nil {
		return x.Baker
	}
	return nil
}

// Payment distributed to a pool or passive delegators.
type BlockSpecialEvent_PaydayPoolReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pool owner (passive delegators when not present).
	PoolOwner *BakerId `protobuf:"bytes,1,opt,name=pool_owner,json=poolOwner,proto3,oneof" json:"pool_owner,omitempty"`
	// Accrued transaction fees for pool.
	TransactionFees *Amount `protobuf:"bytes,2,opt,name=transaction_fees,json=transactionFees,proto3" json:"transaction_fees,omitempty"`
	// Accrued baking rewards for pool.
	BakerReward *Amount `protobuf:"bytes,3,opt,name=baker_reward,json=bakerReward,proto3" json:"baker_reward,omitempty"`
	// Accrued finalization rewards for pool.
	FinalizationReward *Amount `protobuf:"bytes,4,opt,name=finalization_reward,json=finalizationReward,proto3" json:"finalization_reward,omitempty"`
}

func (x *BlockSpecialEvent_PaydayPoolReward) Reset() {
	*x = BlockSpecialEvent_PaydayPoolReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_PaydayPoolReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_PaydayPoolReward) ProtoMessage() {}

func (x *BlockSpecialEvent_PaydayPoolReward) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_PaydayPoolReward.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_PaydayPoolReward) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 8}
}

func (x *BlockSpecialEvent_PaydayPoolReward) GetPoolOwner() *BakerId {
	if x != nil {
		return x.PoolOwner
	}
	return nil
}

func (x *BlockSpecialEvent_PaydayPoolReward) GetTransactionFees() *Amount {
	if x != nil {
		return x.TransactionFees
	}
	return nil
}

func (x *BlockSpecialEvent_PaydayPoolReward) GetBakerReward() *Amount {
	if x != nil {
		return x.BakerReward
	}
	return nil
}

func (x *BlockSpecialEvent_PaydayPoolReward) GetFinalizationReward() *Amount {
	if x != nil {
		return x.FinalizationReward
	}
	return nil
}

// The entry for the map.
type BlockSpecialEvent_AccountAmounts_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key type
	Account *AccountAddress `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The value type
	Amount *Amount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BlockSpecialEvent_AccountAmounts_Entry) Reset() {
	*x = BlockSpecialEvent_AccountAmounts_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSpecialEvent_AccountAmounts_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSpecialEvent_AccountAmounts_Entry) ProtoMessage() {}

func (x *BlockSpecialEvent_AccountAmounts_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSpecialEvent_AccountAmounts_Entry.ProtoReflect.Descriptor instead.
func (*BlockSpecialEvent_AccountAmounts_Entry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{152, 0, 0}
}

func (x *BlockSpecialEvent_AccountAmounts_Entry) GetAccount() *AccountAddress {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *BlockSpecialEvent_AccountAmounts_Entry) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// A peer that the node is connected to.
type PeersInfo_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the peer that it
	// wishes to be identified by.
	PeerId *PeerId `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// The port of the peer.
	SocketAddress *IpSocketAddress `protobuf:"bytes,2,opt,name=socket_address,json=socketAddress,proto3" json:"socket_address,omitempty"`
	// Network related statistics for the peer.
	NetworkStats *PeersInfo_Peer_NetworkStats `protobuf:"bytes,3,opt,name=network_stats,json=networkStats,proto3" json:"network_stats,omitempty"`
	// consensus related information of the peer.
	//
	// Types that are assignable to ConsensusInfo:
	//	*PeersInfo_Peer_Bootstrapper
	//	*PeersInfo_Peer_NodeCatchupStatus
	ConsensusInfo isPeersInfo_Peer_ConsensusInfo `protobuf_oneof:"consensus_info"`
}

func (x *PeersInfo_Peer) Reset() {
	*x = PeersInfo_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersInfo_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersInfo_Peer) ProtoMessage() {}

func (x *PeersInfo_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersInfo_Peer.ProtoReflect.Descriptor instead.
func (*PeersInfo_Peer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{163, 0}
}

func (x *PeersInfo_Peer) GetPeerId() *PeerId {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *PeersInfo_Peer) GetSocketAddress() *IpSocketAddress {
	if x != nil {
		return x.SocketAddress
	}
	return nil
}

func (x *PeersInfo_Peer) GetNetworkStats() *PeersInfo_Peer_NetworkStats {
	if x != nil {
		return x.NetworkStats
	}
	return nil
}

func (m *PeersInfo_Peer) GetConsensusInfo() isPeersInfo_Peer_ConsensusInfo {
	if m != nil {
		return m.ConsensusInfo
	}
	return nil
}

func (x *PeersInfo_Peer) GetBootstrapper() *Empty {
	if x, ok := x.GetConsensusInfo().(*PeersInfo_Peer_Bootstrapper); ok {
		return x.Bootstrapper
	}
	return nil
}

func (x *PeersInfo_Peer) GetNodeCatchupStatus() PeersInfo_Peer_CatchupStatus {
	if x, ok := x.GetConsensusInfo().(*PeersInfo_Peer_NodeCatchupStatus); ok {
		return x.NodeCatchupStatus
	}
	return PeersInfo_Peer_UPTODATE
}

type isPeersInfo_Peer_ConsensusInfo interface {
	isPeersInfo_Peer_ConsensusInfo()
}

type PeersInfo_Peer_Bootstrapper struct {
	// The peer is of type `Bootstrapper` is not participating in consensus
	// and thus has no catchup status.
	Bootstrapper *Empty `protobuf:"bytes,4,opt,name=bootstrapper,proto3,oneof"`
}

type PeersInfo_Peer_NodeCatchupStatus struct {
	// The peer is a regular node and have
	// an associated catchup status.
	NodeCatchupStatus PeersInfo_Peer_CatchupStatus `protobuf:"varint,5,opt,name=node_catchup_status,json=nodeCatchupStatus,proto3,enum=concordium.v2.PeersInfo_Peer_CatchupStatus,oneof"`
}

func (*PeersInfo_Peer_Bootstrapper) isPeersInfo_Peer_ConsensusInfo() {}

func (*PeersInfo_Peer_NodeCatchupStatus) isPeersInfo_Peer_ConsensusInfo() {}

// Network statistics for the peer
type PeersInfo_Peer_NetworkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of messages sent to the peer.
	// Packets are blocks, transactions, catchup messages, finalization records
	// and network messages such as pings and peer requests.
	PacketsSent uint64 `protobuf:"varint,2,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	// The number of messages received from the peer.
	// Packets are blocks, transactions, catchup messages, finalization records
	// and network messages such as pings and peer requests.
	PacketsReceived uint64 `protobuf:"varint,3,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	// The connection latency (i.e., ping time) in milliseconds.
	Latency uint64 `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty"`
}

func (x *PeersInfo_Peer_NetworkStats) Reset() {
	*x = PeersInfo_Peer_NetworkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersInfo_Peer_NetworkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersInfo_Peer_NetworkStats) ProtoMessage() {}

func (x *PeersInfo_Peer_NetworkStats) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersInfo_Peer_NetworkStats.ProtoReflect.Descriptor instead.
func (*PeersInfo_Peer_NetworkStats) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{163, 0, 0}
}

func (x *PeersInfo_Peer_NetworkStats) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *PeersInfo_Peer_NetworkStats) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *PeersInfo_Peer_NetworkStats) GetLatency() uint64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

// Network related information of the node.
type NodeInfo_NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node id.
	NodeId *PeerId `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Total number of packets sent by the node.
	PeerTotalSent uint64 `protobuf:"varint,2,opt,name=peer_total_sent,json=peerTotalSent,proto3" json:"peer_total_sent,omitempty"`
	// Total number of packets received by the node.
	PeerTotalReceived uint64 `protobuf:"varint,3,opt,name=peer_total_received,json=peerTotalReceived,proto3" json:"peer_total_received,omitempty"`
	// Average outbound throughput in bytes per second.
	AvgBpsIn uint64 `protobuf:"varint,4,opt,name=avg_bps_in,json=avgBpsIn,proto3" json:"avg_bps_in,omitempty"`
	// Average inbound throughput in bytes per second.
	AvgBpsOut uint64 `protobuf:"varint,5,opt,name=avg_bps_out,json=avgBpsOut,proto3" json:"avg_bps_out,omitempty"`
}

func (x *NodeInfo_NetworkInfo) Reset() {
	*x = NodeInfo_NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo_NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo_NetworkInfo) ProtoMessage() {}

func (x *NodeInfo_NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo_NetworkInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo_NetworkInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{164, 0}
}

func (x *NodeInfo_NetworkInfo) GetNodeId() *PeerId {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *NodeInfo_NetworkInfo) GetPeerTotalSent() uint64 {
	if x != nil {
		return x.PeerTotalSent
	}
	return 0
}

func (x *NodeInfo_NetworkInfo) GetPeerTotalReceived() uint64 {
	if x != nil {
		return x.PeerTotalReceived
	}
	return 0
}

func (x *NodeInfo_NetworkInfo) GetAvgBpsIn() uint64 {
	if x != nil {
		return x.AvgBpsIn
	}
	return 0
}

func (x *NodeInfo_NetworkInfo) GetAvgBpsOut() uint64 {
	if x != nil {
		return x.AvgBpsOut
	}
	return 0
}

// Consensus info for a node configured with baker keys.
type NodeInfo_BakerConsensusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BakerId *BakerId `protobuf:"bytes,1,opt,name=baker_id,json=bakerId,proto3" json:"baker_id,omitempty"`
	// Status of the baker configured node.
	//
	// Types that are assignable to Status:
	//	*NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo_
	//	*NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo_
	//	*NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo_
	Status isNodeInfo_BakerConsensusInfo_Status `protobuf_oneof:"status"`
}

func (x *NodeInfo_BakerConsensusInfo) Reset() {
	*x = NodeInfo_BakerConsensusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo_BakerConsensusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo_BakerConsensusInfo) ProtoMessage() {}

func (x *NodeInfo_BakerConsensusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo_BakerConsensusInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo_BakerConsensusInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{164, 1}
}

func (x *NodeInfo_BakerConsensusInfo) GetBakerId() *BakerId {
	if x != nil {
		return x.BakerId
	}
	return nil
}

func (m *NodeInfo_BakerConsensusInfo) GetStatus() isNodeInfo_BakerConsensusInfo_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *NodeInfo_BakerConsensusInfo) GetPassiveCommitteeInfo() NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo {
	if x, ok := x.GetStatus().(*NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo_); ok {
		return x.PassiveCommitteeInfo
	}
	return NodeInfo_BakerConsensusInfo_NOT_IN_COMMITTEE
}

func (x *NodeInfo_BakerConsensusInfo) GetActiveBakerCommitteeInfo() *NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo {
	if x, ok := x.GetStatus().(*NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo_); ok {
		return x.ActiveBakerCommitteeInfo
	}
	return nil
}

func (x *NodeInfo_BakerConsensusInfo) GetActiveFinalizerCommitteeInfo() *NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo {
	if x, ok := x.GetStatus().(*NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo_); ok {
		return x.ActiveFinalizerCommitteeInfo
	}
	return nil
}

type isNodeInfo_BakerConsensusInfo_Status interface {
	isNodeInfo_BakerConsensusInfo_Status()
}

type NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo_ struct {
	// The node is currently not baking.
	PassiveCommitteeInfo NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo `protobuf:"varint,2,opt,name=passive_committee_info,json=passiveCommitteeInfo,proto3,enum=concordium.v2.NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo,oneof"`
}

type NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo_ struct {
	// The node is configured with baker keys and
	// is member of the baking committee.
	ActiveBakerCommitteeInfo *NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo `protobuf:"bytes,3,opt,name=active_baker_committee_info,json=activeBakerCommitteeInfo,proto3,oneof"`
}

type NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo_ struct {
	// The node is configured with baker keys and
	// is member of the baking and finalization committees.
	ActiveFinalizerCommitteeInfo *NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo `protobuf:"bytes,4,opt,name=active_finalizer_committee_info,json=activeFinalizerCommitteeInfo,proto3,oneof"`
}

func (*NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo_) isNodeInfo_BakerConsensusInfo_Status() {}

func (*NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo_) isNodeInfo_BakerConsensusInfo_Status() {
}

func (*NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo_) isNodeInfo_BakerConsensusInfo_Status() {
}

// The node is a regular node.
type NodeInfo_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConsensusStatus:
	//	*NodeInfo_Node_NotRunning
	//	*NodeInfo_Node_Passive
	//	*NodeInfo_Node_Active
	ConsensusStatus isNodeInfo_Node_ConsensusStatus `protobuf_oneof:"consensus_status"`
}

func (x *NodeInfo_Node) Reset() {
	*x = NodeInfo_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo_Node) ProtoMessage() {}

func (x *NodeInfo_Node) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo_Node.ProtoReflect.Descriptor instead.
func (*NodeInfo_Node) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{164, 2}
}

func (m *NodeInfo_Node) GetConsensusStatus() isNodeInfo_Node_ConsensusStatus {
	if m != nil {
		return m.ConsensusStatus
	}
	return nil
}

func (x *NodeInfo_Node) GetNotRunning() *Empty {
	if x, ok := x.GetConsensusStatus().(*NodeInfo_Node_NotRunning); ok {
		return x.NotRunning
	}
	return nil
}

func (x *NodeInfo_Node) GetPassive() *Empty {
	if x, ok := x.GetConsensusStatus().(*NodeInfo_Node_Passive); ok {
		return x.Passive
	}
	return nil
}

func (x *NodeInfo_Node) GetActive() *NodeInfo_BakerConsensusInfo {
	if x, ok := x.GetConsensusStatus().(*NodeInfo_Node_Active); ok {
		return x.Active
	}
	return nil
}

type isNodeInfo_Node_ConsensusStatus interface {
	isNodeInfo_Node_ConsensusStatus()
}

type NodeInfo_Node_NotRunning struct {
	// The node is not running consensus.
	// This is the case only when the node is
	// not supporting the protocol on the chain.
	// The node does not process blocks.
	NotRunning *Empty `protobuf:"bytes,1,opt,name=not_running,json=notRunning,proto3,oneof"`
}

type NodeInfo_Node_Passive struct {
	// Consensus info for a node that is
	// not configured with baker keys.
	// The node is only processing blocks and
	// relaying blocks and transactions and responding to
	// catchup messages.
	Passive *Empty `protobuf:"bytes,2,opt,name=passive,proto3,oneof"`
}

type NodeInfo_Node_Active struct {
	// The node is configured with baker credentials and consensus is running.
	Active *NodeInfo_BakerConsensusInfo `protobuf:"bytes,3,opt,name=active,proto3,oneof"`
}

func (*NodeInfo_Node_NotRunning) isNodeInfo_Node_ConsensusStatus() {}

func (*NodeInfo_Node_Passive) isNodeInfo_Node_ConsensusStatus() {}

func (*NodeInfo_Node_Active) isNodeInfo_Node_ConsensusStatus() {}

// Tagging message type for a node that
// is configured with baker keys and active in
// the current baking committee
type NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo) Reset() {
	*x = NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo) ProtoMessage() {}

func (x *NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{164, 1, 0}
}

// Tagging message type for a node that
// is configured with baker keys and active in
// the current finalizer committee (and also baking committee).
type NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo) Reset() {
	*x = NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo) ProtoMessage() {}

func (x *NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{164, 1, 1}
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x41, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x42, 0x61,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x21, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45,
	0x0a, 0x02, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x30, 0x48,
	0x00, 0x52, 0x02, 0x76, 0x30, 0x12, 0x45, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x1a, 0x26, 0x0a, 0x0e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x30, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x07, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x73, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a,
	0x73, 0x65, 0x6c, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x50, 0x0a, 0x11, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x22, 0x7e, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61,
	0x6b, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x2e, 0x0a,
	0x16, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a,
	0x17, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31,
	0x0a, 0x19, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa8, 0x02, 0x0a, 0x09, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52,
	0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x0d,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x95, 0x02, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x1a, 0x7d, 0x0a, 0x06, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x6f, 0x75,
	0x73, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x54, 0x68, 0x6f, 0x75, 0x73,
	0x61, 0x6e, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x9c, 0x06,
	0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x1a, 0xd7, 0x02, 0x0a, 0x05, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0e,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x61, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x08,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x8d, 0x02, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x0e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x1e, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x25, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a,
	0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x4b, 0x65, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x58, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x30, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xfc, 0x01,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x59, 0x65, 0x61,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x33, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x07, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x02, 0x0a,
	0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x06, 0x63, 0x72, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x3f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x75, 0x62, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x43, 0x72, 0x65, 0x64, 0x50, 0x75, 0x62, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x22, 0x23, 0x0a, 0x0b, 0x41, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc5, 0x03, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x70, 0x72, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x70, 0x72,
	0x66, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x19, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x15, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x1a, 0x58, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xaa, 0x04, 0x0a, 0x16, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x04, 0x69, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0b, 0x61, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x55, 0x0a, 0x0b, 0x41, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xad, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x06, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0xdf, 0x05, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x46, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4c,
	0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x5a, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x22, 0x86, 0x04, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x62, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x48, 0x00, 0x52, 0x05, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x1a, 0xa2, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x16, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x42, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x1a, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x11, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x7e, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x68, 0x0a, 0x10, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x37, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x22, 0x43, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8d, 0x01,
	0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xcd, 0x05,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x0a, 0x02, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x30, 0x48, 0x00, 0x52, 0x02, 0x76, 0x30,
	0x12, 0x30, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02,
	0x76, 0x31, 0x1a, 0xc0, 0x02, 0x0a, 0x02, 0x56, 0x30, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x30, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x33, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x8a, 0x02, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x33, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a,
	0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x49,
	0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a,
	0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x27, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x56, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x0f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x1a, 0x4f, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x8d, 0x01, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22,
	0x1e, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x1c, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x01,
	0x0a, 0x19, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x22, 0x20, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa7, 0x2c, 0x0a, 0x0c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x77, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x57, 0x66, 0x12,
	0x57, 0x0a, 0x1a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x17, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x69, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x68, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x54, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x16,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x15, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12,
	0x3b, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x40, 0x0a, 0x0f,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x5f, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x5f, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x41, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x66, 0x0a, 0x24, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x6d, 0x0a, 0x28, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x23, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72,
	0x42, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x11, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x66, 0x0a, 0x19, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6b, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x17, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x53, 0x0a, 0x1a, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x17,
	0x6e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x18, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x69, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x14, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x68, 0x0a, 0x25, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x21, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6c, 0x0a, 0x27, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x23,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x5e, 0x0a, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x64, 0x0a, 0x1e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x6c,
	0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x23, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x6e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x49, 0x0a, 0x14, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x7a, 0x65, 0x72, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x17, 0x6e, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x15, 0x6e, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x1f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x17, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x15, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x47, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x49, 0x64, 0x73, 0x48, 0x00, 0x52, 0x10, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x6e, 0x6f, 0x6e,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x49, 0x64, 0x73, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x4e,
	0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x5a,
	0x0a, 0x1e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x64, 0x4e, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x5f, 0x0a, 0x20, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1d, 0x6e, 0x6f,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x20, 0x6e,
	0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1c, 0x6e,
	0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x1f, 0x6e,
	0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1b, 0x6e, 0x6f,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x1c, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x73, 0x0a, 0x2b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x26, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x25, 0x62, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x20,
	0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x6b, 0x0a, 0x27, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x22, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a,
	0x13, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x11, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x29, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x25, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x61, 0x0a, 0x21, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1d, 0x69, 0x6e,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x6e, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x41, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x1d, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x5f, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x41, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x25, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x20,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x5e, 0x0a, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x1c, 0x70, 0x6f, 0x6f, 0x6c, 0x57, 0x6f, 0x75, 0x6c, 0x64, 0x42, 0x65, 0x63,
	0x6f, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x6f, 0x6f, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x1a, 0x82, 0x01, 0x0a, 0x11, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x37, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x8e,
	0x01, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x71, 0x0a, 0x0e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x33, 0x0a, 0x0c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xf8, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x1a, 0x4d, 0x0a, 0x10, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x1a, 0x4f, 0x0a, 0x12, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xf3, 0x02, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x14, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd0, 0x07, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x1a, 0xaf, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x7d, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x08, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x02, 0x74, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xdc,
	0x02, 0x0a, 0x0e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x08, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x48, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x1c, 0x0a,
	0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x15,
	0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x07, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x1b, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x54, 0x6f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x10, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5, 0x13, 0x0a, 0x0a, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0a, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3d, 0x0a,
	0x0d, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x15,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x62, 0x61,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x63, 0x0a, 0x15, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x13, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x1e, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x15, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x64, 0x0a, 0x16, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x8c, 0x01, 0x0a,
	0x24, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x22,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x42, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x98, 0x01, 0x0a, 0x28, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x24, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0xa2, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x7c, 0x0a, 0x13, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x1a, 0x7c, 0x0a, 0x13, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x07, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x1a, 0x7b, 0x0a, 0x1b, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x83, 0x01,
	0x0a, 0x12, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x5a, 0x0a, 0x13, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a,
	0xb2, 0x01, 0x0a, 0x20, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xac, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x42, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x07, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x18, 0x62, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x62, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0xbe, 0x01, 0x0a, 0x24, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x63, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8d, 0x0a, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a,
	0x1a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12,
	0x84, 0x01, 0x0a, 0x1f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x1d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x47, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x1a, 0x8d, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x1a, 0x8d, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x1a, 0x88, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0xac, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xe8, 0x1a, 0x0a, 0x19, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x48,
	0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x12, 0x5c, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12,
	0x75, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0b, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61,
	0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x6b, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x13, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x11, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x1e, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x87, 0x01, 0x0a, 0x1c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1a,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x18, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x7e, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x15, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x4b, 0x65, 0x79, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x10, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x15,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x1a, 0xad, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0x55, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x1a, 0xb2, 0x01, 0x0a, 0x0f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x1a, 0x61,
	0x0a, 0x11, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0xd7, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x1a, 0x8a, 0x01, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xbe, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x1a, 0xf8, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x49, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x0a, 0x6e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x44,
	0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x44, 0x0a, 0x0f, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x4e, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x22, 0x49, 0x0a, 0x12, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd1, 0x01, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0xec, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x31, 0x12, 0x4f, 0x0a, 0x12, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x10,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x3a, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x05,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x27, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xae,
	0x01, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x4d, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22,
	0xc8, 0x08, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x30, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x75, 0x72, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x45, 0x75, 0x72, 0x6f, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x5e,
	0x0a, 0x1c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x5f, 0x43, 0x43, 0x44, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x18, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x43, 0x43, 0x44, 0x50, 0x65, 0x72, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x60,
	0x0a, 0x1c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x5e, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x19, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x73, 0x0a, 0x26, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x23, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47,
	0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x13, 0x61, 0x64, 0x64, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x13, 0x61, 0x64, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xd9, 0x01, 0x0a, 0x10, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x12,
	0x2f, 0x0a, 0x02, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x30, 0x52, 0x02, 0x76, 0x30,
	0x12, 0x4d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x45, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x02,
	0x0a, 0x06, 0x41, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x41, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a, 0x22, 0x0a, 0x0a, 0x41, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x41, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x22, 0x0a, 0x0a, 0x49, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x06, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x49, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49,
	0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x64, 0x69, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x70, 0x43, 0x64, 0x69, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x64, 0x69, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x1a, 0x23, 0x0a, 0x0b, 0x49, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x26, 0x0a, 0x0e, 0x49, 0x70, 0x43, 0x64, 0x69, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27,
	0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x61, 0x78,
	0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xf7, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x4f, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x06, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x4c, 0x65,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1d, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x4d, 0x69, 0x6e,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x73,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x73,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0xb7, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xde, 0x04, 0x0a, 0x12, 0x50, 0x6f, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x12, 0x65,
	0x0a, 0x1f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x19, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x42, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x63, 0x0a, 0x1e, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x12, 0x40, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x12,
	0x53, 0x0a, 0x14, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69,
	0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x64, 0x61, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76, 0x31, 0x12, 0x42,
	0x0a, 0x0d, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a,
	0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x78, 0x69, 0x6c,
	0x69, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x4d, 0x69, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76,
	0x30, 0x12, 0x3b, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x42,
	0x0a, 0x0d, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x0a, 0x47, 0x61, 0x73, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x48, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0e, 0x47, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x43, 0x70, 0x76, 0x32, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x60, 0x0a, 0x13, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x49, 0x0a, 0x15, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x0a, 0x52,
	0x6f, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65,
	0x79, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4b, 0x65, 0x79, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x32, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x30,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x30, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x4b, 0x65, 0x79, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x30, 0x12, 0x55, 0x0a,
	0x16, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4b, 0x65, 0x79, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x0c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x73, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x30, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x30, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x4b, 0x65, 0x79, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x30, 0x12, 0x55, 0x0a, 0x16,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x48, 0x00, 0x52,
	0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4b, 0x65, 0x79, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xa4, 0x10, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x61,
	0x0a, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x48, 0x00, 0x52, 0x18, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x52, 0x0a, 0x16, 0x65, 0x75, 0x72, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x65, 0x75, 0x72, 0x6f, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x19, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x63,
	0x63, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x43, 0x63,
	0x64, 0x50, 0x65, 0x72, 0x45, 0x75, 0x72, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5b,
	0x0a, 0x19, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x17, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70,
	0x76, 0x30, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x23,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x67, 0x61, 0x73, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x67, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x19, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x6f, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x31, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a,
	0x1c, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x61, 0x64,
	0x64, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x61, 0x64, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x6f, 0x0a, 0x20, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x31, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70,
	0x76, 0x31, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x63, 0x0a, 0x1c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x31, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x48, 0x00, 0x52, 0x18, 0x70,
	0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76,
	0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x31,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31,
	0x48, 0x00, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x1e,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x31, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76, 0x31, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x69, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76,
	0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x67, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x32, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x61, 0x73, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x43, 0x70, 0x76, 0x32, 0x48, 0x00, 0x52, 0x14, 0x67, 0x61, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x70, 0x76, 0x32, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x5e, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4c, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x52,
	0x0a, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x48, 0x00, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x28, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x25, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0xd9, 0x01,
	0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x36, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x0a, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x5b, 0x0a, 0x13,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x28, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x24, 0x0a, 0x0c, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe4, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0d, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0c, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x4e, 0x0a, 0x11, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x61, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6d, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x6d, 0x73, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x6d, 0x73, 0x64, 0x12, 0x3c, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x15, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x45, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65,
	0x6d, 0x73, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x16, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6d, 0x73, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x61,
	0x73, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6d, 0x61, 0x12, 0x39, 0x0a, 0x19, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x65, 0x6d, 0x73, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x6d, 0x73, 0x64, 0x12, 0x3a, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6d, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6d, 0x73, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x05, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x72, 0x69, 0x76,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6d, 0x73, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6d, 0x61, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x12, 0x3d, 0x0a, 0x1b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6d, 0x73, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6d, 0x73, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x06, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x65, 0x6d, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x15, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6d, 0x73,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6d, 0x73,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x53, 0x0a, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x61,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x61, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x72, 0x61, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x61, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x65, 0x6d, 0x61, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6d, 0x73,
	0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x65, 0x6d, 0x73, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x65, 0x6d, 0x73, 0x64, 0x22, 0x7c, 0x0a, 0x10, 0x41, 0x72, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x16, 0x62, 0x75, 0x6c, 0x6c,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xf5, 0x07, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x3a, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x72, 0x61,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x0e, 0x65, 0x72, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x22, 0x7d,
	0x0a, 0x0f, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2c, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x22, 0x87, 0x03,
	0x0a, 0x11, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0x49, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa8, 0x03, 0x0a, 0x15, 0x50, 0x6f, 0x6f, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x62, 0x61, 0x6b, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42,
	0x61, 0x6b, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x12, 0x4d, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x14, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x62, 0x61, 0x6b, 0x65,
	0x72, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x42,
	0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x22, 0xb5, 0x05, 0x0a, 0x10, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c,
	0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x65,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x11,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x12, 0x49, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x61, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x15, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x65, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x16,
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xbd, 0x03, 0x0a, 0x15, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x26, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x22, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x5e,
	0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x64, 0x61, 0x79,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x4a,
	0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x22, 0xac, 0x03, 0x0a, 0x15, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x41, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x46,
	0x0a, 0x08, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x9c, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x61, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4a, 0x0a, 0x16, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xa2, 0x0a, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x02, 0x76, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x30, 0x48, 0x00, 0x52, 0x02, 0x76, 0x30, 0x12, 0x32, 0x0a, 0x02,
	0x76, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31,
	0x1a, 0xb0, 0x03, 0x0a, 0x02, 0x56, 0x30, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49,
	0x0a, 0x15, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x1b, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x61,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0xe6, 0x05, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x49, 0x0a, 0x15, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x1b,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0a, 0x67, 0x61, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x1e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x1c, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x15,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x22, 0xa6, 0x03, 0x0a, 0x15, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x35, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52,
	0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x72, 0x22, 0xa6, 0x04, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x1a, 0xaf, 0x01, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb9, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x86, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x4d, 0x0a,
	0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x22, 0x74, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x37, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x2f, 0x0a, 0x17, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x03, 0x0a, 0x0c, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x13, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x12, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x4d, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x13, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x11,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x93, 0x01, 0x0a, 0x05, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x83, 0x1a, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a,
	0x0e, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6d,
	0x69, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x51,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x73, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x16,
	0x70, 0x61, 0x79, 0x64, 0x61, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x6a, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x64, 0x61, 0x79,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x13, 0x70,
	0x61, 0x79, 0x64, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x64, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x72,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x72,
	0x75, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x64,
	0x61, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x10, 0x70, 0x61, 0x79, 0x64, 0x61,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a, 0xd2, 0x01, 0x0a, 0x0e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4f,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x6f, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x9a, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x62, 0x61, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0xca, 0x02,
	0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x74, 0x42,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x18, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x5e, 0x0a, 0x20,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x1d, 0x6d,
	0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x12,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xae, 0x01, 0x0a, 0x13, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0xce, 0x03, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x6f,
	0x6c, 0x64, 0x47, 0x61, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0f,
	0x6e, 0x65, 0x77, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x6e, 0x65,
	0x77, 0x47, 0x61, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x12, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xac, 0x01, 0x0a,
	0x16, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x11, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x1a, 0x92, 0x02, 0x0a, 0x13,
	0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x0c, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x1a, 0xbd, 0x03, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x47, 0x61, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x67,
	0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x47, 0x61, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0d, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x42,
	0x0a, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x10, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x1a, 0xa1, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0b, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x46, 0x0a,
	0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xf5, 0x0f,
	0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x45, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x30, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x30, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4b, 0x65,
	0x79, 0x73, 0x43, 0x70, 0x76, 0x30, 0x12, 0x4c, 0x0a, 0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x56, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4b, 0x65, 0x79, 0x73,
	0x43, 0x70, 0x76, 0x31, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x54, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x75, 0x72, 0x6f, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x75, 0x72, 0x6f, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x4a,
	0x0a, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x63, 0x63, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x65, 0x75, 0x72, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x43, 0x63, 0x64, 0x50, 0x65, 0x72, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x4e, 0x0a, 0x12, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x17, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x70, 0x76, 0x5f, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76, 0x30,
	0x48, 0x00, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76, 0x30, 0x12, 0x5c, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x70,
	0x76, 0x5f, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76, 0x31, 0x48, 0x00,
	0x52, 0x14, 0x6d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x70, 0x76, 0x31, 0x12, 0x6d, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x61, 0x73, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x30, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x30, 0x12, 0x56, 0x0a, 0x15,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x70, 0x76, 0x5f, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x48, 0x00,
	0x52, 0x12, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x43, 0x70, 0x76, 0x31, 0x12, 0x4b, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x61, 0x64,
	0x64, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x61, 0x64, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70,
	0x76, 0x31, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x43, 0x70, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x70, 0x76, 0x5f, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x70, 0x76, 0x32,
	0x48, 0x00, 0x52, 0x0e, 0x67, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x70,
	0x76, 0x32, 0x12, 0x51, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x7c, 0x0a,
	0x21, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x1f, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x81, 0x0c, 0x0a, 0x19, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x3e, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x3e, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x13, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x75,
	0x72, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0d, 0x65, 0x75, 0x72, 0x6f, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x4a, 0x0a, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x63, 0x63, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x43, 0x63, 0x64, 0x50, 0x65, 0x72, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x4c, 0x0a,
	0x12, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x67, 0x61,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x51, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x13,
	0x61, 0x64, 0x64, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x13, 0x61, 0x64, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4c,
	0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x69,
	0x0a, 0x21, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1c, 0x0a, 0x04,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x64, 0x0a, 0x0f, 0x49, 0x70,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x02, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x1e, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x45, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3e, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x54,
	0x6f, 0x42, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a,
	0x0b, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x22, 0xf2, 0x04, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x33, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x1a, 0xaf, 0x04, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x5d, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x11,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x76, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3a, 0x0a, 0x0d, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50,
	0x54, 0x4f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e,
	0x47, 0x55, 0x50, 0x10, 0x02, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x0b, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x1a, 0xd3, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x65, 0x65,
	0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x76,
	0x67, 0x5f, 0x62, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x61, 0x76, 0x67, 0x42, 0x70, 0x73, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f,
	0x62, 0x70, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x42, 0x70, 0x73, 0x4f, 0x75, 0x74, 0x1a, 0x8f, 0x05, 0x0a, 0x12, 0x42, 0x61, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x08, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x62, 0x61, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x77, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x84, 0x01, 0x0a, 0x1b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x90, 0x01, 0x0a, 0x1f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x1e, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x6d, 0x0a, 0x14, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x45, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x54, 0x45, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f,
	0x42, 0x55, 0x54, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x02,
	0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x07,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x44,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x13,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51,
	0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x8b, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x21, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x61, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x57,
	0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x52, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x1a, 0x57, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a,
	0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x18,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x13,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x22, 0xac, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22,
	0x8e, 0x04, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a,
	0x0b, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x4b, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x49, 0x0a,
	0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x12,
	0x44, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x9c, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xe3, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a,
	0x57, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x48, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd3, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x70, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x32, 0x0a, 0x1a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x08, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x30, 0x12,
	0x52, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52,
	0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x75, 0x72, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x75, 0x72, 0x6f, 0x50,
	0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x5f, 0x63, 0x63, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x43, 0x63, 0x64, 0x50, 0x65, 0x72, 0x45, 0x75,
	0x72, 0x6f, 0x12, 0x48, 0x0a, 0x15, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x13, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x5d, 0x0a, 0x16,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76, 0x30, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a,
	0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x67, 0x61,
	0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x31, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x48,
	0x69, 0x67, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0a,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x30,
	0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xce, 0x08, 0x0a,
	0x11, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x56, 0x31, 0x12, 0x52, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x75, 0x72, 0x6f, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x75,
	0x72, 0x6f, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x5f, 0x63, 0x63, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x75, 0x72,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x43, 0x63, 0x64, 0x50, 0x65,
	0x72, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x52, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76, 0x31, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x61, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x52, 0x0e, 0x70,
	0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x31, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x31, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xd3, 0x09,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x56, 0x32, 0x12, 0x57, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x31, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0f,
	0x65, 0x75, 0x72, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x65, 0x75, 0x72, 0x6f, 0x50, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x63, 0x63, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x43, 0x63, 0x64, 0x50, 0x65, 0x72, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x56, 0x0a, 0x13, 0x63,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x52,
	0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x5d, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x50,
	0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x76, 0x31, 0x52, 0x10,
	0x6d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6b, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x0b, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x70, 0x76,
	0x32, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4c, 0x0a,
	0x12, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x43, 0x70, 0x76, 0x31, 0x52, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x31, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x52, 0x0a, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x7a, 0x0a, 0x21, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x1f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x02, 0x76, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x56, 0x30, 0x48, 0x00, 0x52, 0x02, 0x76, 0x30, 0x12, 0x32, 0x0a, 0x02, 0x76,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x12,
	0x32, 0x0a, 0x02, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x32, 0x48, 0x00, 0x52,
	0x02, 0x76, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x78, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x22, 0x29, 0x0a, 0x11, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a,
	0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0xd2, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x15, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2a, 0x6a, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4e,
	0x45, 0x57, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x30, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x56, 0x31, 0x10, 0x01, 0x2a, 0x49, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x01, 0x2a, 0xd5, 0x04, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43,
	0x55, 0x4c, 0x54, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x55, 0x52, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x5f, 0x43, 0x43, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x45, 0x55, 0x52, 0x4f, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x27,
	0x0a, 0x23, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x53, 0x10, 0x07, 0x12,
	0x1a, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x44, 0x44, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x56,
	0x4f, 0x4b, 0x45, 0x52, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x0a, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54,
	0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x31, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x0c, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x32,
	0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x53, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53,
	0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x11, 0x12, 0x1d, 0x0a,
	0x19, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x4e,
	0x45, 0x52, 0x47, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x12, 0x12, 0x2c, 0x0a, 0x28,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x13, 0x2a, 0x8e, 0x04, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x44, 0x44, 0x5f, 0x42, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x4b, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f,
	0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x09, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x0c, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x53, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x10, 0x10, 0x12, 0x27,
	0x0a, 0x23, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x41, 0x4b, 0x45, 0x52, 0x10,
	0x13, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x2a, 0xa1, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x33, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x34, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x35, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x36, 0x10, 0x05, 0x42,
	0x48, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x50, 0x01, 0x5a, 0x17, 0x63, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x75, 0x6d, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x12, 0x43, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 278)
var file_types_proto_goTypes = []interface{}{
	(OpenStatus)(0),                   // 0: concordium.v2.OpenStatus
	(ContractVersion)(0),              // 1: concordium.v2.ContractVersion
	(CredentialType)(0),               // 2: concordium.v2.CredentialType
	(UpdateType)(0),                   // 3: concordium.v2.UpdateType
	(TransactionType)(0),              // 4: concordium.v2.TransactionType
	(ProtocolVersion)(0),              // 5: concordium.v2.ProtocolVersion
	(PeersInfo_Peer_CatchupStatus)(0), // 6: concordium.v2.PeersInfo.Peer.CatchupStatus
	(NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo)(0), // 7: concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo
	(*Empty)(nil),                                                // 8: concordium.v2.Empty
	(*BlockHash)(nil),                                            // 9: concordium.v2.BlockHash
	(*Sha256Hash)(nil),                                           // 10: concordium.v2.Sha256Hash
	(*TransactionHash)(nil),                                      // 11: concordium.v2.TransactionHash
	(*StateHash)(nil),                                            // 12: concordium.v2.StateHash
	(*AbsoluteBlockHeight)(nil),                                  // 13: concordium.v2.AbsoluteBlockHeight
	(*BlockHeight)(nil),                                          // 14: concordium.v2.BlockHeight
	(*BakerId)(nil),                                              // 15: concordium.v2.BakerId
	(*AccountIndex)(nil),                                         // 16: concordium.v2.AccountIndex
	(*ModuleRef)(nil),                                            // 17: concordium.v2.ModuleRef
	(*VersionedModuleSource)(nil),                                // 18: concordium.v2.VersionedModuleSource
	(*Timestamp)(nil),                                            // 19: concordium.v2.Timestamp
	(*Release)(nil),                                              // 20: concordium.v2.Release
	(*NewRelease)(nil),                                           // 21: concordium.v2.NewRelease
	(*ReleaseSchedule)(nil),                                      // 22: concordium.v2.ReleaseSchedule
	(*EncryptedAmount)(nil),                                      // 23: concordium.v2.EncryptedAmount
	(*EncryptedBalance)(nil),                                     // 24: concordium.v2.EncryptedBalance
	(*DelegationTarget)(nil),                                     // 25: concordium.v2.DelegationTarget
	(*BakerElectionVerifyKey)(nil),                               // 26: concordium.v2.BakerElectionVerifyKey
	(*BakerSignatureVerifyKey)(nil),                              // 27: concordium.v2.BakerSignatureVerifyKey
	(*BakerAggregationVerifyKey)(nil),                            // 28: concordium.v2.BakerAggregationVerifyKey
	(*BakerInfo)(nil),                                            // 29: concordium.v2.BakerInfo
	(*StakePendingChange)(nil),                                   // 30: concordium.v2.StakePendingChange
	(*AmountFraction)(nil),                                       // 31: concordium.v2.AmountFraction
	(*CommissionRates)(nil),                                      // 32: concordium.v2.CommissionRates
	(*BakerPoolInfo)(nil),                                        // 33: concordium.v2.BakerPoolInfo
	(*AccountStakingInfo)(nil),                                   // 34: concordium.v2.AccountStakingInfo
	(*SequenceNumber)(nil),                                       // 35: concordium.v2.SequenceNumber
	(*UpdateSequenceNumber)(nil),                                 // 36: concordium.v2.UpdateSequenceNumber
	(*Amount)(nil),                                               // 37: concordium.v2.Amount
	(*CredentialIndex)(nil),                                      // 38: concordium.v2.CredentialIndex
	(*SignatureThreshold)(nil),                                   // 39: concordium.v2.SignatureThreshold
	(*AccountThreshold)(nil),                                     // 40: concordium.v2.AccountThreshold
	(*EncryptionKey)(nil),                                        // 41: concordium.v2.EncryptionKey
	(*AccountAddress)(nil),                                       // 42: concordium.v2.AccountAddress
	(*Address)(nil),                                              // 43: concordium.v2.Address
	(*AccountVerifyKey)(nil),                                     // 44: concordium.v2.AccountVerifyKey
	(*CredentialPublicKeys)(nil),                                 // 45: concordium.v2.CredentialPublicKeys
	(*CredentialRegistrationId)(nil),                             // 46: concordium.v2.CredentialRegistrationId
	(*IdentityProviderIdentity)(nil),                             // 47: concordium.v2.IdentityProviderIdentity
	(*YearMonth)(nil),                                            // 48: concordium.v2.YearMonth
	(*Policy)(nil),                                               // 49: concordium.v2.Policy
	(*InitialCredentialValues)(nil),                              // 50: concordium.v2.InitialCredentialValues
	(*ChainArData)(nil),                                          // 51: concordium.v2.ChainArData
	(*ArThreshold)(nil),                                          // 52: concordium.v2.ArThreshold
	(*Commitment)(nil),                                           // 53: concordium.v2.Commitment
	(*CredentialCommitments)(nil),                                // 54: concordium.v2.CredentialCommitments
	(*NormalCredentialValues)(nil),                               // 55: concordium.v2.NormalCredentialValues
	(*AccountCredential)(nil),                                    // 56: concordium.v2.AccountCredential
	(*AccountInfo)(nil),                                          // 57: concordium.v2.AccountInfo
	(*BlockHashInput)(nil),                                       // 58: concordium.v2.BlockHashInput
	(*AccountIdentifierInput)(nil),                               // 59: concordium.v2.AccountIdentifierInput
	(*AccountInfoRequest)(nil),                                   // 60: concordium.v2.AccountInfoRequest
	(*FinalizedBlockInfo)(nil),                                   // 61: concordium.v2.FinalizedBlockInfo
	(*AncestorsRequest)(nil),                                     // 62: concordium.v2.AncestorsRequest
	(*ModuleSourceRequest)(nil),                                  // 63: concordium.v2.ModuleSourceRequest
	(*ContractAddress)(nil),                                      // 64: concordium.v2.ContractAddress
	(*InstanceInfoRequest)(nil),                                  // 65: concordium.v2.InstanceInfoRequest
	(*InstanceInfo)(nil),                                         // 66: concordium.v2.InstanceInfo
	(*InstanceStateKVPair)(nil),                                  // 67: concordium.v2.InstanceStateKVPair
	(*InstanceStateLookupRequest)(nil),                           // 68: concordium.v2.InstanceStateLookupRequest
	(*InstanceStateValueAtKey)(nil),                              // 69: concordium.v2.InstanceStateValueAtKey
	(*ReceiveName)(nil),                                          // 70: concordium.v2.ReceiveName
	(*InitName)(nil),                                             // 71: concordium.v2.InitName
	(*Parameter)(nil),                                            // 72: concordium.v2.Parameter
	(*ContractStateV0)(nil),                                      // 73: concordium.v2.ContractStateV0
	(*BlockItemStatus)(nil),                                      // 74: concordium.v2.BlockItemStatus
	(*BlockItemSummaryInBlock)(nil),                              // 75: concordium.v2.BlockItemSummaryInBlock
	(*Energy)(nil),                                               // 76: concordium.v2.Energy
	(*Slot)(nil),                                                 // 77: concordium.v2.Slot
	(*NextAccountSequenceNumber)(nil),                            // 78: concordium.v2.NextAccountSequenceNumber
	(*Duration)(nil),                                             // 79: concordium.v2.Duration
	(*RejectReason)(nil),                                         // 80: concordium.v2.RejectReason
	(*ContractInitializedEvent)(nil),                             // 81: concordium.v2.ContractInitializedEvent
	(*ContractEvent)(nil),                                        // 82: concordium.v2.ContractEvent
	(*InstanceUpdatedEvent)(nil),                                 // 83: concordium.v2.InstanceUpdatedEvent
	(*ContractTraceElement)(nil),                                 // 84: concordium.v2.ContractTraceElement
	(*BakerKeysEvent)(nil),                                       // 85: concordium.v2.BakerKeysEvent
	(*Memo)(nil),                                                 // 86: concordium.v2.Memo
	(*BakerStakeUpdatedData)(nil),                                // 87: concordium.v2.BakerStakeUpdatedData
	(*EncryptedAmountRemovedEvent)(nil),                          // 88: concordium.v2.EncryptedAmountRemovedEvent
	(*NewEncryptedAmountEvent)(nil),                              // 89: concordium.v2.NewEncryptedAmountEvent
	(*EncryptedSelfAmountAddedEvent)(nil),                        // 90: concordium.v2.EncryptedSelfAmountAddedEvent
	(*RegisteredData)(nil),                                       // 91: concordium.v2.RegisteredData
	(*BakerEvent)(nil),                                           // 92: concordium.v2.BakerEvent
	(*DelegatorId)(nil),                                          // 93: concordium.v2.DelegatorId
	(*DelegationEvent)(nil),                                      // 94: concordium.v2.DelegationEvent
	(*AccountTransactionEffects)(nil),                            // 95: concordium.v2.AccountTransactionEffects
	(*ElectionDifficulty)(nil),                                   // 96: concordium.v2.ElectionDifficulty
	(*TimeoutParameters)(nil),                                    // 97: concordium.v2.TimeoutParameters
	(*FinalizationCommitteeParameters)(nil),                      // 98: concordium.v2.FinalizationCommitteeParameters
	(*ConsensusParametersV1)(nil),                                // 99: concordium.v2.ConsensusParametersV1
	(*ExchangeRate)(nil),                                         // 100: concordium.v2.ExchangeRate
	(*Ratio)(nil),                                                // 101: concordium.v2.Ratio
	(*UpdatePublicKey)(nil),                                      // 102: concordium.v2.UpdatePublicKey
	(*UpdateKeysThreshold)(nil),                                  // 103: concordium.v2.UpdateKeysThreshold
	(*UpdateKeysIndex)(nil),                                      // 104: concordium.v2.UpdateKeysIndex
	(*HigherLevelKeys)(nil),                                      // 105: concordium.v2.HigherLevelKeys
	(*AccessStructure)(nil),                                      // 106: concordium.v2.AccessStructure
	(*AuthorizationsV0)(nil),                                     // 107: concordium.v2.AuthorizationsV0
	(*AuthorizationsV1)(nil),                                     // 108: concordium.v2.AuthorizationsV1
	(*Description)(nil),                                          // 109: concordium.v2.Description
	(*ArInfo)(nil),                                               // 110: concordium.v2.ArInfo
	(*IpIdentity)(nil),                                           // 111: concordium.v2.IpIdentity
	(*IpInfo)(nil),                                               // 112: concordium.v2.IpInfo
	(*DurationSeconds)(nil),                                      // 113: concordium.v2.DurationSeconds
	(*InclusiveRangeAmountFraction)(nil),                         // 114: concordium.v2.InclusiveRangeAmountFraction
	(*CommissionRanges)(nil),                                     // 115: concordium.v2.CommissionRanges
	(*CapitalBound)(nil),                                         // 116: concordium.v2.CapitalBound
	(*LeverageFactor)(nil),                                       // 117: concordium.v2.LeverageFactor
	(*Epoch)(nil),                                                // 118: concordium.v2.Epoch
	(*RewardPeriodLength)(nil),                                   // 119: concordium.v2.RewardPeriodLength
	(*MintRate)(nil),                                             // 120: concordium.v2.MintRate
	(*CooldownParametersCpv1)(nil),                               // 121: concordium.v2.CooldownParametersCpv1
	(*PoolParametersCpv1)(nil),                                   // 122: concordium.v2.PoolParametersCpv1
	(*TimeParametersCpv1)(nil),                                   // 123: concordium.v2.TimeParametersCpv1
	(*MintDistributionCpv1)(nil),                                 // 124: concordium.v2.MintDistributionCpv1
	(*ProtocolUpdate)(nil),                                       // 125: concordium.v2.ProtocolUpdate
	(*MintDistributionCpv0)(nil),                                 // 126: concordium.v2.MintDistributionCpv0
	(*TransactionFeeDistribution)(nil),                           // 127: concordium.v2.TransactionFeeDistribution
	(*GasRewards)(nil),                                           // 128: concordium.v2.GasRewards
	(*GasRewardsCpv2)(nil),                                       // 129: concordium.v2.GasRewardsCpv2
	(*BakerStakeThreshold)(nil),                                  // 130: concordium.v2.BakerStakeThreshold
	(*RootUpdate)(nil),                                           // 131: concordium.v2.RootUpdate
	(*Level1Update)(nil),                                         // 132: concordium.v2.Level1Update
	(*UpdatePayload)(nil),                                        // 133: concordium.v2.UpdatePayload
	(*AccountTransactionDetails)(nil),                            // 134: concordium.v2.AccountTransactionDetails
	(*AccountCreationDetails)(nil),                               // 135: concordium.v2.AccountCreationDetails
	(*TransactionTime)(nil),                                      // 136: concordium.v2.TransactionTime
	(*UpdateDetails)(nil),                                        // 137: concordium.v2.UpdateDetails
	(*BlockItemSummary)(nil),                                     // 138: concordium.v2.BlockItemSummary
	(*GenesisIndex)(nil),                                         // 139: concordium.v2.GenesisIndex
	(*ConsensusInfo)(nil),                                        // 140: concordium.v2.ConsensusInfo
	(*ArrivedBlockInfo)(nil),                                     // 141: concordium.v2.ArrivedBlockInfo
	(*CryptographicParameters)(nil),                              // 142: concordium.v2.CryptographicParameters
	(*BlockInfo)(nil),                                            // 143: concordium.v2.BlockInfo
	(*PoolInfoRequest)(nil),                                      // 144: concordium.v2.PoolInfoRequest
	(*PoolPendingChange)(nil),                                    // 145: concordium.v2.PoolPendingChange
	(*PoolCurrentPaydayInfo)(nil),                                // 146: concordium.v2.PoolCurrentPaydayInfo
	(*PoolInfoResponse)(nil),                                     // 147: concordium.v2.PoolInfoResponse
	(*PassiveDelegationInfo)(nil),                                // 148: concordium.v2.PassiveDelegationInfo
	(*BlocksAtHeightRequest)(nil),                                // 149: concordium.v2.BlocksAtHeightRequest
	(*BlocksAtHeightResponse)(nil),                               // 150: concordium.v2.BlocksAtHeightResponse
	(*TokenomicsInfo)(nil),                                       // 151: concordium.v2.TokenomicsInfo
	(*InvokeInstanceRequest)(nil),                                // 152: concordium.v2.InvokeInstanceRequest
	(*InvokeInstanceResponse)(nil),                               // 153: concordium.v2.InvokeInstanceResponse
	(*GetPoolDelegatorsRequest)(nil),                             // 154: concordium.v2.GetPoolDelegatorsRequest
	(*DelegatorInfo)(nil),                                        // 155: concordium.v2.DelegatorInfo
	(*DelegatorRewardPeriodInfo)(nil),                            // 156: concordium.v2.DelegatorRewardPeriodInfo
	(*Branch)(nil),                                               // 157: concordium.v2.Branch
	(*LeadershipElectionNonce)(nil),                              // 158: concordium.v2.LeadershipElectionNonce
	(*ElectionInfo)(nil),                                         // 159: concordium.v2.ElectionInfo
	(*BlockSpecialEvent)(nil),                                    // 160: concordium.v2.BlockSpecialEvent
	(*PendingUpdate)(nil),                                        // 161: concordium.v2.PendingUpdate
	(*NextUpdateSequenceNumbers)(nil),                            // 162: concordium.v2.NextUpdateSequenceNumbers
	(*IpAddress)(nil),                                            // 163: concordium.v2.IpAddress
	(*Port)(nil),                                                 // 164: concordium.v2.Port
	(*IpSocketAddress)(nil),                                      // 165: concordium.v2.IpSocketAddress
	(*PeerId)(nil),                                               // 166: concordium.v2.PeerId
	(*BannedPeer)(nil),                                           // 167: concordium.v2.BannedPeer
	(*BannedPeers)(nil),                                          // 168: concordium.v2.BannedPeers
	(*PeerToBan)(nil),                                            // 169: concordium.v2.PeerToBan
	(*DumpRequest)(nil),                                          // 170: concordium.v2.DumpRequest
	(*PeersInfo)(nil),                                            // 171: concordium.v2.PeersInfo
	(*NodeInfo)(nil),                                             // 172: concordium.v2.NodeInfo
	(*SendBlockItemRequest)(nil),                                 // 173: concordium.v2.SendBlockItemRequest
	(*CredentialDeployment)(nil),                                 // 174: concordium.v2.CredentialDeployment
	(*Signature)(nil),                                            // 175: concordium.v2.Signature
	(*SignatureMap)(nil),                                         // 176: concordium.v2.SignatureMap
	(*AccountSignatureMap)(nil),                                  // 177: concordium.v2.AccountSignatureMap
	(*AccountTransactionSignature)(nil),                          // 178: concordium.v2.AccountTransactionSignature
	(*AccountTransactionHeader)(nil),                             // 179: concordium.v2.AccountTransactionHeader
	(*InitContractPayload)(nil),                                  // 180: concordium.v2.InitContractPayload
	(*UpdateContractPayload)(nil),                                // 181: concordium.v2.UpdateContractPayload
	(*TransferPayload)(nil),                                      // 182: concordium.v2.TransferPayload
	(*TransferWithMemoPayload)(nil),                              // 183: concordium.v2.TransferWithMemoPayload
	(*AccountTransactionPayload)(nil),                            // 184: concordium.v2.AccountTransactionPayload
	(*PreAccountTransaction)(nil),                                // 185: concordium.v2.PreAccountTransaction
	(*AccountTransaction)(nil),                                   // 186: concordium.v2.AccountTransaction
	(*UpdateInstructionSignature)(nil),                           // 187: concordium.v2.UpdateInstructionSignature
	(*UpdateInstructionHeader)(nil),                              // 188: concordium.v2.UpdateInstructionHeader
	(*UpdateInstructionPayload)(nil),                             // 189: concordium.v2.UpdateInstructionPayload
	(*UpdateInstruction)(nil),                                    // 190: concordium.v2.UpdateInstruction
	(*AccountTransactionSignHash)(nil),                           // 191: concordium.v2.AccountTransactionSignHash
	(*CredentialsPerBlockLimit)(nil),                             // 192: concordium.v2.CredentialsPerBlockLimit
	(*ChainParametersV0)(nil),                                    // 193: concordium.v2.ChainParametersV0
	(*ChainParametersV1)(nil),                                    // 194: concordium.v2.ChainParametersV1
	(*ChainParametersV2)(nil),                                    // 195: concordium.v2.ChainParametersV2
	(*ChainParameters)(nil),                                      // 196: concordium.v2.ChainParameters
	(*FinalizationSummaryParty)(nil),                             // 197: concordium.v2.FinalizationSummaryParty
	(*FinalizationIndex)(nil),                                    // 198: concordium.v2.FinalizationIndex
	(*FinalizationSummary)(nil),                                  // 199: concordium.v2.FinalizationSummary
	(*BlockFinalizationSummary)(nil),                             // 200: concordium.v2.BlockFinalizationSummary
	(*BlockItem)(nil),                                            // 201: concordium.v2.BlockItem
	(*VersionedModuleSource_ModuleSourceV0)(nil),                 // 202: concordium.v2.VersionedModuleSource.ModuleSourceV0
	(*VersionedModuleSource_ModuleSourceV1)(nil),                 // 203: concordium.v2.VersionedModuleSource.ModuleSourceV1
	(*StakePendingChange_Reduce)(nil),                            // 204: concordium.v2.StakePendingChange.Reduce
	(*AccountStakingInfo_Baker)(nil),                             // 205: concordium.v2.AccountStakingInfo.Baker
	(*AccountStakingInfo_Delegator)(nil),                         // 206: concordium.v2.AccountStakingInfo.Delegator
	nil,                                                          // 207: concordium.v2.CredentialPublicKeys.KeysEntry
	nil,                                                          // 208: concordium.v2.Policy.AttributesEntry
	nil,                                                          // 209: concordium.v2.CredentialCommitments.AttributesEntry
	nil,                                                          // 210: concordium.v2.NormalCredentialValues.ArDataEntry
	nil,                                                          // 211: concordium.v2.AccountInfo.CredsEntry
	(*BlockHashInput_RelativeHeight)(nil),                        // 212: concordium.v2.BlockHashInput.RelativeHeight
	(*InstanceInfo_V0)(nil),                                      // 213: concordium.v2.InstanceInfo.V0
	(*InstanceInfo_V1)(nil),                                      // 214: concordium.v2.InstanceInfo.V1
	(*BlockItemStatus_Committed)(nil),                            // 215: concordium.v2.BlockItemStatus.Committed
	(*BlockItemStatus_Finalized)(nil),                            // 216: concordium.v2.BlockItemStatus.Finalized
	(*RejectReason_InvalidInitMethod)(nil),                       // 217: concordium.v2.RejectReason.InvalidInitMethod
	(*RejectReason_InvalidReceiveMethod)(nil),                    // 218: concordium.v2.RejectReason.InvalidReceiveMethod
	(*RejectReason_AmountTooLarge)(nil),                          // 219: concordium.v2.RejectReason.AmountTooLarge
	(*RejectReason_RejectedInit)(nil),                            // 220: concordium.v2.RejectReason.RejectedInit
	(*RejectReason_RejectedReceive)(nil),                         // 221: concordium.v2.RejectReason.RejectedReceive
	(*RejectReason_DuplicateCredIds)(nil),                        // 222: concordium.v2.RejectReason.DuplicateCredIds
	(*RejectReason_NonExistentCredIds)(nil),                      // 223: concordium.v2.RejectReason.NonExistentCredIds
	(*ContractTraceElement_Transferred)(nil),                     // 224: concordium.v2.ContractTraceElement.Transferred
	(*ContractTraceElement_Interrupted)(nil),                     // 225: concordium.v2.ContractTraceElement.Interrupted
	(*ContractTraceElement_Resumed)(nil),                         // 226: concordium.v2.ContractTraceElement.Resumed
	(*ContractTraceElement_Upgraded)(nil),                        // 227: concordium.v2.ContractTraceElement.Upgraded
	(*BakerEvent_BakerAdded)(nil),                                // 228: concordium.v2.BakerEvent.BakerAdded
	(*BakerEvent_BakerStakeIncreased)(nil),                       // 229: concordium.v2.BakerEvent.BakerStakeIncreased
	(*BakerEvent_BakerStakeDecreased)(nil),                       // 230: concordium.v2.BakerEvent.BakerStakeDecreased
	(*BakerEvent_BakerRestakeEarningsUpdated)(nil),               // 231: concordium.v2.BakerEvent.BakerRestakeEarningsUpdated
	(*BakerEvent_BakerSetOpenStatus)(nil),                        // 232: concordium.v2.BakerEvent.BakerSetOpenStatus
	(*BakerEvent_BakerSetMetadataUrl)(nil),                       // 233: concordium.v2.BakerEvent.BakerSetMetadataUrl
	(*BakerEvent_BakerSetTransactionFeeCommission)(nil),          // 234: concordium.v2.BakerEvent.BakerSetTransactionFeeCommission
	(*BakerEvent_BakerSetBakingRewardCommission)(nil),            // 235: concordium.v2.BakerEvent.BakerSetBakingRewardCommission
	(*BakerEvent_BakerSetFinalizationRewardCommission)(nil),      // 236: concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission
	(*DelegationEvent_DelegationStakeIncreased)(nil),             // 237: concordium.v2.DelegationEvent.DelegationStakeIncreased
	(*DelegationEvent_DelegationStakeDecreased)(nil),             // 238: concordium.v2.DelegationEvent.DelegationStakeDecreased
	(*DelegationEvent_DelegationSetRestakeEarnings)(nil),         // 239: concordium.v2.DelegationEvent.DelegationSetRestakeEarnings
	(*DelegationEvent_DelegationSetDelegationTarget)(nil),        // 240: concordium.v2.DelegationEvent.DelegationSetDelegationTarget
	(*AccountTransactionEffects_None)(nil),                       // 241: concordium.v2.AccountTransactionEffects.None
	(*AccountTransactionEffects_ContractUpdateIssued)(nil),       // 242: concordium.v2.AccountTransactionEffects.ContractUpdateIssued
	(*AccountTransactionEffects_AccountTransfer)(nil),            // 243: concordium.v2.AccountTransactionEffects.AccountTransfer
	(*AccountTransactionEffects_BakerStakeUpdated)(nil),          // 244: concordium.v2.AccountTransactionEffects.BakerStakeUpdated
	(*AccountTransactionEffects_EncryptedAmountTransferred)(nil), // 245: concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred
	(*AccountTransactionEffects_TransferredToPublic)(nil),        // 246: concordium.v2.AccountTransactionEffects.TransferredToPublic
	(*AccountTransactionEffects_TransferredWithSchedule)(nil),    // 247: concordium.v2.AccountTransactionEffects.TransferredWithSchedule
	(*AccountTransactionEffects_CredentialsUpdated)(nil),         // 248: concordium.v2.AccountTransactionEffects.CredentialsUpdated
	(*AccountTransactionEffects_BakerConfigured)(nil),            // 249: concordium.v2.AccountTransactionEffects.BakerConfigured
	(*AccountTransactionEffects_DelegationConfigured)(nil),       // 250: concordium.v2.AccountTransactionEffects.DelegationConfigured
	(*ArInfo_ArIdentity)(nil),                                    // 251: concordium.v2.ArInfo.ArIdentity
	(*ArInfo_ArPublicKey)(nil),                                   // 252: concordium.v2.ArInfo.ArPublicKey
	(*IpInfo_IpVerifyKey)(nil),                                   // 253: concordium.v2.IpInfo.IpVerifyKey
	(*IpInfo_IpCdiVerifyKey)(nil),                                // 254: concordium.v2.IpInfo.IpCdiVerifyKey
	(*BlockItemSummary_TransactionIndex)(nil),                    // 255: concordium.v2.BlockItemSummary.TransactionIndex
	(*PoolPendingChange_Reduce)(nil),                             // 256: concordium.v2.PoolPendingChange.Reduce
	(*PoolPendingChange_Remove)(nil),                             // 257: concordium.v2.PoolPendingChange.Remove
	(*BlocksAtHeightRequest_Absolute)(nil),                       // 258: concordium.v2.BlocksAtHeightRequest.Absolute
	(*BlocksAtHeightRequest_Relative)(nil),                       // 259: concordium.v2.BlocksAtHeightRequest.Relative
	(*TokenomicsInfo_V0)(nil),                                    // 260: concordium.v2.TokenomicsInfo.V0
	(*TokenomicsInfo_V1)(nil),                                    // 261: concordium.v2.TokenomicsInfo.V1
	(*InvokeInstanceResponse_Failure)(nil),                       // 262: concordium.v2.InvokeInstanceResponse.Failure
	(*InvokeInstanceResponse_Success)(nil),                       // 263: concordium.v2.InvokeInstanceResponse.Success
	(*ElectionInfo_Baker)(nil),                                   // 264: concordium.v2.ElectionInfo.Baker
	(*BlockSpecialEvent_AccountAmounts)(nil),                     // 265: concordium.v2.BlockSpecialEvent.AccountAmounts
	(*BlockSpecialEvent_BakingRewards)(nil),                      // 266: concordium.v2.BlockSpecialEvent.BakingRewards
	(*BlockSpecialEvent_Mint)(nil),                               // 267: concordium.v2.BlockSpecialEvent.Mint
	(*BlockSpecialEvent_FinalizationRewards)(nil),                // 268: concordium.v2.BlockSpecialEvent.FinalizationRewards
	(*BlockSpecialEvent_BlockReward)(nil),                        // 269: concordium.v2.BlockSpecialEvent.BlockReward
	(*BlockSpecialEvent_PaydayFoundationReward)(nil),             // 270: concordium.v2.BlockSpecialEvent.PaydayFoundationReward
	(*BlockSpecialEvent_PaydayAccountReward)(nil),                // 271: concordium.v2.BlockSpecialEvent.PaydayAccountReward
	(*BlockSpecialEvent_BlockAccrueReward)(nil),                  // 272: concordium.v2.BlockSpecialEvent.BlockAccrueReward
	(*BlockSpecialEvent_PaydayPoolReward)(nil),                   // 273: concordium.v2.BlockSpecialEvent.PaydayPoolReward
	(*BlockSpecialEvent_AccountAmounts_Entry)(nil),               // 274: concordium.v2.BlockSpecialEvent.AccountAmounts.Entry
	(*PeersInfo_Peer)(nil),                                       // 275: concordium.v2.PeersInfo.Peer
	(*PeersInfo_Peer_NetworkStats)(nil),                          // 276: concordium.v2.PeersInfo.Peer.NetworkStats
	(*NodeInfo_NetworkInfo)(nil),                                 // 277: concordium.v2.NodeInfo.NetworkInfo
	(*NodeInfo_BakerConsensusInfo)(nil),                          // 278: concordium.v2.NodeInfo.BakerConsensusInfo
	(*NodeInfo_Node)(nil),                                        // 279: concordium.v2.NodeInfo.Node
	(*NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo)(nil), // 280: concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo
	(*NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo)(nil), // 281: concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo
	nil, // 282: concordium.v2.SignatureMap.SignaturesEntry
	nil, // 283: concordium.v2.AccountSignatureMap.SignaturesEntry
	nil, // 284: concordium.v2.AccountTransactionSignature.SignaturesEntry
	nil, // 285: concordium.v2.UpdateInstructionSignature.SignaturesEntry
}
var file_types_proto_depIdxs = []int32{
	202, // 0: concordium.v2.VersionedModuleSource.v0:type_name -> concordium.v2.VersionedModuleSource.ModuleSourceV0
	203, // 1: concordium.v2.VersionedModuleSource.v1:type_name -> concordium.v2.VersionedModuleSource.ModuleSourceV1
	19,  // 2: concordium.v2.Release.timestamp:type_name -> concordium.v2.Timestamp
	37,  // 3: concordium.v2.Release.amount:type_name -> concordium.v2.Amount
	11,  // 4: concordium.v2.Release.transactions:type_name -> concordium.v2.TransactionHash
	19,  // 5: concordium.v2.NewRelease.timestamp:type_name -> concordium.v2.Timestamp
	37,  // 6: concordium.v2.NewRelease.amount:type_name -> concordium.v2.Amount
	37,  // 7: concordium.v2.ReleaseSchedule.total:type_name -> concordium.v2.Amount
	20,  // 8: concordium.v2.ReleaseSchedule.schedules:type_name -> concordium.v2.Release
	23,  // 9: concordium.v2.EncryptedBalance.self_amount:type_name -> concordium.v2.EncryptedAmount
	23,  // 10: concordium.v2.EncryptedBalance.aggregated_amount:type_name -> concordium.v2.EncryptedAmount
	23,  // 11: concordium.v2.EncryptedBalance.incoming_amounts:type_name -> concordium.v2.EncryptedAmount
	8,   // 12: concordium.v2.DelegationTarget.passive:type_name -> concordium.v2.Empty
	15,  // 13: concordium.v2.DelegationTarget.baker:type_name -> concordium.v2.BakerId
	15,  // 14: concordium.v2.BakerInfo.baker_id:type_name -> concordium.v2.BakerId
	26,  // 15: concordium.v2.BakerInfo.election_key:type_name -> concordium.v2.BakerElectionVerifyKey
	27,  // 16: concordium.v2.BakerInfo.signature_key:type_name -> concordium.v2.BakerSignatureVerifyKey
	28,  // 17: concordium.v2.BakerInfo.aggregation_key:type_name -> concordium.v2.BakerAggregationVerifyKey
	204, // 18: concordium.v2.StakePendingChange.reduce:type_name -> concordium.v2.StakePendingChange.Reduce
	19,  // 19: concordium.v2.StakePendingChange.remove:type_name -> concordium.v2.Timestamp
	31,  // 20: concordium.v2.CommissionRates.finalization:type_name -> concordium.v2.AmountFraction
	31,  // 21: concordium.v2.CommissionRates.baking:type_name -> concordium.v2.AmountFraction
	31,  // 22: concordium.v2.CommissionRates.transaction:type_name -> concordium.v2.AmountFraction
	0,   // 23: concordium.v2.BakerPoolInfo.open_status:type_name -> concordium.v2.OpenStatus
	32,  // 24: concordium.v2.BakerPoolInfo.commission_rates:type_name -> concordium.v2.CommissionRates
	205, // 25: concordium.v2.AccountStakingInfo.baker:type_name -> concordium.v2.AccountStakingInfo.Baker
	206, // 26: concordium.v2.AccountStakingInfo.delegator:type_name -> concordium.v2.AccountStakingInfo.Delegator
	42,  // 27: concordium.v2.Address.account:type_name -> concordium.v2.AccountAddress
	64,  // 28: concordium.v2.Address.contract:type_name -> concordium.v2.ContractAddress
	207, // 29: concordium.v2.CredentialPublicKeys.keys:type_name -> concordium.v2.CredentialPublicKeys.KeysEntry
	39,  // 30: concordium.v2.CredentialPublicKeys.threshold:type_name -> concordium.v2.SignatureThreshold
	48,  // 31: concordium.v2.Policy.created_at:type_name -> concordium.v2.YearMonth
	48,  // 32: concordium.v2.Policy.valid_to:type_name -> concordium.v2.YearMonth
	208, // 33: concordium.v2.Policy.attributes:type_name -> concordium.v2.Policy.AttributesEntry
	45,  // 34: concordium.v2.InitialCredentialValues.keys:type_name -> concordium.v2.CredentialPublicKeys
	46,  // 35: concordium.v2.InitialCredentialValues.cred_id:type_name -> concordium.v2.CredentialRegistrationId
	47,  // 36: concordium.v2.InitialCredentialValues.ip_id:type_name -> concordium.v2.IdentityProviderIdentity
	49,  // 37: concordium.v2.InitialCredentialValues.policy:type_name -> concordium.v2.Policy
	53,  // 38: concordium.v2.CredentialCommitments.prf:type_name -> concordium.v2.Commitment
	53,  // 39: concordium.v2.CredentialCommitments.cred_counter:type_name -> concordium.v2.Commitment
	53,  // 40: concordium.v2.CredentialCommitments.max_accounts:type_name -> concordium.v2.Commitment
	209, // 41: concordium.v2.CredentialCommitments.attributes:type_name -> concordium.v2.CredentialCommitments.AttributesEntry
	53,  // 42: concordium.v2.CredentialCommitments.id_cred_sec_sharing_coeff:type_name -> concordium.v2.Commitment
	45,  // 43: concordium.v2.NormalCredentialValues.keys:type_name -> concordium.v2.CredentialPublicKeys
	46,  // 44: concordium.v2.NormalCredentialValues.cred_id:type_name -> concordium.v2.CredentialRegistrationId
	47,  // 45: concordium.v2.NormalCredentialValues.ip_id:type_name -> concordium.v2.IdentityProviderIdentity
	49,  // 46: concordium.v2.NormalCredentialValues.policy:type_name -> concordium.v2.Policy
	52,  // 47: concordium.v2.NormalCredentialValues.ar_threshold:type_name -> concordium.v2.ArThreshold
	210, // 48: concordium.v2.NormalCredentialValues.ar_data:type_name -> concordium.v2.NormalCredentialValues.ArDataEntry
	54,  // 49: concordium.v2.NormalCredentialValues.commitments:type_name -> concordium.v2.CredentialCommitments
	50,  // 50: concordium.v2.AccountCredential.initial:type_name -> concordium.v2.InitialCredentialValues
	55,  // 51: concordium.v2.AccountCredential.normal:type_name -> concordium.v2.NormalCredentialValues
	35,  // 52: concordium.v2.AccountInfo.sequence_number:type_name -> concordium.v2.SequenceNumber
	37,  // 53: concordium.v2.AccountInfo.amount:type_name -> concordium.v2.Amount
	22,  // 54: concordium.v2.AccountInfo.schedule:type_name -> concordium.v2.ReleaseSchedule
	211, // 55: concordium.v2.AccountInfo.creds:type_name -> concordium.v2.AccountInfo.CredsEntry
	40,  // 56: concordium.v2.AccountInfo.threshold:type_name -> concordium.v2.AccountThreshold
	24,  // 57: concordium.v2.AccountInfo.encrypted_balance:type_name -> concordium.v2.EncryptedBalance
	41,  // 58: concordium.v2.AccountInfo.encryption_key:type_name -> concordium.v2.EncryptionKey
	16,  // 59: concordium.v2.AccountInfo.index:type_name -> concordium.v2.AccountIndex
	34,  // 60: concordium.v2.AccountInfo.stake:type_name -> concordium.v2.AccountStakingInfo
	42,  // 61: concordium.v2.AccountInfo.address:type_name -> concordium.v2.AccountAddress
	8,   // 62: concordium.v2.BlockHashInput.best:type_name -> concordium.v2.Empty
	8,   // 63: concordium.v2.BlockHashInput.last_final:type_name -> concordium.v2.Empty
	9,   // 64: concordium.v2.BlockHashInput.given:type_name -> concordium.v2.BlockHash
	13,  // 65: concordium.v2.BlockHashInput.absolute_height:type_name -> concordium.v2.AbsoluteBlockHeight
	212, // 66: concordium.v2.BlockHashInput.relative_height:type_name -> concordium.v2.BlockHashInput.RelativeHeight
	42,  // 67: concordium.v2.AccountIdentifierInput.address:type_name -> concordium.v2.AccountAddress
	46,  // 68: concordium.v2.AccountIdentifierInput.cred_id:type_name -> concordium.v2.CredentialRegistrationId
	16,  // 69: concordium.v2.AccountIdentifierInput.account_index:type_name -> concordium.v2.AccountIndex
	58,  // 70: concordium.v2.AccountInfoRequest.block_hash:type_name -> concordium.v2.BlockHashInput
	59,  // 71: concordium.v2.AccountInfoRequest.account_identifier:type_name -> concordium.v2.AccountIdentifierInput
	9,   // 72: concordium.v2.FinalizedBlockInfo.hash:type_name -> concordium.v2.BlockHash
	13,  // 73: concordium.v2.FinalizedBlockInfo.height:type_name -> concordium.v2.AbsoluteBlockHeight
	58,  // 74: concordium.v2.AncestorsRequest.block_hash:type_name -> concordium.v2.BlockHashInput
	58,  // 75: concordium.v2.ModuleSourceRequest.block_hash:type_name -> concordium.v2.BlockHashInput
	17,  // 76: concordium.v2.ModuleSourceRequest.module_ref:type_name -> concordium.v2.ModuleRef
	58,  // 77: concordium.v2.InstanceInfoRequest.block_hash:type_name -> concordium.v2.BlockHashInput
	64,  // 78: concordium.v2.InstanceInfoRequest.address:type_name -> concordium.v2.ContractAddress
	213, // 79: concordium.v2.InstanceInfo.v0:type_name -> concordium.v2.InstanceInfo.V0
	214, // 80: concordium.v2.InstanceInfo.v1:type_name -> concordium.v2.InstanceInfo.V1
	58,  // 81: concordium.v2.InstanceStateLookupRequest.block_hash:type_name -> concordium.v2.BlockHashInput
	64,  // 82: concordium.v2.InstanceStateLookupRequest.address:type_name -> concordium.v2.ContractAddress
	8,   // 83: concordium.v2.BlockItemStatus.received:type_name -> concordium.v2.Empty
	215, // 84: concordium.v2.BlockItemStatus.committed:type_name -> concordium.v2.BlockItemStatus.Committed
	216, // 85: concordium.v2.BlockItemStatus.finalized:type_name -> concordium.v2.BlockItemStatus.Finalized
	9,   // 86: concordium.v2.BlockItemSummaryInBlock.block_hash:type_name -> concordium.v2.BlockHash
	138, // 87: concordium.v2.BlockItemSummaryInBlock.outcome:type_name -> concordium.v2.BlockItemSummary
	35,  // 88: concordium.v2.NextAccountSequenceNumber.sequence_number:type_name -> concordium.v2.SequenceNumber
	8,   // 89: concordium.v2.RejectReason.module_not_wf:type_name -> concordium.v2.Empty
	17,  // 90: concordium.v2.RejectReason.module_hash_already_exists:type_name -> concordium.v2.ModuleRef
	42,  // 91: concordium.v2.RejectReason.invalid_account_reference:type_name -> concordium.v2.AccountAddress
	217, // 92: concordium.v2.RejectReason.invalid_init_method:type_name -> concordium.v2.RejectReason.InvalidInitMethod
	218, // 93: concordium.v2.RejectReason.invalid_receive_method:type_name -> concordium.v2.RejectReason.InvalidReceiveMethod
	17,  // 94: concordium.v2.RejectReason.invalid_module_reference:type_name -> concordium.v2.ModuleRef
	64,  // 95: concordium.v2.RejectReason.invalid_contract_address:type_name -> concordium.v2.ContractAddress
	8,   // 96: concordium.v2.RejectReason.runtime_failure:type_name -> concordium.v2.Empty
	219, // 97: concordium.v2.RejectReason.amount_too_large:type_name -> concordium.v2.RejectReason.AmountTooLarge
	8,   // 98: concordium.v2.RejectReason.serialization_failure:type_name -> concordium.v2.Empty
	8,   // 99: concordium.v2.RejectReason.out_of_energy:type_name -> concordium.v2.Empty
	220, // 100: concordium.v2.RejectReason.rejected_init:type_name -> concordium.v2.RejectReason.RejectedInit
	221, // 101: concordium.v2.RejectReason.rejected_receive:type_name -> concordium.v2.RejectReason.RejectedReceive
	8,   // 102: concordium.v2.RejectReason.invalid_proof:type_name -> concordium.v2.Empty
	15,  // 103: concordium.v2.RejectReason.already_a_baker:type_name -> concordium.v2.BakerId
	42,  // 104: concordium.v2.RejectReason.not_a_baker:type_name -> concordium.v2.AccountAddress
	8,   // 105: concordium.v2.RejectReason.insufficient_balance_for_baker_stake:type_name -> concordium.v2.Empty
	8,   // 106: concordium.v2.RejectReason.stake_under_minimum_threshold_for_baking:type_name -> concordium.v2.Empty
	8,   // 107: concordium.v2.RejectReason.baker_in_cooldown:type_name -> concordium.v2.Empty
	28,  // 108: concordium.v2.RejectReason.duplicate_aggregation_key:type_name -> concordium.v2.BakerAggregationVerifyKey
	8,   // 109: concordium.v2.RejectReason.non_existent_credential_id:type_name -> concordium.v2.Empty
	8,   // 110: concordium.v2.RejectReason.key_index_already_in_use:type_name -> concordium.v2.Empty
	8,   // 111: concordium.v2.RejectReason.invalid_account_threshold:type_name -> concordium.v2.Empty
	8,   // 112: concordium.v2.RejectReason.invalid_credential_key_sign_threshold:type_name -> concordium.v2.Empty
	8,   // 113: concordium.v2.RejectReason.invalid_encrypted_amount_transfer_proof:type_name -> concordium.v2.Empty
	8,   // 114: concordium.v2.RejectReason.invalid_transfer_to_public_proof:type_name -> concordium.v2.Empty
	42,  // 115: concordium.v2.RejectReason.encrypted_amount_self_transfer:type_name -> concordium.v2.AccountAddress
	8,   // 116: concordium.v2.RejectReason.invalid_index_on_encrypted_transfer:type_name -> concordium.v2.Empty
	8,   // 117: concordium.v2.RejectReason.zero_scheduledAmount:type_name -> concordium.v2.Empty
	8,   // 118: concordium.v2.RejectReason.non_increasing_schedule:type_name -> concordium.v2.Empty
	8,   // 119: concordium.v2.RejectReason.first_scheduled_release_expired:type_name -> concordium.v2.Empty
	42,  // 120: concordium.v2.RejectReason.scheduled_self_transfer:type_name -> concordium.v2.AccountAddress
	8,   // 121: concordium.v2.RejectReason.invalid_credentials:type_name -> concordium.v2.Empty
	222, // 122: concordium.v2.RejectReason.duplicate_cred_ids:type_name -> concordium.v2.RejectReason.DuplicateCredIds
	223, // 123: concordium.v2.RejectReason.non_existent_cred_ids:type_name -> concordium.v2.RejectReason.NonExistentCredIds
	8,   // 124: concordium.v2.RejectReason.remove_first_credential:type_name -> concordium.v2.Empty
	8,   // 125: concordium.v2.RejectReason.credential_holder_did_not_sign:type_name -> concordium.v2.Empty
	8,   // 126: concordium.v2.RejectReason.not_allowed_multiple_credentials:type_name -> concordium.v2.Empty
	8,   // 127: concordium.v2.RejectReason.not_allowed_to_receive_encrypted:type_name -> concordium.v2.Empty
	8,   // 128: concordium.v2.RejectReason.not_allowed_to_handle_encrypted:type_name -> concordium.v2.Empty
	8,   // 129: concordium.v2.RejectReason.missing_baker_add_parameters:type_name -> concordium.v2.Empty
	8,   // 130: concordium.v2.RejectReason.finalization_reward_commission_not_in_range:type_name -> concordium.v2.Empty
	8,   // 131: concordium.v2.RejectReason.baking_reward_commission_not_in_range:type_name -> concordium.v2.Empty
	8,   // 132: concordium.v2.RejectReason.transaction_fee_commission_not_in_range:type_name -> concordium.v2.Empty
	8,   // 133: concordium.v2.RejectReason.already_a_delegator:type_name -> concordium.v2.Empty
	8,   // 134: concordium.v2.RejectReason.insufficient_balance_for_delegation_stake:type_name -> concordium.v2.Empty
	8,   // 135: concordium.v2.RejectReason.missing_delegation_add_parameters:type_name -> concordium.v2.Empty
	8,   // 136: concordium.v2.RejectReason.insufficient_delegation_stake:type_name -> concordium.v2.Empty
	8,   // 137: concordium.v2.RejectReason.delegator_in_cooldown:type_name -> concordium.v2.Empty
	42,  // 138: concordium.v2.RejectReason.not_a_delegator:type_name -> concordium.v2.AccountAddress
	15,  // 139: concordium.v2.RejectReason.delegation_target_not_a_baker:type_name -> concordium.v2.BakerId
	8,   // 140: concordium.v2.RejectReason.stake_over_maximum_threshold_for_pool:type_name -> concordium.v2.Empty
	8,   // 141: concordium.v2.RejectReason.pool_would_become_over_delegated:type_name -> concordium.v2.Empty
	8,   // 142: concordium.v2.RejectReason.pool_closed:type_name -> concordium.v2.Empty
	1,   // 143: concordium.v2.ContractInitializedEvent.contract_version:type_name -> concordium.v2.ContractVersion
	17,  // 144: concordium.v2.ContractInitializedEvent.origin_ref:type_name -> concordium.v2.ModuleRef
	64,  // 145: concordium.v2.ContractInitializedEvent.address:type_name -> concordium.v2.ContractAddress
	37,  // 146: concordium.v2.ContractInitializedEvent.amount:type_name -> concordium.v2.Amount
	71,  // 147: concordium.v2.ContractInitializedEvent.init_name:type_name -> concordium.v2.InitName
	82,  // 148: concordium.v2.ContractInitializedEvent.events:type_name -> concordium.v2.ContractEvent
	1,   // 149: concordium.v2.InstanceUpdatedEvent.contract_version:type_name -> concordium.v2.ContractVersion
	64,  // 150: concordium.v2.InstanceUpdatedEvent.address:type_name -> concordium.v2.ContractAddress
	43,  // 151: concordium.v2.InstanceUpdatedEvent.instigator:type_name -> concordium.v2.Address
	37,  // 152: concordium.v2.InstanceUpdatedEvent.amount:type_name -> concordium.v2.Amount
	72,  // 153: concordium.v2.InstanceUpdatedEvent.parameter:type_name -> concordium.v2.Parameter
	70,  // 154: concordium.v2.InstanceUpdatedEvent.receive_name:type_name -> concordium.v2.ReceiveName
	82,  // 155: concordium.v2.InstanceUpdatedEvent.events:type_name -> concordium.v2.ContractEvent
	83,  // 156: concordium.v2.ContractTraceElement.updated:type_name -> concordium.v2.InstanceUpdatedEvent
	224, // 157: concordium.v2.ContractTraceElement.transferred:type_name -> concordium.v2.ContractTraceElement.Transferred
	225, // 158: concordium.v2.ContractTraceElement.interrupted:type_name -> concordium.v2.ContractTraceElement.Interrupted
	226, // 159: concordium.v2.ContractTraceElement.resumed:type_name -> concordium.v2.ContractTraceElement.Resumed
	227, // 160: concordium.v2.ContractTraceElement.upgraded:type_name -> concordium.v2.ContractTraceElement.Upgraded
	15,  // 161: concordium.v2.BakerKeysEvent.baker_id:type_name -> concordium.v2.BakerId
	42,  // 162: concordium.v2.BakerKeysEvent.account:type_name -> concordium.v2.AccountAddress
	27,  // 163: concordium.v2.BakerKeysEvent.sign_key:type_name -> concordium.v2.BakerSignatureVerifyKey
	26,  // 164: concordium.v2.BakerKeysEvent.election_key:type_name -> concordium.v2.BakerElectionVerifyKey
	28,  // 165: concordium.v2.BakerKeysEvent.aggregation_key:type_name -> concordium.v2.BakerAggregationVerifyKey
	15,  // 166: concordium.v2.BakerStakeUpdatedData.baker_id:type_name -> concordium.v2.BakerId
	37,  // 167: concordium.v2.BakerStakeUpdatedData.new_stake:type_name -> concordium.v2.Amount
	42,  // 168: concordium.v2.EncryptedAmountRemovedEvent.account:type_name -> concordium.v2.AccountAddress
	23,  // 169: concordium.v2.EncryptedAmountRemovedEvent.new_amount:type_name -> concordium.v2.EncryptedAmount
	23,  // 170: concordium.v2.EncryptedAmountRemovedEvent.input_amount:type_name -> concordium.v2.EncryptedAmount
	42,  // 171: concordium.v2.NewEncryptedAmountEvent.receiver:type_name -> concordium.v2.AccountAddress
	23,  // 172: concordium.v2.NewEncryptedAmountEvent.encrypted_amount:type_name -> concordium.v2.EncryptedAmount
	42,  // 173: concordium.v2.EncryptedSelfAmountAddedEvent.account:type_name -> concordium.v2.AccountAddress
	23,  // 174: concordium.v2.EncryptedSelfAmountAddedEvent.new_amount:type_name -> concordium.v2.EncryptedAmount
	37,  // 175: concordium.v2.EncryptedSelfAmountAddedEvent.amount:type_name -> concordium.v2.Amount
	228, // 176: concordium.v2.BakerEvent.baker_added:type_name -> concordium.v2.BakerEvent.BakerAdded
	15,  // 177: concordium.v2.BakerEvent.baker_removed:type_name -> concordium.v2.BakerId
	229, // 178: concordium.v2.BakerEvent.baker_stake_increased:type_name -> concordium.v2.BakerEvent.BakerStakeIncreased
	230, // 179: concordium.v2.BakerEvent.baker_stake_decreased:type_name -> concordium.v2.BakerEvent.BakerStakeDecreased
	231, // 180: concordium.v2.BakerEvent.baker_restake_earnings_updated:type_name -> concordium.v2.BakerEvent.BakerRestakeEarningsUpdated
	85,  // 181: concordium.v2.BakerEvent.baker_keys_updated:type_name -> concordium.v2.BakerKeysEvent
	232, // 182: concordium.v2.BakerEvent.baker_set_open_status:type_name -> concordium.v2.BakerEvent.BakerSetOpenStatus
	233, // 183: concordium.v2.BakerEvent.baker_set_metadata_url:type_name -> concordium.v2.BakerEvent.BakerSetMetadataUrl
	234, // 184: concordium.v2.BakerEvent.baker_set_transaction_fee_commission:type_name -> concordium.v2.BakerEvent.BakerSetTransactionFeeCommission
	235, // 185: concordium.v2.BakerEvent.baker_set_baking_reward_commission:type_name -> concordium.v2.BakerEvent.BakerSetBakingRewardCommission
	236, // 186: concordium.v2.BakerEvent.baker_set_finalization_reward_commission:type_name -> concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission
	16,  // 187: concordium.v2.DelegatorId.id:type_name -> concordium.v2.AccountIndex
	237, // 188: concordium.v2.DelegationEvent.delegation_stake_increased:type_name -> concordium.v2.DelegationEvent.DelegationStakeIncreased
	238, // 189: concordium.v2.DelegationEvent.delegation_stake_decreased:type_name -> concordium.v2.DelegationEvent.DelegationStakeDecreased
	239, // 190: concordium.v2.DelegationEvent.delegation_set_restake_earnings:type_name -> concordium.v2.DelegationEvent.DelegationSetRestakeEarnings
	240, // 191: concordium.v2.DelegationEvent.delegation_set_delegation_target:type_name -> concordium.v2.DelegationEvent.DelegationSetDelegationTarget
	93,  // 192: concordium.v2.DelegationEvent.delegation_added:type_name -> concordium.v2.DelegatorId
	93,  // 193: concordium.v2.DelegationEvent.delegation_removed:type_name -> concordium.v2.DelegatorId
	241, // 194: concordium.v2.AccountTransactionEffects.none:type_name -> concordium.v2.AccountTransactionEffects.None
	17,  // 195: concordium.v2.AccountTransactionEffects.module_deployed:type_name -> concordium.v2.ModuleRef
	81,  // 196: concordium.v2.AccountTransactionEffects.contract_initialized:type_name -> concordium.v2.ContractInitializedEvent
	242, // 197: concordium.v2.AccountTransactionEffects.contract_update_issued:type_name -> concordium.v2.AccountTransactionEffects.ContractUpdateIssued
	243, // 198: concordium.v2.AccountTransactionEffects.account_transfer:type_name -> concordium.v2.AccountTransactionEffects.AccountTransfer
	228, // 199: concordium.v2.AccountTransactionEffects.baker_added:type_name -> concordium.v2.BakerEvent.BakerAdded
	15,  // 200: concordium.v2.AccountTransactionEffects.baker_removed:type_name -> concordium.v2.BakerId
	244, // 201: concordium.v2.AccountTransactionEffects.baker_stake_updated:type_name -> concordium.v2.AccountTransactionEffects.BakerStakeUpdated
	231, // 202: concordium.v2.AccountTransactionEffects.baker_restake_earnings_updated:type_name -> concordium.v2.BakerEvent.BakerRestakeEarningsUpdated
	85,  // 203: concordium.v2.AccountTransactionEffects.baker_keys_updated:type_name -> concordium.v2.BakerKeysEvent
	245, // 204: concordium.v2.AccountTransactionEffects.encrypted_amount_transferred:type_name -> concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred
	90,  // 205: concordium.v2.AccountTransactionEffects.transferred_to_encrypted:type_name -> concordium.v2.EncryptedSelfAmountAddedEvent
	246, // 206: concordium.v2.AccountTransactionEffects.transferred_to_public:type_name -> concordium.v2.AccountTransactionEffects.TransferredToPublic
	247, // 207: concordium.v2.AccountTransactionEffects.transferred_with_schedule:type_name -> concordium.v2.AccountTransactionEffects.TransferredWithSchedule
	46,  // 208: concordium.v2.AccountTransactionEffects.credential_keys_updated:type_name -> concordium.v2.CredentialRegistrationId
	248, // 209: concordium.v2.AccountTransactionEffects.credentials_updated:type_name -> concordium.v2.AccountTransactionEffects.CredentialsUpdated
	91,  // 210: concordium.v2.AccountTransactionEffects.data_registered:type_name -> concordium.v2.RegisteredData
	249, // 211: concordium.v2.AccountTransactionEffects.baker_configured:type_name -> concordium.v2.AccountTransactionEffects.BakerConfigured
	250, // 212: concordium.v2.AccountTransactionEffects.delegation_configured:type_name -> concordium.v2.AccountTransactionEffects.DelegationConfigured
	31,  // 213: concordium.v2.ElectionDifficulty.value:type_name -> concordium.v2.AmountFraction
	79,  // 214: concordium.v2.TimeoutParameters.timeout_base:type_name -> concordium.v2.Duration
	101, // 215: concordium.v2.TimeoutParameters.timeout_increase:type_name -> concordium.v2.Ratio
	101, // 216: concordium.v2.TimeoutParameters.timeout_decrease:type_name -> concordium.v2.Ratio
	31,  // 217: concordium.v2.FinalizationCommitteeParameters.finalizer_relative_stake_threshold:type_name -> concordium.v2.AmountFraction
	97,  // 218: concordium.v2.ConsensusParametersV1.timeout_parameters:type_name -> concordium.v2.TimeoutParameters
	79,  // 219: concordium.v2.ConsensusParametersV1.min_block_time:type_name -> concordium.v2.Duration
	76,  // 220: concordium.v2.ConsensusParametersV1.block_energy_limit:type_name -> concordium.v2.Energy
	101, // 221: concordium.v2.ExchangeRate.value:type_name -> concordium.v2.Ratio
	102, // 222: concordium.v2.HigherLevelKeys.keys:type_name -> concordium.v2.UpdatePublicKey
	103, // 223: concordium.v2.HigherLevelKeys.threshold:type_name -> concordium.v2.UpdateKeysThreshold
	104, // 224: concordium.v2.AccessStructure.access_public_keys:type_name -> concordium.v2.UpdateKeysIndex
	103, // 225: concordium.v2.AccessStructure.access_threshold:type_name -> concordium.v2.UpdateKeysThreshold
	102, // 226: concordium.v2.AuthorizationsV0.keys:type_name -> concordium.v2.UpdatePublicKey
	106, // 227: concordium.v2.AuthorizationsV0.emergency:type_name -> concordium.v2.AccessStructure
	106, // 228: concordium.v2.AuthorizationsV0.protocol:type_name -> concordium.v2.AccessStructure
	106, // 229: concordium.v2.AuthorizationsV0.parameter_consensus:type_name -> concordium.v2.AccessStructure
	106, // 230: concordium.v2.AuthorizationsV0.parameter_euro_per_energy:type_name -> concordium.v2.AccessStructure
	106, // 231: concordium.v2.AuthorizationsV0.parameter_micro_CCD_per_euro:type_name -> concordium.v2.AccessStructure
	106, // 232: concordium.v2.AuthorizationsV0.parameter_foundation_account:type_name -> concordium.v2.AccessStructure
	106, // 233: concordium.v2.AuthorizationsV0.parameter_mint_distribution:type_name -> concordium.v2.AccessStructure
	106, // 234: concordium.v2.AuthorizationsV0.parameter_transaction_fee_distribution:type_name -> concordium.v2.AccessStructure
	106, // 235: concordium.v2.AuthorizationsV0.parameter_gas_rewards:type_name -> concordium.v2.AccessStructure
	106, // 236: concordium.v2.AuthorizationsV0.pool_parameters:type_name -> concordium.v2.AccessStructure
	106, // 237: concordium.v2.AuthorizationsV0.add_anonymity_revoker:type_name -> concordium.v2.AccessStructure
	106, // 238: concordium.v2.AuthorizationsV0.add_identity_provider:type_name -> concordium.v2.AccessStructure
	107, // 239: concordium.v2.AuthorizationsV1.v0:type_name -> concordium.v2.AuthorizationsV0
	106, // 240: concordium.v2.AuthorizationsV1.parameter_cooldown:type_name -> concordium.v2.AccessStructure
	106, // 241: concordium.v2.AuthorizationsV1.parameter_time:type_name -> concordium.v2.AccessStructure
	251, // 242: concordium.v2.ArInfo.identity:type_name -> concordium.v2.ArInfo.ArIdentity
	109, // 243: concordium.v2.ArInfo.description:type_name -> concordium.v2.Description
	252, // 244: concordium.v2.ArInfo.public_key:type_name -> concordium.v2.ArInfo.ArPublicKey
	111, // 245: concordium.v2.IpInfo.identity:type_name -> concordium.v2.IpIdentity
	109, // 246: concordium.v2.IpInfo.description:type_name -> concordium.v2.Description
	253, // 247: concordium.v2.IpInfo.verify_key:type_name -> concordium.v2.IpInfo.IpVerifyKey
	254, // 248: concordium.v2.IpInfo.cdi_verify_key:type_name -> concordium.v2.IpInfo.IpCdiVerifyKey
	31,  // 249: concordium.v2.InclusiveRangeAmountFraction.min:type_name -> concordium.v2.AmountFraction
	31,  // 250: concordium.v2.InclusiveRangeAmountFraction.max_:type_name -> concordium.v2.AmountFraction
	114, // 251: concordium.v2.CommissionRanges.finalization:type_name -> concordium.v2.InclusiveRangeAmountFraction
	114, // 252: concordium.v2.CommissionRanges.baking:type_name -> concordium.v2.InclusiveRangeAmountFraction
	114, // 253: concordium.v2.CommissionRanges.transaction:type_name -> concordium.v2.InclusiveRangeAmountFraction
	31,  // 254: concordium.v2.CapitalBound.value:type_name -> concordium.v2.AmountFraction
	101, // 255: concordium.v2.LeverageFactor.value:type_name -> concordium.v2.Ratio
	118, // 256: concordium.v2.RewardPeriodLength.value:type_name -> concordium.v2.Epoch
	113, // 257: concordium.v2.CooldownParametersCpv1.pool_owner_cooldown:type_name -> concordium.v2.DurationSeconds
	113, // 258: concordium.v2.CooldownParametersCpv1.delegator_cooldown:type_name -> concordium.v2.DurationSeconds
	31,  // 259: concordium.v2.PoolParametersCpv1.passive_finalization_commission:type_name -> concordium.v2.AmountFraction
	31,  // 260: concordium.v2.PoolParametersCpv1.passive_baking_commission:type_name -> concordium.v2.AmountFraction
	31,  // 261: concordium.v2.PoolParametersCpv1.passive_transaction_commission:type_name -> concordium.v2.AmountFraction
	115, // 262: concordium.v2.PoolParametersCpv1.commission_bounds:type_name -> concordium.v2.CommissionRanges
	37,  // 263: concordium.v2.PoolParametersCpv1.minimum_equity_capital:type_name -> concordium.v2.Amount
	116, // 264: concordium.v2.PoolParametersCpv1.capital_bound:type_name -> concordium.v2.CapitalBound
	117, // 265: concordium.v2.PoolParametersCpv1.leverage_bound:type_name -> concordium.v2.LeverageFactor
	119, // 266: concordium.v2.TimeParametersCpv1.reward_period_length:type_name -> concordium.v2.RewardPeriodLength
	120, // 267: concordium.v2.TimeParametersCpv1.mint_per_payday:type_name -> concordium.v2.MintRate
	31,  // 268: concordium.v2.MintDistributionCpv1.baking_reward:type_name -> concordium.v2.AmountFraction
	31,  // 269: concordium.v2.MintDistributionCpv1.finalization_reward:type_name -> concordium.v2.AmountFraction
	10,  // 270: concordium.v2.ProtocolUpdate.specificationHash:type_name -> concordium.v2.Sha256Hash
	120, // 271: concordium.v2.MintDistributionCpv0.mint_per_slot:type_name -> concordium.v2.MintRate
	31,  // 272: concordium.v2.MintDistributionCpv0.baking_reward:type_name -> concordium.v2.AmountFraction
	31,  // 273: concordium.v2.MintDistributionCpv0.finalization_reward:type_name -> concordium.v2.AmountFraction
	31,  // 274: concordium.v2.TransactionFeeDistribution.baker:type_name -> concordium.v2.AmountFraction
	31,  // 275: concordium.v2.TransactionFeeDistribution.gas_account:type_name -> concordium.v2.AmountFraction
	31,  // 276: concordium.v2.GasRewards.baker:type_name -> concordium.v2.AmountFraction
	31,  // 277: concordium.v2.GasRewards.finalization_proof:type_name -> concordium.v2.AmountFraction
	31,  // 278: concordium.v2.GasRewards.account_creation:type_name -> concordium.v2.AmountFraction
	31,  // 279: concordium.v2.GasRewards.chain_update:type_name -> concordium.v2.AmountFraction
	31,  // 280: concordium.v2.GasRewardsCpv2.baker:type_name -> concordium.v2.AmountFraction
	31,  // 281: concordium.v2.GasRewardsCpv2.account_creation:type_name -> concordium.v2.AmountFraction
	31,  // 282: concordium.v2.GasRewardsCpv2.chain_update:type_name -> concordium.v2.AmountFraction
	37,  // 283: concordium.v2.BakerStakeThreshold.baker_stake_threshold:type_name -> concordium.v2.Amount
	105, // 284: concordium.v2.RootUpdate.root_keys_update:type_name -> concordium.v2.HigherLevelKeys
	105, // 285: concordium.v2.RootUpdate.level_1_keys_update:type_name -> concordium.v2.HigherLevelKeys
	107, // 286: concordium.v2.RootUpdate.level_2_keys_update_v0:type_name -> concordium.v2.AuthorizationsV0
	108, // 287: concordium.v2.RootUpdate.level_2_keys_update_v1:type_name -> concordium.v2.AuthorizationsV1
	105, // 288: concordium.v2.Level1Update.level_1_keys_update:type_name -> concordium.v2.HigherLevelKeys
	107, // 289: concordium.v2.Level1Update.level_2_keys_update_v0:type_name -> concordium.v2.AuthorizationsV0
	108, // 290: concordium.v2.Level1Update.level_2_keys_update_v1:type_name -> concordium.v2.AuthorizationsV1
	125, // 291: concordium.v2.UpdatePayload.protocol_update:type_name -> concordium.v2.ProtocolUpdate
	96,  // 292: concordium.v2.UpdatePayload.election_difficulty_update:type_name -> concordium.v2.ElectionDifficulty
	100, // 293: concordium.v2.UpdatePayload.euro_per_energy_update:type_name -> concordium.v2.ExchangeRate
	100, // 294: concordium.v2.UpdatePayload.micro_ccd_per_euro_update:type_name -> concordium.v2.ExchangeRate
	42,  // 295: concordium.v2.UpdatePayload.foundation_account_update:type_name -> concordium.v2.AccountAddress
	126, // 296: concordium.v2.UpdatePayload.mint_distribution_update:type_name -> concordium.v2.MintDistributionCpv0
	127, // 297: concordium.v2.UpdatePayload.transaction_fee_distribution_update:type_name -> concordium.v2.TransactionFeeDistribution
	128, // 298: concordium.v2.UpdatePayload.gas_rewards_update:type_name -> concordium.v2.GasRewards
	130, // 299: concordium.v2.UpdatePayload.baker_stake_threshold_update:type_name -> concordium.v2.BakerStakeThreshold
	131, // 300: concordium.v2.UpdatePayload.root_update:type_name -> concordium.v2.RootUpdate
	132, // 301: concordium.v2.UpdatePayload.level_1_update:type_name -> concordium.v2.Level1Update
	110, // 302: concordium.v2.UpdatePayload.add_anonymity_revoker_update:type_name -> concordium.v2.ArInfo
	112, // 303: concordium.v2.UpdatePayload.add_identity_provider_update:type_name -> concordium.v2.IpInfo
	121, // 304: concordium.v2.UpdatePayload.cooldown_parameters_cpv_1_update:type_name -> concordium.v2.CooldownParametersCpv1
	122, // 305: concordium.v2.UpdatePayload.pool_parameters_cpv_1_update:type_name -> concordium.v2.PoolParametersCpv1
	123, // 306: concordium.v2.UpdatePayload.time_parameters_cpv_1_update:type_name -> concordium.v2.TimeParametersCpv1
	124, // 307: concordium.v2.UpdatePayload.mint_distribution_cpv_1_update:type_name -> concordium.v2.MintDistributionCpv1
	129, // 308: concordium.v2.UpdatePayload.gas_rewards_cpv_2_update:type_name -> concordium.v2.GasRewardsCpv2
	97,  // 309: concordium.v2.UpdatePayload.timeout_parameters_update:type_name -> concordium.v2.TimeoutParameters
	79,  // 310: concordium.v2.UpdatePayload.min_block_time_update:type_name -> concordium.v2.Duration
	76,  // 311: concordium.v2.UpdatePayload.block_energy_limit_update:type_name -> concordium.v2.Energy
	98,  // 312: concordium.v2.UpdatePayload.finalization_committee_parameters_update:type_name -> concordium.v2.FinalizationCommitteeParameters
	37,  // 313: concordium.v2.AccountTransactionDetails.cost:type_name -> concordium.v2.Amount
	42,  // 314: concordium.v2.AccountTransactionDetails.sender:type_name -> concordium.v2.AccountAddress
	95,  // 315: concordium.v2.AccountTransactionDetails.effects:type_name -> concordium.v2.AccountTransactionEffects
	2,   // 316: concordium.v2.AccountCreationDetails.credential_type:type_name -> concordium.v2.CredentialType
	42,  // 317: concordium.v2.AccountCreationDetails.address:type_name -> concordium.v2.AccountAddress
	46,  // 318: concordium.v2.AccountCreationDetails.reg_id:type_name -> concordium.v2.CredentialRegistrationId
	136, // 319: concordium.v2.UpdateDetails.effective_time:type_name -> concordium.v2.TransactionTime
	133, // 320: concordium.v2.UpdateDetails.payload:type_name -> concordium.v2.UpdatePayload
	255, // 321: concordium.v2.BlockItemSummary.index:type_name -> concordium.v2.BlockItemSummary.TransactionIndex
	76,  // 322: concordium.v2.BlockItemSummary.energy_cost:type_name -> concordium.v2.Energy
	11,  // 323: concordium.v2.BlockItemSummary.hash:type_name -> concordium.v2.TransactionHash
	134, // 324: concordium.v2.BlockItemSummary.account_transaction:type_name -> concordium.v2.AccountTransactionDetails
	135, // 325: concordium.v2.BlockItemSummary.account_creation:type_name -> concordium.v2.AccountCreationDetails
	137, // 326: concordium.v2.BlockItemSummary.update:type_name -> concordium.v2.UpdateDetails
	9,   // 327: concordium.v2.ConsensusInfo.best_block:type_name -> concordium.v2.BlockHash
	9,   // 328: concordium.v2.ConsensusInfo.genesis_block:type_name -> concordium.v2.BlockHash
	19,  // 329: concordium.v2.ConsensusInfo.genesis_time:type_name -> concordium.v2.Timestamp
	79,  // 330: concordium.v2.ConsensusInfo.slot_duration:type_name -> concordium.v2.Duration
	79,  // 331: concordium.v2.ConsensusInfo.epoch_duration:type_name -> concordium.v2.Duration
	9,   // 332: concordium.v2.ConsensusInfo.last_finalized_block:type_name -> concordium.v2.BlockHash
	13,  // 333: concordium.v2.ConsensusInfo.best_block_height:type_name -> concordium.v2.AbsoluteBlockHeight
	13,  // 334: concordium.v2.ConsensusInfo.last_finalized_block_height:type_name -> concordium.v2.AbsoluteBlockHeight
	19,  // 335: concordium.v2.ConsensusInfo.block_last_received_time:type_name -> concordium.v2.Timestamp
	19,  // 336: concordium.v2.ConsensusInfo.block_last_arrived_time:type_name -> concordium.v2.Timestamp
	19,  // 337: concordium.v2.ConsensusInfo.last_finalized_time:type_name -> concordium.v2.Timestamp
	5,   // 338: concordium.v2.ConsensusInfo.protocol_version:type_name -> concordium.v2.ProtocolVersion
	139, // 339: concordium.v2.ConsensusInfo.genesis_index:type_name -> concordium.v2.GenesisIndex
	9,   // 340: concordium.v2.ConsensusInfo.current_era_genesis_block:type_name -> concordium.v2.BlockHash
	19,  // 341: concordium.v2.ConsensusInfo.current_era_genesis_time:type_name -> concordium.v2.Timestamp
	9,   // 342: concordium.v2.ArrivedBlockInfo.hash:type_name -> concordium.v2.BlockHash
	13,  // 343: concordium.v2.ArrivedBlockInfo.height:type_name -> concordium.v2.AbsoluteBlockHeight
	9,   // 344: concordium.v2.BlockInfo.hash:type_name -> concordium.v2.BlockHash
	13,  // 345: concordium.v2.BlockInfo.height:type_name -> concordium.v2.AbsoluteBlockHeight
	9,   // 346: concordium.v2.BlockInfo.parent_block:type_name -> concordium.v2.BlockHash
	9,   // 347: concordium.v2.BlockInfo.last_finalized_block:type_name -> concordium.v2.BlockHash
	139, // 348: concordium.v2.BlockInfo.genesis_index:type_name -> concordium.v2.GenesisIndex
	14,  // 349: concordium.v2.BlockInfo.era_block_height:type_name -> concordium.v2.BlockHeight
	19,  // 350: concordium.v2.BlockInfo.receive_time:type_name -> concordium.v2.Timestamp
	19,  // 351: concordium.v2.BlockInfo.arrive_time:type_name -> concordium.v2.Timestamp
	77,  // 352: concordium.v2.BlockInfo.slot_number:type_name -> concordium.v2.Slot
	19,  // 353: concordium.v2.BlockInfo.slot_time:type_name -> concordium.v2.Timestamp
	15,  // 354: concordium.v2.BlockInfo.baker:type_name -> concordium.v2.BakerId
	76,  // 355: concordium.v2.BlockInfo.transactions_energy_cost:type_name -> concordium.v2.Energy
	12,  // 356: concordium.v2.BlockInfo.state_hash:type_name -> concordium.v2.StateHash
	5,   // 357: concordium.v2.BlockInfo.protocol_version:type_name -> concordium.v2.ProtocolVersion
	58,  // 358: concordium.v2.PoolInfoRequest.block_hash:type_name -> concordium.v2.BlockHashInput
	15,  // 359: concordium.v2.PoolInfoRequest.baker:type_name -> concordium.v2.BakerId
	256, // 360: concordium.v2.PoolPendingChange.reduce:type_name -> concordium.v2.PoolPendingChange.Reduce
	257, // 361: concordium.v2.PoolPendingChange.remove:type_name -> concordium.v2.PoolPendingChange.Remove
	37,  // 362: concordium.v2.PoolCurrentPaydayInfo.transaction_fees_earned:type_name -> concordium.v2.Amount
	37,  // 363: concordium.v2.PoolCurrentPaydayInfo.effective_stake:type_name -> concordium.v2.Amount
	37,  // 364: concordium.v2.PoolCurrentPaydayInfo.baker_equity_capital:type_name -> concordium.v2.Amount
	37,  // 365: concordium.v2.PoolCurrentPaydayInfo.delegated_capital:type_name -> concordium.v2.Amount
	15,  // 366: concordium.v2.PoolInfoResponse.baker:type_name -> concordium.v2.BakerId
	42,  // 367: concordium.v2.PoolInfoResponse.address:type_name -> concordium.v2.AccountAddress
	37,  // 368: concordium.v2.PoolInfoResponse.equity_capital:type_name -> concordium.v2.Amount
	37,  // 369: concordium.v2.PoolInfoResponse.delegated_capital:type_name -> concordium.v2.Amount
	37,  // 370: concordium.v2.PoolInfoResponse.delegated_capital_cap:type_name -> concordium.v2.Amount
	33,  // 371: concordium.v2.PoolInfoResponse.pool_info:type_name -> concordium.v2.BakerPoolInfo
	145, // 372: concordium.v2.PoolInfoResponse.equity_pending_change:type_name -> concordium.v2.PoolPendingChange
	146, // 373: concordium.v2.PoolInfoResponse.current_payday_info:type_name -> concordium.v2.PoolCurrentPaydayInfo
	37,  // 374: concordium.v2.PoolInfoResponse.all_pool_total_capital:type_name -> concordium.v2.Amount
	37,  // 375: concordium.v2.PassiveDelegationInfo.delegated_capital:type_name -> concordium.v2.Amount
	32,  // 376: concordium.v2.PassiveDelegationInfo.commission_rates:type_name -> concordium.v2.CommissionRates
	37,  // 377: concordium.v2.PassiveDelegationInfo.current_payday_transaction_fees_earned:type_name -> concordium.v2.Amount
	37,  // 378: concordium.v2.PassiveDelegationInfo.current_payday_delegated_capital:type_name -> concordium.v2.Amount
	37,  // 379: concordium.v2.PassiveDelegationInfo.all_pool_total_capital:type_name -> concordium.v2.Amount
	258, // 380: concordium.v2.BlocksAtHeightRequest.absolute:type_name -> concordium.v2.BlocksAtHeightRequest.Absolute
	259, // 381: concordium.v2.BlocksAtHeightRequest.relative:type_name -> concordium.v2.BlocksAtHeightRequest.Relative
	9,   // 382: concordium.v2.BlocksAtHeightResponse.blocks:type_name -> concordium.v2.BlockHash
	260, // 383: concordium.v2.TokenomicsInfo.v0:type_name -> concordium.v2.TokenomicsInfo.V0
	261, // 384: concordium.v2.TokenomicsInfo.v1:type_name -> concordium.v2.TokenomicsInfo.V1
	58,  // 385: concordium.v2.InvokeInstanceRequest.block_hash:type_name -> concordium.v2.BlockHashInput
	43,  // 386: concordium.v2.InvokeInstanceRequest.invoker:type_name -> concordium.v2.Address
	64,  // 387: concordium.v2.InvokeInstanceRequest.instance:type_name -> concordium.v2.ContractAddress
	37,  // 388: concordium.v2.InvokeInstanceRequest.amount:type_name -> concordium.v2.Amount
	70,  // 389: concordium.v2.InvokeInstanceRequest.entrypoint:type_name -> concordium.v2.ReceiveName
	72,  // 390: concordium.v2.InvokeInstanceRequest.parameter:type_name -> concordium.v2.Parameter
	76,  // 391: concordium.v2.InvokeInstanceRequest.energy:type_name -> concordium.v2.Energy
	263, // 392: concordium.v2.InvokeInstanceResponse.success:type_name -> concordium.v2.InvokeInstanceResponse.Success
	262, // 393: concordium.v2.InvokeInstanceResponse.failure:type_name -> concordium.v2.InvokeInstanceResponse.Failure
	58,  // 394: concordium.v2.GetPoolDelegatorsRequest.block_hash:type_name -> concordium.v2.BlockHashInput
	15,  // 395: concordium.v2.GetPoolDelegatorsRequest.baker:type_name -> concordium.v2.BakerId
	42,  // 396: concordium.v2.DelegatorInfo.account:type_name -> concordium.v2.AccountAddress
	37,  // 397: concordium.v2.DelegatorInfo.stake:type_name -> concordium.v2.Amount
	30,  // 398: concordium.v2.DelegatorInfo.pending_change:type_name -> concordium.v2.StakePendingChange
	42,  // 399: concordium.v2.DelegatorRewardPeriodInfo.account:type_name -> concordium.v2.AccountAddress
	37,  // 400: concordium.v2.DelegatorRewardPeriodInfo.stake:type_name -> concordium.v2.Amount
	9,   // 401: concordium.v2.Branch.block_hash:type_name -> concordium.v2.BlockHash
	157, // 402: concordium.v2.Branch.children:type_name -> concordium.v2.Branch
	96,  // 403: concordium.v2.ElectionInfo.election_difficulty:type_name -> concordium.v2.ElectionDifficulty
	158, // 404: concordium.v2.ElectionInfo.election_nonce:type_name -> concordium.v2.LeadershipElectionNonce
	264, // 405: concordium.v2.ElectionInfo.baker_election_info:type_name -> concordium.v2.ElectionInfo.Baker
	266, // 406: concordium.v2.BlockSpecialEvent.baking_rewards:type_name -> concordium.v2.BlockSpecialEvent.BakingRewards
	267, // 407: concordium.v2.BlockSpecialEvent.mint:type_name -> concordium.v2.BlockSpecialEvent.Mint
	268, // 408: concordium.v2.BlockSpecialEvent.finalization_rewards:type_name -> concordium.v2.BlockSpecialEvent.FinalizationRewards
	269, // 409: concordium.v2.BlockSpecialEvent.block_reward:type_name -> concordium.v2.BlockSpecialEvent.BlockReward
	270, // 410: concordium.v2.BlockSpecialEvent.payday_foundation_reward:type_name -> concordium.v2.BlockSpecialEvent.PaydayFoundationReward
	271, // 411: concordium.v2.BlockSpecialEvent.payday_account_reward:type_name -> concordium.v2.BlockSpecialEvent.PaydayAccountReward
	272, // 412: concordium.v2.BlockSpecialEvent.block_accrue_reward:type_name -> concordium.v2.BlockSpecialEvent.BlockAccrueReward
	273, // 413: concordium.v2.BlockSpecialEvent.payday_pool_reward:type_name -> concordium.v2.BlockSpecialEvent.PaydayPoolReward
	136, // 414: concordium.v2.PendingUpdate.effective_time:type_name -> concordium.v2.TransactionTime
	105, // 415: concordium.v2.PendingUpdate.root_keys:type_name -> concordium.v2.HigherLevelKeys
	105, // 416: concordium.v2.PendingUpdate.level1_keys:type_name -> concordium.v2.HigherLevelKeys
	107, // 417: concordium.v2.PendingUpdate.level2_keys_cpv_0:type_name -> concordium.v2.AuthorizationsV0
	108, // 418: concordium.v2.PendingUpdate.level2_keys_cpv_1:type_name -> concordium.v2.AuthorizationsV1
	125, // 419: concordium.v2.PendingUpdate.protocol:type_name -> concordium.v2.ProtocolUpdate
	96,  // 420: concordium.v2.PendingUpdate.election_difficulty:type_name -> concordium.v2.ElectionDifficulty
	100, // 421: concordium.v2.PendingUpdate.euro_per_energy:type_name -> concordium.v2.ExchangeRate
	100, // 422: concordium.v2.PendingUpdate.micro_ccd_per_euro:type_name -> concordium.v2.ExchangeRate
	42,  // 423: concordium.v2.PendingUpdate.foundation_account:type_name -> concordium.v2.AccountAddress
	126, // 424: concordium.v2.PendingUpdate.mint_distribution_cpv_0:type_name -> concordium.v2.MintDistributionCpv0
	124, // 425: concordium.v2.PendingUpdate.mint_distribution_cpv_1:type_name -> concordium.v2.MintDistributionCpv1
	127, // 426: concordium.v2.PendingUpdate.transaction_fee_distribution:type_name -> concordium.v2.TransactionFeeDistribution
	128, // 427: concordium.v2.PendingUpdate.gas_rewards:type_name -> concordium.v2.GasRewards
	130, // 428: concordium.v2.PendingUpdate.pool_parameters_cpv_0:type_name -> concordium.v2.BakerStakeThreshold
	122, // 429: concordium.v2.PendingUpdate.pool_parameters_cpv_1:type_name -> concordium.v2.PoolParametersCpv1
	110, // 430: concordium.v2.PendingUpdate.add_anonymity_revoker:type_name -> concordium.v2.ArInfo
	112, // 431: concordium.v2.PendingUpdate.add_identity_provider:type_name -> concordium.v2.IpInfo
	121, // 432: concordium.v2.PendingUpdate.cooldown_parameters:type_name -> concordium.v2.CooldownParametersCpv1
	123, // 433: concordium.v2.PendingUpdate.time_parameters:type_name -> concordium.v2.TimeParametersCpv1
	129, // 434: concordium.v2.PendingUpdate.gas_rewards_cpv_2:type_name -> concordium.v2.GasRewardsCpv2
	97,  // 435: concordium.v2.PendingUpdate.timeout_parameters:type_name -> concordium.v2.TimeoutParameters
	79,  // 436: concordium.v2.PendingUpdate.min_block_time:type_name -> concordium.v2.Duration
	76,  // 437: concordium.v2.PendingUpdate.block_energy_limit:type_name -> concordium.v2.Energy
	98,  // 438: concordium.v2.PendingUpdate.finalization_committee_parameters:type_name -> concordium.v2.FinalizationCommitteeParameters
	35,  // 439: concordium.v2.NextUpdateSequenceNumbers.root_keys:type_name -> concordium.v2.SequenceNumber
	35,  // 440: concordium.v2.NextUpdateSequenceNumbers.level1_keys:type_name -> concordium.v2.SequenceNumber
	35,  // 441: concordium.v2.NextUpdateSequenceNumbers.level2_keys:type_name -> concordium.v2.SequenceNumber
	35,  // 442: concordium.v2.NextUpdateSequenceNumbers.protocol:type_name -> concordium.v2.SequenceNumber
	35,  // 443: concordium.v2.NextUpdateSequenceNumbers.election_difficulty:type_name -> concordium.v2.SequenceNumber
	35,  // 444: concordium.v2.NextUpdateSequenceNumbers.euro_per_energy:type_name -> concordium.v2.SequenceNumber
	35,  // 445: concordium.v2.NextUpdateSequenceNumbers.micro_ccd_per_euro:type_name -> concordium.v2.SequenceNumber
	35,  // 446: concordium.v2.NextUpdateSequenceNumbers.foundation_account:type_name -> concordium.v2.SequenceNumber
	35,  // 447: concordium.v2.NextUpdateSequenceNumbers.mint_distribution:type_name -> concordium.v2.SequenceNumber
	35,  // 448: concordium.v2.NextUpdateSequenceNumbers.transaction_fee_distribution:type_name -> concordium.v2.SequenceNumber
	35,  // 449: concordium.v2.NextUpdateSequenceNumbers.gas_rewards:type_name -> concordium.v2.SequenceNumber
	35,  // 450: concordium.v2.NextUpdateSequenceNumbers.pool_parameters:type_name -> concordium.v2.SequenceNumber
	35,  // 451: concordium.v2.NextUpdateSequenceNumbers.add_anonymity_revoker:type_name -> concordium.v2.SequenceNumber
	35,  // 452: concordium.v2.NextUpdateSequenceNumbers.add_identity_provider:type_name -> concordium.v2.SequenceNumber
	35,  // 453: concordium.v2.NextUpdateSequenceNumbers.cooldown_parameters:type_name -> concordium.v2.SequenceNumber
	35,  // 454: concordium.v2.NextUpdateSequenceNumbers.time_parameters:type_name -> concordium.v2.SequenceNumber
	35,  // 455: concordium.v2.NextUpdateSequenceNumbers.timeout_parameters:type_name -> concordium.v2.SequenceNumber
	35,  // 456: concordium.v2.NextUpdateSequenceNumbers.min_block_time:type_name -> concordium.v2.SequenceNumber
	35,  // 457: concordium.v2.NextUpdateSequenceNumbers.block_energy_limit:type_name -> concordium.v2.SequenceNumber
	35,  // 458: concordium.v2.NextUpdateSequenceNumbers.finalization_committee_parameters:type_name -> concordium.v2.SequenceNumber
	163, // 459: concordium.v2.IpSocketAddress.ip:type_name -> concordium.v2.IpAddress
	164, // 460: concordium.v2.IpSocketAddress.port:type_name -> concordium.v2.Port
	163, // 461: concordium.v2.BannedPeer.ip_address:type_name -> concordium.v2.IpAddress
	167, // 462: concordium.v2.BannedPeers.peers:type_name -> concordium.v2.BannedPeer
	163, // 463: concordium.v2.PeerToBan.ip_address:type_name -> concordium.v2.IpAddress
	275, // 464: concordium.v2.PeersInfo.peers:type_name -> concordium.v2.PeersInfo.Peer
	19,  // 465: concordium.v2.NodeInfo.local_time:type_name -> concordium.v2.Timestamp
	79,  // 466: concordium.v2.NodeInfo.peer_uptime:type_name -> concordium.v2.Duration
	277, // 467: concordium.v2.NodeInfo.network_info:type_name -> concordium.v2.NodeInfo.NetworkInfo
	8,   // 468: concordium.v2.NodeInfo.bootstrapper:type_name -> concordium.v2.Empty
	279, // 469: concordium.v2.NodeInfo.node:type_name -> concordium.v2.NodeInfo.Node
	186, // 470: concordium.v2.SendBlockItemRequest.account_transaction:type_name -> concordium.v2.AccountTransaction
	174, // 471: concordium.v2.SendBlockItemRequest.credential_deployment:type_name -> concordium.v2.CredentialDeployment
	190, // 472: concordium.v2.SendBlockItemRequest.update_instruction:type_name -> concordium.v2.UpdateInstruction
	136, // 473: concordium.v2.CredentialDeployment.message_expiry:type_name -> concordium.v2.TransactionTime
	282, // 474: concordium.v2.SignatureMap.signatures:type_name -> concordium.v2.SignatureMap.SignaturesEntry
	283, // 475: concordium.v2.AccountSignatureMap.signatures:type_name -> concordium.v2.AccountSignatureMap.SignaturesEntry
	284, // 476: concordium.v2.AccountTransactionSignature.signatures:type_name -> concordium.v2.AccountTransactionSignature.SignaturesEntry
	42,  // 477: concordium.v2.AccountTransactionHeader.sender:type_name -> concordium.v2.AccountAddress
	35,  // 478: concordium.v2.AccountTransactionHeader.sequence_number:type_name -> concordium.v2.SequenceNumber
	76,  // 479: concordium.v2.AccountTransactionHeader.energy_amount:type_name -> concordium.v2.Energy
	136, // 480: concordium.v2.AccountTransactionHeader.expiry:type_name -> concordium.v2.TransactionTime
	37,  // 481: concordium.v2.InitContractPayload.amount:type_name -> concordium.v2.Amount
	17,  // 482: concordium.v2.InitContractPayload.module_ref:type_name -> concordium.v2.ModuleRef
	71,  // 483: concordium.v2.InitContractPayload.init_name:type_name -> concordium.v2.InitName
	72,  // 484: concordium.v2.InitContractPayload.parameter:type_name -> concordium.v2.Parameter
	37,  // 485: concordium.v2.UpdateContractPayload.amount:type_name -> concordium.v2.Amount
	64,  // 486: concordium.v2.UpdateContractPayload.address:type_name -> concordium.v2.ContractAddress
	70,  // 487: concordium.v2.UpdateContractPayload.receive_name:type_name -> concordium.v2.ReceiveName
	72,  // 488: concordium.v2.UpdateContractPayload.parameter:type_name -> concordium.v2.Parameter
	37,  // 489: concordium.v2.TransferPayload.amount:type_name -> concordium.v2.Amount
	42,  // 490: concordium.v2.TransferPayload.receiver:type_name -> concordium.v2.AccountAddress
	37,  // 491: concordium.v2.TransferWithMemoPayload.amount:type_name -> concordium.v2.Amount
	42,  // 492: concordium.v2.TransferWithMemoPayload.receiver:type_name -> concordium.v2.AccountAddress
	86,  // 493: concordium.v2.TransferWithMemoPayload.memo:type_name -> concordium.v2.Memo
	18,  // 494: concordium.v2.AccountTransactionPayload.deploy_module:type_name -> concordium.v2.VersionedModuleSource
	180, // 495: concordium.v2.AccountTransactionPayload.init_contract:type_name -> concordium.v2.InitContractPayload
	181, // 496: concordium.v2.AccountTransactionPayload.update_contract:type_name -> concordium.v2.UpdateContractPayload
	182, // 497: concordium.v2.AccountTransactionPayload.transfer:type_name -> concordium.v2.TransferPayload
	183, // 498: concordium.v2.AccountTransactionPayload.transfer_with_memo:type_name -> concordium.v2.TransferWithMemoPayload
	91,  // 499: concordium.v2.AccountTransactionPayload.register_data:type_name -> concordium.v2.RegisteredData
	179, // 500: concordium.v2.PreAccountTransaction.header:type_name -> concordium.v2.AccountTransactionHeader
	184, // 501: concordium.v2.PreAccountTransaction.payload:type_name -> concordium.v2.AccountTransactionPayload
	178, // 502: concordium.v2.AccountTransaction.signature:type_name -> concordium.v2.AccountTransactionSignature
	179, // 503: concordium.v2.AccountTransaction.header:type_name -> concordium.v2.AccountTransactionHeader
	184, // 504: concordium.v2.AccountTransaction.payload:type_name -> concordium.v2.AccountTransactionPayload
	285, // 505: concordium.v2.UpdateInstructionSignature.signatures:type_name -> concordium.v2.UpdateInstructionSignature.SignaturesEntry
	36,  // 506: concordium.v2.UpdateInstructionHeader.sequence_number:type_name -> concordium.v2.UpdateSequenceNumber
	136, // 507: concordium.v2.UpdateInstructionHeader.effective_time:type_name -> concordium.v2.TransactionTime
	136, // 508: concordium.v2.UpdateInstructionHeader.timeout:type_name -> concordium.v2.TransactionTime
	176, // 509: concordium.v2.UpdateInstruction.signatures:type_name -> concordium.v2.SignatureMap
	188, // 510: concordium.v2.UpdateInstruction.header:type_name -> concordium.v2.UpdateInstructionHeader
	189, // 511: concordium.v2.UpdateInstruction.payload:type_name -> concordium.v2.UpdateInstructionPayload
	96,  // 512: concordium.v2.ChainParametersV0.election_difficulty:type_name -> concordium.v2.ElectionDifficulty
	100, // 513: concordium.v2.ChainParametersV0.euro_per_energy:type_name -> concordium.v2.ExchangeRate
	100, // 514: concordium.v2.ChainParametersV0.micro_ccd_per_euro:type_name -> concordium.v2.ExchangeRate
	118, // 515: concordium.v2.ChainParametersV0.baker_cooldown_epochs:type_name -> concordium.v2.Epoch
	192, // 516: concordium.v2.ChainParametersV0.account_creation_limit:type_name -> concordium.v2.CredentialsPerBlockLimit
	126, // 517: concordium.v2.ChainParametersV0.mint_distribution:type_name -> concordium.v2.MintDistributionCpv0
	127, // 518: concordium.v2.ChainParametersV0.transaction_fee_distribution:type_name -> concordium.v2.TransactionFeeDistribution
	128, // 519: concordium.v2.ChainParametersV0.gas_rewards:type_name -> concordium.v2.GasRewards
	42,  // 520: concordium.v2.ChainParametersV0.foundation_account:type_name -> concordium.v2.AccountAddress
	37,  // 521: concordium.v2.ChainParametersV0.minimum_threshold_for_baking:type_name -> concordium.v2.Amount
	105, // 522: concordium.v2.ChainParametersV0.root_keys:type_name -> concordium.v2.HigherLevelKeys
	105, // 523: concordium.v2.ChainParametersV0.level1_keys:type_name -> concordium.v2.HigherLevelKeys
	107, // 524: concordium.v2.ChainParametersV0.level2_keys:type_name -> concordium.v2.AuthorizationsV0
	96,  // 525: concordium.v2.ChainParametersV1.election_difficulty:type_name -> concordium.v2.ElectionDifficulty
	100, // 526: concordium.v2.ChainParametersV1.euro_per_energy:type_name -> concordium.v2.ExchangeRate
	100, // 527: concordium.v2.ChainParametersV1.micro_ccd_per_euro:type_name -> concordium.v2.ExchangeRate
	121, // 528: concordium.v2.ChainParametersV1.cooldown_parameters:type_name -> concordium.v2.CooldownParametersCpv1
	123, // 529: concordium.v2.ChainParametersV1.time_parameters:type_name -> concordium.v2.TimeParametersCpv1
	192, // 530: concordium.v2.ChainParametersV1.account_creation_limit:type_name -> concordium.v2.CredentialsPerBlockLimit
	124, // 531: concordium.v2.ChainParametersV1.mint_distribution:type_name -> concordium.v2.MintDistributionCpv1
	127, // 532: concordium.v2.ChainParametersV1.transaction_fee_distribution:type_name -> concordium.v2.TransactionFeeDistribution
	128, // 533: concordium.v2.ChainParametersV1.gas_rewards:type_name -> concordium.v2.GasRewards
	42,  // 534: concordium.v2.ChainParametersV1.foundation_account:type_name -> concordium.v2.AccountAddress
	122, // 535: concordium.v2.ChainParametersV1.pool_parameters:type_name -> concordium.v2.PoolParametersCpv1
	105, // 536: concordium.v2.ChainParametersV1.root_keys:type_name -> concordium.v2.HigherLevelKeys
	105, // 537: concordium.v2.ChainParametersV1.level1_keys:type_name -> concordium.v2.HigherLevelKeys
	108, // 538: concordium.v2.ChainParametersV1.level2_keys:type_name -> concordium.v2.AuthorizationsV1
	99,  // 539: concordium.v2.ChainParametersV2.consensus_parameters:type_name -> concordium.v2.ConsensusParametersV1
	100, // 540: concordium.v2.ChainParametersV2.euro_per_energy:type_name -> concordium.v2.ExchangeRate
	100, // 541: concordium.v2.ChainParametersV2.micro_ccd_per_euro:type_name -> concordium.v2.ExchangeRate
	121, // 542: concordium.v2.ChainParametersV2.cooldown_parameters:type_name -> concordium.v2.CooldownParametersCpv1
	123, // 543: concordium.v2.ChainParametersV2.time_parameters:type_name -> concordium.v2.TimeParametersCpv1
	192, // 544: concordium.v2.ChainParametersV2.account_creation_limit:type_name -> concordium.v2.CredentialsPerBlockLimit
	124, // 545: concordium.v2.ChainParametersV2.mint_distribution:type_name -> concordium.v2.MintDistributionCpv1
	127, // 546: concordium.v2.ChainParametersV2.transaction_fee_distribution:type_name -> concordium.v2.TransactionFeeDistribution
	129, // 547: concordium.v2.ChainParametersV2.gas_rewards:type_name -> concordium.v2.GasRewardsCpv2
	42,  // 548: concordium.v2.ChainParametersV2.foundation_account:type_name -> concordium.v2.AccountAddress
	122, // 549: concordium.v2.ChainParametersV2.pool_parameters:type_name -> concordium.v2.PoolParametersCpv1
	105, // 550: concordium.v2.ChainParametersV2.root_keys:type_name -> concordium.v2.HigherLevelKeys
	105, // 551: concordium.v2.ChainParametersV2.level1_keys:type_name -> concordium.v2.HigherLevelKeys
	108, // 552: concordium.v2.ChainParametersV2.level2_keys:type_name -> concordium.v2.AuthorizationsV1
	98,  // 553: concordium.v2.ChainParametersV2.finalization_committee_parameters:type_name -> concordium.v2.FinalizationCommitteeParameters
	193, // 554: concordium.v2.ChainParameters.v0:type_name -> concordium.v2.ChainParametersV0
	194, // 555: concordium.v2.ChainParameters.v1:type_name -> concordium.v2.ChainParametersV1
	195, // 556: concordium.v2.ChainParameters.v2:type_name -> concordium.v2.ChainParametersV2
	15,  // 557: concordium.v2.FinalizationSummaryParty.baker:type_name -> concordium.v2.BakerId
	9,   // 558: concordium.v2.FinalizationSummary.block:type_name -> concordium.v2.BlockHash
	198, // 559: concordium.v2.FinalizationSummary.index:type_name -> concordium.v2.FinalizationIndex
	14,  // 560: concordium.v2.FinalizationSummary.delay:type_name -> concordium.v2.BlockHeight
	197, // 561: concordium.v2.FinalizationSummary.finalizers:type_name -> concordium.v2.FinalizationSummaryParty
	8,   // 562: concordium.v2.BlockFinalizationSummary.none:type_name -> concordium.v2.Empty
	199, // 563: concordium.v2.BlockFinalizationSummary.record:type_name -> concordium.v2.FinalizationSummary
	11,  // 564: concordium.v2.BlockItem.hash:type_name -> concordium.v2.TransactionHash
	186, // 565: concordium.v2.BlockItem.account_transaction:type_name -> concordium.v2.AccountTransaction
	174, // 566: concordium.v2.BlockItem.credential_deployment:type_name -> concordium.v2.CredentialDeployment
	190, // 567: concordium.v2.BlockItem.update_instruction:type_name -> concordium.v2.UpdateInstruction
	37,  // 568: concordium.v2.StakePendingChange.Reduce.new_stake:type_name -> concordium.v2.Amount
	19,  // 569: concordium.v2.StakePendingChange.Reduce.effective_time:type_name -> concordium.v2.Timestamp
	37,  // 570: concordium.v2.AccountStakingInfo.Baker.staked_amount:type_name -> concordium.v2.Amount
	29,  // 571: concordium.v2.AccountStakingInfo.Baker.baker_info:type_name -> concordium.v2.BakerInfo
	30,  // 572: concordium.v2.AccountStakingInfo.Baker.pending_change:type_name -> concordium.v2.StakePendingChange
	33,  // 573: concordium.v2.AccountStakingInfo.Baker.pool_info:type_name -> concordium.v2.BakerPoolInfo
	37,  // 574: concordium.v2.AccountStakingInfo.Delegator.staked_amount:type_name -> concordium.v2.Amount
	25,  // 575: concordium.v2.AccountStakingInfo.Delegator.target:type_name -> concordium.v2.DelegationTarget
	30,  // 576: concordium.v2.AccountStakingInfo.Delegator.pending_change:type_name -> concordium.v2.StakePendingChange
	44,  // 577: concordium.v2.CredentialPublicKeys.KeysEntry.value:type_name -> concordium.v2.AccountVerifyKey
	53,  // 578: concordium.v2.CredentialCommitments.AttributesEntry.value:type_name -> concordium.v2.Commitment
	51,  // 579: concordium.v2.NormalCredentialValues.ArDataEntry.value:type_name -> concordium.v2.ChainArData
	56,  // 580: concordium.v2.AccountInfo.CredsEntry.value:type_name -> concordium.v2.AccountCredential
	139, // 581: concordium.v2.BlockHashInput.RelativeHeight.genesis_index:type_name -> concordium.v2.GenesisIndex
	14,  // 582: concordium.v2.BlockHashInput.RelativeHeight.height:type_name -> concordium.v2.BlockHeight
	73,  // 583: concordium.v2.InstanceInfo.V0.model:type_name -> concordium.v2.ContractStateV0
	42,  // 584: concordium.v2.InstanceInfo.V0.owner:type_name -> concordium.v2.AccountAddress
	37,  // 585: concordium.v2.InstanceInfo.V0.amount:type_name -> concordium.v2.Amount
	70,  // 586: concordium.v2.InstanceInfo.V0.methods:type_name -> concordium.v2.ReceiveName
	71,  // 587: concordium.v2.InstanceInfo.V0.name:type_name -> concordium.v2.InitName
	17,  // 588: concordium.v2.InstanceInfo.V0.source_module:type_name -> concordium.v2.ModuleRef
	42,  // 589: concordium.v2.InstanceInfo.V1.owner:type_name -> concordium.v2.AccountAddress
	37,  // 590: concordium.v2.InstanceInfo.V1.amount:type_name -> concordium.v2.Amount
	70,  // 591: concordium.v2.InstanceInfo.V1.methods:type_name -> concordium.v2.ReceiveName
	71,  // 592: concordium.v2.InstanceInfo.V1.name:type_name -> concordium.v2.InitName
	17,  // 593: concordium.v2.InstanceInfo.V1.source_module:type_name -> concordium.v2.ModuleRef
	75,  // 594: concordium.v2.BlockItemStatus.Committed.outcomes:type_name -> concordium.v2.BlockItemSummaryInBlock
	75,  // 595: concordium.v2.BlockItemStatus.Finalized.outcome:type_name -> concordium.v2.BlockItemSummaryInBlock
	17,  // 596: concordium.v2.RejectReason.InvalidInitMethod.module_ref:type_name -> concordium.v2.ModuleRef
	71,  // 597: concordium.v2.RejectReason.InvalidInitMethod.init_name:type_name -> concordium.v2.InitName
	17,  // 598: concordium.v2.RejectReason.InvalidReceiveMethod.module_ref:type_name -> concordium.v2.ModuleRef
	70,  // 599: concordium.v2.RejectReason.InvalidReceiveMethod.receive_name:type_name -> concordium.v2.ReceiveName
	43,  // 600: concordium.v2.RejectReason.AmountTooLarge.address:type_name -> concordium.v2.Address
	37,  // 601: concordium.v2.RejectReason.AmountTooLarge.amount:type_name -> concordium.v2.Amount
	64,  // 602: concordium.v2.RejectReason.RejectedReceive.contract_address:type_name -> concordium.v2.ContractAddress
	70,  // 603: concordium.v2.RejectReason.RejectedReceive.receive_name:type_name -> concordium.v2.ReceiveName
	72,  // 604: concordium.v2.RejectReason.RejectedReceive.parameter:type_name -> concordium.v2.Parameter
	46,  // 605: concordium.v2.RejectReason.DuplicateCredIds.ids:type_name -> concordium.v2.CredentialRegistrationId
	46,  // 606: concordium.v2.RejectReason.NonExistentCredIds.ids:type_name -> concordium.v2.CredentialRegistrationId
	64,  // 607: concordium.v2.ContractTraceElement.Transferred.sender:type_name -> concordium.v2.ContractAddress
	37,  // 608: concordium.v2.ContractTraceElement.Transferred.amount:type_name -> concordium.v2.Amount
	42,  // 609: concordium.v2.ContractTraceElement.Transferred.receiver:type_name -> concordium.v2.AccountAddress
	64,  // 610: concordium.v2.ContractTraceElement.Interrupted.address:type_name -> concordium.v2.ContractAddress
	82,  // 611: concordium.v2.ContractTraceElement.Interrupted.events:type_name -> concordium.v2.ContractEvent
	64,  // 612: concordium.v2.ContractTraceElement.Resumed.address:type_name -> concordium.v2.ContractAddress
	64,  // 613: concordium.v2.ContractTraceElement.Upgraded.address:type_name -> concordium.v2.ContractAddress
	17,  // 614: concordium.v2.ContractTraceElement.Upgraded.from:type_name -> concordium.v2.ModuleRef
	17,  // 615: concordium.v2.ContractTraceElement.Upgraded.to:type_name -> concordium.v2.ModuleRef
	85,  // 616: concordium.v2.BakerEvent.BakerAdded.keys_event:type_name -> concordium.v2.BakerKeysEvent
	37,  // 617: concordium.v2.BakerEvent.BakerAdded.stake:type_name -> concordium.v2.Amount
	15,  // 618: concordium.v2.BakerEvent.BakerStakeIncreased.baker_id:type_name -> concordium.v2.BakerId
	37,  // 619: concordium.v2.BakerEvent.BakerStakeIncreased.new_stake:type_name -> concordium.v2.Amount
	15,  // 620: concordium.v2.BakerEvent.BakerStakeDecreased.baker_id:type_name -> concordium.v2.BakerId
	37,  // 621: concordium.v2.BakerEvent.BakerStakeDecreased.new_stake:type_name -> concordium.v2.Amount
	15,  // 622: concordium.v2.BakerEvent.BakerRestakeEarningsUpdated.baker_id:type_name -> concordium.v2.BakerId
	15,  // 623: concordium.v2.BakerEvent.BakerSetOpenStatus.baker_id:type_name -> concordium.v2.BakerId
	0,   // 624: concordium.v2.BakerEvent.BakerSetOpenStatus.open_status:type_name -> concordium.v2.OpenStatus
	15,  // 625: concordium.v2.BakerEvent.BakerSetMetadataUrl.baker_id:type_name -> concordium.v2.BakerId
	15,  // 626: concordium.v2.BakerEvent.BakerSetTransactionFeeCommission.baker_id:type_name -> concordium.v2.BakerId
	31,  // 627: concordium.v2.BakerEvent.BakerSetTransactionFeeCommission.transaction_fee_commission:type_name -> concordium.v2.AmountFraction
	15,  // 628: concordium.v2.BakerEvent.BakerSetBakingRewardCommission.baker_id:type_name -> concordium.v2.BakerId
	31,  // 629: concordium.v2.BakerEvent.BakerSetBakingRewardCommission.baking_reward_commission:type_name -> concordium.v2.AmountFraction
	15,  // 630: concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission.baker_id:type_name -> concordium.v2.BakerId
	31,  // 631: concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission.finalization_reward_commission:type_name -> concordium.v2.AmountFraction
	93,  // 632: concordium.v2.DelegationEvent.DelegationStakeIncreased.delegator_id:type_name -> concordium.v2.DelegatorId
	37,  // 633: concordium.v2.DelegationEvent.DelegationStakeIncreased.new_stake:type_name -> concordium.v2.Amount
	93,  // 634: concordium.v2.DelegationEvent.DelegationStakeDecreased.delegator_id:type_name -> concordium.v2.DelegatorId
	37,  // 635: concordium.v2.DelegationEvent.DelegationStakeDecreased.new_stake:type_name -> concordium.v2.Amount
	93,  // 636: concordium.v2.DelegationEvent.DelegationSetRestakeEarnings.delegator_id:type_name -> concordium.v2.DelegatorId
	93,  // 637: concordium.v2.DelegationEvent.DelegationSetDelegationTarget.delegator_id:type_name -> concordium.v2.DelegatorId
	25,  // 638: concordium.v2.DelegationEvent.DelegationSetDelegationTarget.delegation_target:type_name -> concordium.v2.DelegationTarget
	4,   // 639: concordium.v2.AccountTransactionEffects.None.transaction_type:type_name -> concordium.v2.TransactionType
	80,  // 640: concordium.v2.AccountTransactionEffects.None.reject_reason:type_name -> concordium.v2.RejectReason
	84,  // 641: concordium.v2.AccountTransactionEffects.ContractUpdateIssued.effects:type_name -> concordium.v2.ContractTraceElement
	37,  // 642: concordium.v2.AccountTransactionEffects.AccountTransfer.amount:type_name -> concordium.v2.Amount
	42,  // 643: concordium.v2.AccountTransactionEffects.AccountTransfer.receiver:type_name -> concordium.v2.AccountAddress
	86,  // 644: concordium.v2.AccountTransactionEffects.AccountTransfer.memo:type_name -> concordium.v2.Memo
	87,  // 645: concordium.v2.AccountTransactionEffects.BakerStakeUpdated.update:type_name -> concordium.v2.BakerStakeUpdatedData
	88,  // 646: concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred.removed:type_name -> concordium.v2.EncryptedAmountRemovedEvent
	89,  // 647: concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred.added:type_name -> concordium.v2.NewEncryptedAmountEvent
	86,  // 648: concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred.memo:type_name -> concordium.v2.Memo
	88,  // 649: concordium.v2.AccountTransactionEffects.TransferredToPublic.removed:type_name -> concordium.v2.EncryptedAmountRemovedEvent
	37,  // 650: concordium.v2.AccountTransactionEffects.TransferredToPublic.amount:type_name -> concordium.v2.Amount
	42,  // 651: concordium.v2.AccountTransactionEffects.TransferredWithSchedule.receiver:type_name -> concordium.v2.AccountAddress
	21,  // 652: concordium.v2.AccountTransactionEffects.TransferredWithSchedule.amount:type_name -> concordium.v2.NewRelease
	86,  // 653: concordium.v2.AccountTransactionEffects.TransferredWithSchedule.memo:type_name -> concordium.v2.Memo
	46,  // 654: concordium.v2.AccountTransactionEffects.CredentialsUpdated.new_cred_ids:type_name -> concordium.v2.CredentialRegistrationId
	46,  // 655: concordium.v2.AccountTransactionEffects.CredentialsUpdated.removed_cred_ids:type_name -> concordium.v2.CredentialRegistrationId
	40,  // 656: concordium.v2.AccountTransactionEffects.CredentialsUpdated.new_threshold:type_name -> concordium.v2.AccountThreshold
	92,  // 657: concordium.v2.AccountTransactionEffects.BakerConfigured.events:type_name -> concordium.v2.BakerEvent
	94,  // 658: concordium.v2.AccountTransactionEffects.DelegationConfigured.events:type_name -> concordium.v2.DelegationEvent
	37,  // 659: concordium.v2.PoolPendingChange.Reduce.reduced_equity_capital:type_name -> concordium.v2.Amount
	19,  // 660: concordium.v2.PoolPendingChange.Reduce.effective_time:type_name -> concordium.v2.Timestamp
	19,  // 661: concordium.v2.PoolPendingChange.Remove.effective_time:type_name -> concordium.v2.Timestamp
	13,  // 662: concordium.v2.BlocksAtHeightRequest.Absolute.height:type_name -> concordium.v2.AbsoluteBlockHeight
	139, // 663: concordium.v2.BlocksAtHeightRequest.Relative.genesis_index:type_name -> concordium.v2.GenesisIndex
	14,  // 664: concordium.v2.BlocksAtHeightRequest.Relative.height:type_name -> concordium.v2.BlockHeight
	37,  // 665: concordium.v2.TokenomicsInfo.V0.total_amount:type_name -> concordium.v2.Amount
	37,  // 666: concordium.v2.TokenomicsInfo.V0.total_encrypted_amount:type_name -> concordium.v2.Amount
	37,  // 667: concordium.v2.TokenomicsInfo.V0.baking_reward_account:type_name -> concordium.v2.Amount
	37,  // 668: concordium.v2.TokenomicsInfo.V0.finalization_reward_account:type_name -> concordium.v2.Amount
	37,  // 669: concordium.v2.TokenomicsInfo.V0.gas_account:type_name -> concordium.v2.Amount
	5,   // 670: concordium.v2.TokenomicsInfo.V0.protocol_version:type_name -> concordium.v2.ProtocolVersion
	37,  // 671: concordium.v2.TokenomicsInfo.V1.total_amount:type_name -> concordium.v2.Amount
	37,  // 672: concordium.v2.TokenomicsInfo.V1.total_encrypted_amount:type_name -> concordium.v2.Amount
	37,  // 673: concordium.v2.TokenomicsInfo.V1.baking_reward_account:type_name -> concordium.v2.Amount
	37,  // 674: concordium.v2.TokenomicsInfo.V1.finalization_reward_account:type_name -> concordium.v2.Amount
	37,  // 675: concordium.v2.TokenomicsInfo.V1.gas_account:type_name -> concordium.v2.Amount
	37,  // 676: concordium.v2.TokenomicsInfo.V1.foundation_transaction_rewards:type_name -> concordium.v2.Amount
	19,  // 677: concordium.v2.TokenomicsInfo.V1.next_payday_time:type_name -> concordium.v2.Timestamp
	120, // 678: concordium.v2.TokenomicsInfo.V1.next_payday_mint_rate:type_name -> concordium.v2.MintRate
	37,  // 679: concordium.v2.TokenomicsInfo.V1.total_staked_capital:type_name -> concordium.v2.Amount
	5,   // 680: concordium.v2.TokenomicsInfo.V1.protocol_version:type_name -> concordium.v2.ProtocolVersion
	76,  // 681: concordium.v2.InvokeInstanceResponse.Failure.used_energy:type_name -> concordium.v2.Energy
	80,  // 682: concordium.v2.InvokeInstanceResponse.Failure.reason:type_name -> concordium.v2.RejectReason
	76,  // 683: concordium.v2.InvokeInstanceResponse.Success.used_energy:type_name -> concordium.v2.Energy
	84,  // 684: concordium.v2.InvokeInstanceResponse.Success.effects:type_name -> concordium.v2.ContractTraceElement
	15,  // 685: concordium.v2.ElectionInfo.Baker.baker:type_name -> concordium.v2.BakerId
	42,  // 686: concordium.v2.ElectionInfo.Baker.account:type_name -> concordium.v2.AccountAddress
	274, // 687: concordium.v2.BlockSpecialEvent.AccountAmounts.entries:type_name -> concordium.v2.BlockSpecialEvent.AccountAmounts.Entry
	265, // 688: concordium.v2.BlockSpecialEvent.BakingRewards.baker_rewards:type_name -> concordium.v2.BlockSpecialEvent.AccountAmounts
	37,  // 689: concordium.v2.BlockSpecialEvent.BakingRewards.remainder:type_name -> concordium.v2.Amount
	37,  // 690: concordium.v2.BlockSpecialEvent.Mint.mint_baking_reward:type_name -> concordium.v2.Amount
	37,  // 691: concordium.v2.BlockSpecialEvent.Mint.mint_finalization_reward:type_name -> concordium.v2.Amount
	37,  // 692: concordium.v2.BlockSpecialEvent.Mint.mint_platform_development_charge:type_name -> concordium.v2.Amount
	42,  // 693: concordium.v2.BlockSpecialEvent.Mint.foundation_account:type_name -> concordium.v2.AccountAddress
	265, // 694: concordium.v2.BlockSpecialEvent.FinalizationRewards.finalization_rewards:type_name -> concordium.v2.BlockSpecialEvent.AccountAmounts
	37,  // 695: concordium.v2.BlockSpecialEvent.FinalizationRewards.remainder:type_name -> concordium.v2.Amount
	37,  // 696: concordium.v2.BlockSpecialEvent.BlockReward.transaction_fees:type_name -> concordium.v2.Amount
	37,  // 697: concordium.v2.BlockSpecialEvent.BlockReward.old_gas_account:type_name -> concordium.v2.Amount
	37,  // 698: concordium.v2.BlockSpecialEvent.BlockReward.new_gas_account:type_name -> concordium.v2.Amount
	37,  // 699: concordium.v2.BlockSpecialEvent.BlockReward.baker_reward:type_name -> concordium.v2.Amount
	37,  // 700: concordium.v2.BlockSpecialEvent.BlockReward.foundation_charge:type_name -> concordium.v2.Amount
	42,  // 701: concordium.v2.BlockSpecialEvent.BlockReward.baker:type_name -> concordium.v2.AccountAddress
	42,  // 702: concordium.v2.BlockSpecialEvent.BlockReward.foundation_account:type_name -> concordium.v2.AccountAddress
	42,  // 703: concordium.v2.BlockSpecialEvent.PaydayFoundationReward.foundation_account:type_name -> concordium.v2.AccountAddress
	37,  // 704: concordium.v2.BlockSpecialEvent.PaydayFoundationReward.development_charge:type_name -> concordium.v2.Amount
	42,  // 705: concordium.v2.BlockSpecialEvent.PaydayAccountReward.account:type_name -> concordium.v2.AccountAddress
	37,  // 706: concordium.v2.BlockSpecialEvent.PaydayAccountReward.transaction_fees:type_name -> concordium.v2.Amount
	37,  // 707: concordium.v2.BlockSpecialEvent.PaydayAccountReward.baker_reward:type_name -> concordium.v2.Amount
	37,  // 708: concordium.v2.BlockSpecialEvent.PaydayAccountReward.finalization_reward:type_name -> concordium.v2.Amount
	37,  // 709: concordium.v2.BlockSpecialEvent.BlockAccrueReward.transaction_fees:type_name -> concordium.v2.Amount
	37,  // 710: concordium.v2.BlockSpecialEvent.BlockAccrueReward.old_gas_account:type_name -> concordium.v2.Amount
	37,  // 711: concordium.v2.BlockSpecialEvent.BlockAccrueReward.new_gas_account:type_name -> concordium.v2.Amount
	37,  // 712: concordium.v2.BlockSpecialEvent.BlockAccrueReward.baker_reward:type_name -> concordium.v2.Amount
	37,  // 713: concordium.v2.BlockSpecialEvent.BlockAccrueReward.passive_reward:type_name -> concordium.v2.Amount
	37,  // 714: concordium.v2.BlockSpecialEvent.BlockAccrueReward.foundation_charge:type_name -> concordium.v2.Amount
	15,  // 715: concordium.v2.BlockSpecialEvent.BlockAccrueReward.baker:type_name -> concordium.v2.BakerId
	15,  // 716: concordium.v2.BlockSpecialEvent.PaydayPoolReward.pool_owner:type_name -> concordium.v2.BakerId
	37,  // 717: concordium.v2.BlockSpecialEvent.PaydayPoolReward.transaction_fees:type_name -> concordium.v2.Amount
	37,  // 718: concordium.v2.BlockSpecialEvent.PaydayPoolReward.baker_reward:type_name -> concordium.v2.Amount
	37,  // 719: concordium.v2.BlockSpecialEvent.PaydayPoolReward.finalization_reward:type_name -> concordium.v2.Amount
	42,  // 720: concordium.v2.BlockSpecialEvent.AccountAmounts.Entry.account:type_name -> concordium.v2.AccountAddress
	37,  // 721: concordium.v2.BlockSpecialEvent.AccountAmounts.Entry.amount:type_name -> concordium.v2.Amount
	166, // 722: concordium.v2.PeersInfo.Peer.peer_id:type_name -> concordium.v2.PeerId
	165, // 723: concordium.v2.PeersInfo.Peer.socket_address:type_name -> concordium.v2.IpSocketAddress
	276, // 724: concordium.v2.PeersInfo.Peer.network_stats:type_name -> concordium.v2.PeersInfo.Peer.NetworkStats
	8,   // 725: concordium.v2.PeersInfo.Peer.bootstrapper:type_name -> concordium.v2.Empty
	6,   // 726: concordium.v2.PeersInfo.Peer.node_catchup_status:type_name -> concordium.v2.PeersInfo.Peer.CatchupStatus
	166, // 727: concordium.v2.NodeInfo.NetworkInfo.node_id:type_name -> concordium.v2.PeerId
	15,  // 728: concordium.v2.NodeInfo.BakerConsensusInfo.baker_id:type_name -> concordium.v2.BakerId
	7,   // 729: concordium.v2.NodeInfo.BakerConsensusInfo.passive_committee_info:type_name -> concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo
	280, // 730: concordium.v2.NodeInfo.BakerConsensusInfo.active_baker_committee_info:type_name -> concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo
	281, // 731: concordium.v2.NodeInfo.BakerConsensusInfo.active_finalizer_committee_info:type_name -> concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo
	8,   // 732: concordium.v2.NodeInfo.Node.not_running:type_name -> concordium.v2.Empty
	8,   // 733: concordium.v2.NodeInfo.Node.passive:type_name -> concordium.v2.Empty
	278, // 734: concordium.v2.NodeInfo.Node.active:type_name -> concordium.v2.NodeInfo.BakerConsensusInfo
	175, // 735: concordium.v2.SignatureMap.SignaturesEntry.value:type_name -> concordium.v2.Signature
	175, // 736: concordium.v2.AccountSignatureMap.SignaturesEntry.value:type_name -> concordium.v2.Signature
	177, // 737: concordium.v2.AccountTransactionSignature.SignaturesEntry.value:type_name -> concordium.v2.AccountSignatureMap
	175, // 738: concordium.v2.UpdateInstructionSignature.SignaturesEntry.value:type_name -> concordium.v2.Signature
	739, // [739:739] is the sub-list for method output_type
	739, // [739:739] is the sub-list for method input_type
	739, // [739:739] is the sub-list for extension type_name
	739, // [739:739] is the sub-list for extension extendee
	0,   // [0:739] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sha256Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbsoluteBlockHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedModuleSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerElectionVerifyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerSignatureVerifyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerAggregationVerifyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakePendingChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountFraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommissionRates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerPoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStakingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSequenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountVerifyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialPublicKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialRegistrationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityProviderIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YearMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialCredentialValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainArData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialCommitments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalCredentialValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHashInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountIdentifierInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizedBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AncestorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStateKVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStateLookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStateValueAtKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStateV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockItemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockItemSummaryInBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Energy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextAccountSequenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInitializedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractTraceElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerKeysEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerStakeUpdatedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedAmountRemovedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEncryptedAmountEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedSelfAmountAddedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionDifficulty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizationCommitteeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusParametersV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKeysThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKeysIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HigherLevelKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationsV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Description); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationSeconds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InclusiveRangeAmountFraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommissionRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapitalBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeverageFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardPeriodLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CooldownParametersCpv1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolParametersCpv1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeParametersCpv1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintDistributionCpv1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintDistributionCpv0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionFeeDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasRewardsCpv2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerStakeThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Level1Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCreationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockItemSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrivedBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptographicParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolPendingChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolCurrentPaydayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveDelegationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksAtHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksAtHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenomicsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoolDelegatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorRewardPeriodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadershipElectionNonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextUpdateSequenceNumbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpSocketAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannedPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannedPeers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerToBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBlockItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSignatureMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitContractPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferWithMemoPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreAccountTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstructionSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstructionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstructionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionSignHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialsPerBlockLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainParametersV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainParametersV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainParametersV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizationSummaryParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizationIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizationSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockFinalizationSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedModuleSource_ModuleSourceV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedModuleSource_ModuleSourceV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakePendingChange_Reduce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStakingInfo_Baker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStakingInfo_Delegator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHashInput_RelativeHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo_V0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockItemStatus_Committed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockItemStatus_Finalized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectReason_InvalidInitMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectReason_InvalidReceiveMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectReason_AmountTooLarge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectReason_RejectedInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectReason_RejectedReceive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectReason_DuplicateCredIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectReason_NonExistentCredIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractTraceElement_Transferred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractTraceElement_Interrupted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractTraceElement_Resumed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractTraceElement_Upgraded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerStakeIncreased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerStakeDecreased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerRestakeEarningsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerSetOpenStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerSetMetadataUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerSetTransactionFeeCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerSetBakingRewardCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakerEvent_BakerSetFinalizationRewardCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationEvent_DelegationStakeIncreased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationEvent_DelegationStakeDecreased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationEvent_DelegationSetRestakeEarnings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationEvent_DelegationSetDelegationTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_None); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_ContractUpdateIssued); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_AccountTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_BakerStakeUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_EncryptedAmountTransferred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_TransferredToPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_TransferredWithSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_CredentialsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_BakerConfigured); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransactionEffects_DelegationConfigured); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArInfo_ArIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArInfo_ArPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpInfo_IpVerifyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpInfo_IpCdiVerifyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockItemSummary_TransactionIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolPendingChange_Reduce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolPendingChange_Remove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksAtHeightRequest_Absolute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksAtHeightRequest_Relative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenomicsInfo_V0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenomicsInfo_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeInstanceResponse_Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeInstanceResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionInfo_Baker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_AccountAmounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_BakingRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_Mint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_FinalizationRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_BlockReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_PaydayFoundationReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_PaydayAccountReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_BlockAccrueReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_PaydayPoolReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSpecialEvent_AccountAmounts_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersInfo_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersInfo_Peer_NetworkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo_NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo_BakerConsensusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*VersionedModuleSource_V0)(nil),
		(*VersionedModuleSource_V1)(nil),
	}
	file_types_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*DelegationTarget_Passive)(nil),
		(*DelegationTarget_Baker)(nil),
	}
	file_types_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*StakePendingChange_Reduce_)(nil),
		(*StakePendingChange_Remove)(nil),
	}
	file_types_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*AccountStakingInfo_Baker_)(nil),
		(*AccountStakingInfo_Delegator_)(nil),
	}
	file_types_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*Address_Account)(nil),
		(*Address_Contract)(nil),
	}
	file_types_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*AccountVerifyKey_Ed25519Key)(nil),
	}
	file_types_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*AccountCredential_Initial)(nil),
		(*AccountCredential_Normal)(nil),
	}
	file_types_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*BlockHashInput_Best)(nil),
		(*BlockHashInput_LastFinal)(nil),
		(*BlockHashInput_Given)(nil),
		(*BlockHashInput_AbsoluteHeight)(nil),
		(*BlockHashInput_RelativeHeight_)(nil),
	}
	file_types_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*AccountIdentifierInput_Address)(nil),
		(*AccountIdentifierInput_CredId)(nil),
		(*AccountIdentifierInput_AccountIndex)(nil),
	}
	file_types_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*InstanceInfo_V0_)(nil),
		(*InstanceInfo_V1_)(nil),
	}
	file_types_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*BlockItemStatus_Received)(nil),
		(*BlockItemStatus_Committed_)(nil),
		(*BlockItemStatus_Finalized_)(nil),
	}
	file_types_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*RejectReason_ModuleNotWf)(nil),
		(*RejectReason_ModuleHashAlreadyExists)(nil),
		(*RejectReason_InvalidAccountReference)(nil),
		(*RejectReason_InvalidInitMethod_)(nil),
		(*RejectReason_InvalidReceiveMethod_)(nil),
		(*RejectReason_InvalidModuleReference)(nil),
		(*RejectReason_InvalidContractAddress)(nil),
		(*RejectReason_RuntimeFailure)(nil),
		(*RejectReason_AmountTooLarge_)(nil),
		(*RejectReason_SerializationFailure)(nil),
		(*RejectReason_OutOfEnergy)(nil),
		(*RejectReason_RejectedInit_)(nil),
		(*RejectReason_RejectedReceive_)(nil),
		(*RejectReason_InvalidProof)(nil),
		(*RejectReason_AlreadyABaker)(nil),
		(*RejectReason_NotABaker)(nil),
		(*RejectReason_InsufficientBalanceForBakerStake)(nil),
		(*RejectReason_StakeUnderMinimumThresholdForBaking)(nil),
		(*RejectReason_BakerInCooldown)(nil),
		(*RejectReason_DuplicateAggregationKey)(nil),
		(*RejectReason_NonExistentCredentialId)(nil),
		(*RejectReason_KeyIndexAlreadyInUse)(nil),
		(*RejectReason_InvalidAccountThreshold)(nil),
		(*RejectReason_InvalidCredentialKeySignThreshold)(nil),
		(*RejectReason_InvalidEncryptedAmountTransferProof)(nil),
		(*RejectReason_InvalidTransferToPublicProof)(nil),
		(*RejectReason_EncryptedAmountSelfTransfer)(nil),
		(*RejectReason_InvalidIndexOnEncryptedTransfer)(nil),
		(*RejectReason_ZeroScheduledAmount)(nil),
		(*RejectReason_NonIncreasingSchedule)(nil),
		(*RejectReason_FirstScheduledReleaseExpired)(nil),
		(*RejectReason_ScheduledSelfTransfer)(nil),
		(*RejectReason_InvalidCredentials)(nil),
		(*RejectReason_DuplicateCredIds_)(nil),
		(*RejectReason_NonExistentCredIds_)(nil),
		(*RejectReason_RemoveFirstCredential)(nil),
		(*RejectReason_CredentialHolderDidNotSign)(nil),
		(*RejectReason_NotAllowedMultipleCredentials)(nil),
		(*RejectReason_NotAllowedToReceiveEncrypted)(nil),
		(*RejectReason_NotAllowedToHandleEncrypted)(nil),
		(*RejectReason_MissingBakerAddParameters)(nil),
		(*RejectReason_FinalizationRewardCommissionNotInRange)(nil),
		(*RejectReason_BakingRewardCommissionNotInRange)(nil),
		(*RejectReason_TransactionFeeCommissionNotInRange)(nil),
		(*RejectReason_AlreadyADelegator)(nil),
		(*RejectReason_InsufficientBalanceForDelegationStake)(nil),
		(*RejectReason_MissingDelegationAddParameters)(nil),
		(*RejectReason_InsufficientDelegationStake)(nil),
		(*RejectReason_DelegatorInCooldown)(nil),
		(*RejectReason_NotADelegator)(nil),
		(*RejectReason_DelegationTargetNotABaker)(nil),
		(*RejectReason_StakeOverMaximumThresholdForPool)(nil),
		(*RejectReason_PoolWouldBecomeOverDelegated)(nil),
		(*RejectReason_PoolClosed)(nil),
	}
	file_types_proto_msgTypes[76].OneofWrappers = []interface{}{
		(*ContractTraceElement_Updated)(nil),
		(*ContractTraceElement_Transferred_)(nil),
		(*ContractTraceElement_Interrupted_)(nil),
		(*ContractTraceElement_Resumed_)(nil),
		(*ContractTraceElement_Upgraded_)(nil),
	}
	file_types_proto_msgTypes[84].OneofWrappers = []interface{}{
		(*BakerEvent_BakerAdded_)(nil),
		(*BakerEvent_BakerRemoved)(nil),
		(*BakerEvent_BakerStakeIncreased_)(nil),
		(*BakerEvent_BakerStakeDecreased_)(nil),
		(*BakerEvent_BakerRestakeEarningsUpdated_)(nil),
		(*BakerEvent_BakerKeysUpdated)(nil),
		(*BakerEvent_BakerSetOpenStatus_)(nil),
		(*BakerEvent_BakerSetMetadataUrl_)(nil),
		(*BakerEvent_BakerSetTransactionFeeCommission_)(nil),
		(*BakerEvent_BakerSetBakingRewardCommission_)(nil),
		(*BakerEvent_BakerSetFinalizationRewardCommission_)(nil),
	}
	file_types_proto_msgTypes[86].OneofWrappers = []interface{}{
		(*DelegationEvent_DelegationStakeIncreased_)(nil),
		(*DelegationEvent_DelegationStakeDecreased_)(nil),
		(*DelegationEvent_DelegationSetRestakeEarnings_)(nil),
		(*DelegationEvent_DelegationSetDelegationTarget_)(nil),
		(*DelegationEvent_DelegationAdded)(nil),
		(*DelegationEvent_DelegationRemoved)(nil),
	}
	file_types_proto_msgTypes[87].OneofWrappers = []interface{}{
		(*AccountTransactionEffects_None_)(nil),
		(*AccountTransactionEffects_ModuleDeployed)(nil),
		(*AccountTransactionEffects_ContractInitialized)(nil),
		(*AccountTransactionEffects_ContractUpdateIssued_)(nil),
		(*AccountTransactionEffects_AccountTransfer_)(nil),
		(*AccountTransactionEffects_BakerAdded)(nil),
		(*AccountTransactionEffects_BakerRemoved)(nil),
		(*AccountTransactionEffects_BakerStakeUpdated_)(nil),
		(*AccountTransactionEffects_BakerRestakeEarningsUpdated)(nil),
		(*AccountTransactionEffects_BakerKeysUpdated)(nil),
		(*AccountTransactionEffects_EncryptedAmountTransferred_)(nil),
		(*AccountTransactionEffects_TransferredToEncrypted)(nil),
		(*AccountTransactionEffects_TransferredToPublic_)(nil),
		(*AccountTransactionEffects_TransferredWithSchedule_)(nil),
		(*AccountTransactionEffects_CredentialKeysUpdated)(nil),
		(*AccountTransactionEffects_CredentialsUpdated_)(nil),
		(*AccountTransactionEffects_DataRegistered)(nil),
		(*AccountTransactionEffects_BakerConfigured_)(nil),
		(*AccountTransactionEffects_DelegationConfigured_)(nil),
	}
	file_types_proto_msgTypes[123].OneofWrappers = []interface{}{
		(*RootUpdate_RootKeysUpdate)(nil),
		(*RootUpdate_Level_1KeysUpdate)(nil),
		(*RootUpdate_Level_2KeysUpdateV0)(nil),
		(*RootUpdate_Level_2KeysUpdateV1)(nil),
	}
	file_types_proto_msgTypes[124].OneofWrappers = []interface{}{
		(*Level1Update_Level_1KeysUpdate)(nil),
		(*Level1Update_Level_2KeysUpdateV0)(nil),
		(*Level1Update_Level_2KeysUpdateV1)(nil),
	}
	file_types_proto_msgTypes[125].OneofWrappers = []interface{}{
		(*UpdatePayload_ProtocolUpdate)(nil),
		(*UpdatePayload_ElectionDifficultyUpdate)(nil),
		(*UpdatePayload_EuroPerEnergyUpdate)(nil),
		(*UpdatePayload_MicroCcdPerEuroUpdate)(nil),
		(*UpdatePayload_FoundationAccountUpdate)(nil),
		(*UpdatePayload_MintDistributionUpdate)(nil),
		(*UpdatePayload_TransactionFeeDistributionUpdate)(nil),
		(*UpdatePayload_GasRewardsUpdate)(nil),
		(*UpdatePayload_BakerStakeThresholdUpdate)(nil),
		(*UpdatePayload_RootUpdate)(nil),
		(*UpdatePayload_Level_1Update)(nil),
		(*UpdatePayload_AddAnonymityRevokerUpdate)(nil),
		(*UpdatePayload_AddIdentityProviderUpdate)(nil),
		(*UpdatePayload_CooldownParametersCpv_1Update)(nil),
		(*UpdatePayload_PoolParametersCpv_1Update)(nil),
		(*UpdatePayload_TimeParametersCpv_1Update)(nil),
		(*UpdatePayload_MintDistributionCpv_1Update)(nil),
		(*UpdatePayload_GasRewardsCpv_2Update)(nil),
		(*UpdatePayload_TimeoutParametersUpdate)(nil),
		(*UpdatePayload_MinBlockTimeUpdate)(nil),
		(*UpdatePayload_BlockEnergyLimitUpdate)(nil),
		(*UpdatePayload_FinalizationCommitteeParametersUpdate)(nil),
	}
	file_types_proto_msgTypes[130].OneofWrappers = []interface{}{
		(*BlockItemSummary_AccountTransaction)(nil),
		(*BlockItemSummary_AccountCreation)(nil),
		(*BlockItemSummary_Update)(nil),
	}
	file_types_proto_msgTypes[132].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[135].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*PoolPendingChange_Reduce_)(nil),
		(*PoolPendingChange_Remove_)(nil),
	}
	file_types_proto_msgTypes[139].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[141].OneofWrappers = []interface{}{
		(*BlocksAtHeightRequest_Absolute_)(nil),
		(*BlocksAtHeightRequest_Relative_)(nil),
	}
	file_types_proto_msgTypes[143].OneofWrappers = []interface{}{
		(*TokenomicsInfo_V0_)(nil),
		(*TokenomicsInfo_V1_)(nil),
	}
	file_types_proto_msgTypes[144].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*InvokeInstanceResponse_Success_)(nil),
		(*InvokeInstanceResponse_Failure_)(nil),
	}
	file_types_proto_msgTypes[147].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[152].OneofWrappers = []interface{}{
		(*BlockSpecialEvent_BakingRewards_)(nil),
		(*BlockSpecialEvent_Mint_)(nil),
		(*BlockSpecialEvent_FinalizationRewards_)(nil),
		(*BlockSpecialEvent_BlockReward_)(nil),
		(*BlockSpecialEvent_PaydayFoundationReward_)(nil),
		(*BlockSpecialEvent_PaydayAccountReward_)(nil),
		(*BlockSpecialEvent_BlockAccrueReward_)(nil),
		(*BlockSpecialEvent_PaydayPoolReward_)(nil),
	}
	file_types_proto_msgTypes[153].OneofWrappers = []interface{}{
		(*PendingUpdate_RootKeys)(nil),
		(*PendingUpdate_Level1Keys)(nil),
		(*PendingUpdate_Level2KeysCpv_0)(nil),
		(*PendingUpdate_Level2KeysCpv_1)(nil),
		(*PendingUpdate_Protocol)(nil),
		(*PendingUpdate_ElectionDifficulty)(nil),
		(*PendingUpdate_EuroPerEnergy)(nil),
		(*PendingUpdate_MicroCcdPerEuro)(nil),
		(*PendingUpdate_FoundationAccount)(nil),
		(*PendingUpdate_MintDistributionCpv_0)(nil),
		(*PendingUpdate_MintDistributionCpv_1)(nil),
		(*PendingUpdate_TransactionFeeDistribution)(nil),
		(*PendingUpdate_GasRewards)(nil),
		(*PendingUpdate_PoolParametersCpv_0)(nil),
		(*PendingUpdate_PoolParametersCpv_1)(nil),
		(*PendingUpdate_AddAnonymityRevoker)(nil),
		(*PendingUpdate_AddIdentityProvider)(nil),
		(*PendingUpdate_CooldownParameters)(nil),
		(*PendingUpdate_TimeParameters)(nil),
		(*PendingUpdate_GasRewardsCpv_2)(nil),
		(*PendingUpdate_TimeoutParameters)(nil),
		(*PendingUpdate_MinBlockTime)(nil),
		(*PendingUpdate_BlockEnergyLimit)(nil),
		(*PendingUpdate_FinalizationCommitteeParameters)(nil),
	}
	file_types_proto_msgTypes[164].OneofWrappers = []interface{}{
		(*NodeInfo_Bootstrapper)(nil),
		(*NodeInfo_Node_)(nil),
	}
	file_types_proto_msgTypes[165].OneofWrappers = []interface{}{
		(*SendBlockItemRequest_AccountTransaction)(nil),
		(*SendBlockItemRequest_CredentialDeployment)(nil),
		(*SendBlockItemRequest_UpdateInstruction)(nil),
	}
	file_types_proto_msgTypes[166].OneofWrappers = []interface{}{
		(*CredentialDeployment_RawPayload)(nil),
	}
	file_types_proto_msgTypes[176].OneofWrappers = []interface{}{
		(*AccountTransactionPayload_RawPayload)(nil),
		(*AccountTransactionPayload_DeployModule)(nil),
		(*AccountTransactionPayload_InitContract)(nil),
		(*AccountTransactionPayload_UpdateContract)(nil),
		(*AccountTransactionPayload_Transfer)(nil),
		(*AccountTransactionPayload_TransferWithMemo)(nil),
		(*AccountTransactionPayload_RegisterData)(nil),
	}
	file_types_proto_msgTypes[181].OneofWrappers = []interface{}{
		(*UpdateInstructionPayload_RawPayload)(nil),
	}
	file_types_proto_msgTypes[188].OneofWrappers = []interface{}{
		(*ChainParameters_V0)(nil),
		(*ChainParameters_V1)(nil),
		(*ChainParameters_V2)(nil),
	}
	file_types_proto_msgTypes[192].OneofWrappers = []interface{}{
		(*BlockFinalizationSummary_None)(nil),
		(*BlockFinalizationSummary_Record)(nil),
	}
	file_types_proto_msgTypes[193].OneofWrappers = []interface{}{
		(*BlockItem_AccountTransaction)(nil),
		(*BlockItem_CredentialDeployment)(nil),
		(*BlockItem_UpdateInstruction)(nil),
	}
	file_types_proto_msgTypes[197].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[198].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[233].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[235].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[236].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[237].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[239].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[254].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[255].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[265].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[267].OneofWrappers = []interface{}{
		(*PeersInfo_Peer_Bootstrapper)(nil),
		(*PeersInfo_Peer_NodeCatchupStatus)(nil),
	}
	file_types_proto_msgTypes[270].OneofWrappers = []interface{}{
		(*NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo_)(nil),
		(*NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo_)(nil),
		(*NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo_)(nil),
	}
	file_types_proto_msgTypes[271].OneofWrappers = []interface{}{
		(*NodeInfo_Node_NotRunning)(nil),
		(*NodeInfo_Node_Passive)(nil),
		(*NodeInfo_Node_Active)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   278,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
